
neural-network-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003165c  08005ba0  08005ba0  00015ba0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080371fc  080371fc  000471fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08037200  08037200  00047200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000c68  24000000  08037204  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a70  24000c80  08037e6c  00050c80  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00060000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00050c68  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00050c96  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a392  00000000  00000000  00050cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001de8  00000000  00000000  0005b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00001ac5  00000000  00000000  0005ce53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000648  00000000  00000000  0005e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000673  00000000  00000000  0005ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000326ea  00000000  00000000  0005f5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000099df  00000000  00000000  00091cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00143599  00000000  00000000  0009b69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001e30  00000000  00000000  001dec38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001e0a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000c80 	.word	0x24000c80
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005b6c 	.word	0x08005b6c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000c84 	.word	0x24000c84
 800030c:	08005b6c 	.word	0x08005b6c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <aiInit>:
static ai_buffer *ai_output;

/*
 * Bootstrap
 */
int aiInit(void) {
 80003c0:	b530      	push	{r4, r5, lr}
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
  err = ai_network_create_and_init(&network, acts, NULL);
 80003c2:	4d0e      	ldr	r5, [pc, #56]	; (80003fc <aiInit+0x3c>)
int aiInit(void) {
 80003c4:	b083      	sub	sp, #12
  const ai_handle acts[] = { activations };
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <aiInit+0x40>)
  err = ai_network_create_and_init(&network, acts, NULL);
 80003c8:	2200      	movs	r2, #0
 80003ca:	a901      	add	r1, sp, #4
 80003cc:	4628      	mov	r0, r5
  const ai_handle acts[] = { activations };
 80003ce:	9301      	str	r3, [sp, #4]
  err = ai_network_create_and_init(&network, acts, NULL);
 80003d0:	f001 f86c 	bl	80014ac <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE)
 80003d4:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 80003d8:	d10c      	bne.n	80003f4 <aiInit+0x34>
  {
	  return 0;
  }
  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network, NULL);
 80003da:	4621      	mov	r1, r4
 80003dc:	6828      	ldr	r0, [r5, #0]
 80003de:	f000 ff4f 	bl	8001280 <ai_network_inputs_get>
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <aiInit+0x44>)
 80003e4:	4602      	mov	r2, r0
  ai_output = ai_network_outputs_get(network, NULL);
 80003e6:	4621      	mov	r1, r4
 80003e8:	6828      	ldr	r0, [r5, #0]
  ai_input = ai_network_inputs_get(network, NULL);
 80003ea:	601a      	str	r2, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80003ec:	f000 ff56 	bl	800129c <ai_network_outputs_get>
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <aiInit+0x48>)
 80003f2:	6018      	str	r0, [r3, #0]

  return 0;
}
 80003f4:	2000      	movs	r0, #0
 80003f6:	b003      	add	sp, #12
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop
 80003fc:	240010d0 	.word	0x240010d0
 8000400:	24000ca0 	.word	0x24000ca0
 8000404:	240010a0 	.word	0x240010a0
 8000408:	240010a4 	.word	0x240010a4

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b510      	push	{r4, lr}
 800040e:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	224c      	movs	r2, #76	; 0x4c
 8000412:	2100      	movs	r1, #0
 8000414:	a80a      	add	r0, sp, #40	; 0x28
 8000416:	f003 fde5 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041a:	2220      	movs	r2, #32
 800041c:	2100      	movs	r1, #0
 800041e:	a802      	add	r0, sp, #8
 8000420:	f003 fde0 	bl	8003fe4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f000 fa53 	bl	80008d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800042a:	4a20      	ldr	r2, [pc, #128]	; (80004ac <SystemClock_Config+0xa0>)
 800042c:	2300      	movs	r3, #0
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	6993      	ldr	r3, [r2, #24]
 8000432:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	6993      	ldr	r3, [r2, #24]
 800043a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000442:	6993      	ldr	r3, [r2, #24]
 8000444:	049b      	lsls	r3, r3, #18
 8000446:	d5fc      	bpl.n	8000442 <SystemClock_Config+0x36>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000448:	2001      	movs	r0, #1
 800044a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800044e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2202      	movs	r2, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000452:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000456:	f240 1113 	movw	r1, #275	; 0x113
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 800045c:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000460:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000464:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000466:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800046a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLP = 1;
 800046c:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800046e:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000472:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f000 fa50 	bl	8000918 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	b108      	cbz	r0, 8000480 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047e:	e7fe      	b.n	800047e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	243f      	movs	r4, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000484:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000488:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800048c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000492:	2408      	movs	r4, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000494:	e9cd 2206 	strd	r2, r2, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000498:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800049a:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800049e:	f000 fd87 	bl	8000fb0 <HAL_RCC_ClockConfig>
 80004a2:	b108      	cbz	r0, 80004a8 <SystemClock_Config+0x9c>
 80004a4:	b672      	cpsid	i
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <SystemClock_Config+0x9a>
}
 80004a8:	b01e      	add	sp, #120	; 0x78
 80004aa:	bd10      	pop	{r4, pc}
 80004ac:	58024800 	.word	0x58024800

080004b0 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b0:	4a35      	ldr	r2, [pc, #212]	; (8000588 <main+0xd8>)
 80004b2:	6953      	ldr	r3, [r2, #20]
 80004b4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	d111      	bne.n	80004e2 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004c2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004c6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004ce:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004d2:	6953      	ldr	r3, [r2, #20]
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004de:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004e2:	4829      	ldr	r0, [pc, #164]	; (8000588 <main+0xd8>)
 80004e4:	6943      	ldr	r3, [r0, #20]
 80004e6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80004ea:	d124      	bne.n	8000536 <main+0x86>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004ec:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004f4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f8:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004fc:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000500:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000504:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000506:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800050a:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800050c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000510:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000512:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	d1f8      	bne.n	800050c <main+0x5c>
    } while(sets-- != 0U);
 800051a:	3c20      	subs	r4, #32
 800051c:	f114 0f20 	cmn.w	r4, #32
 8000520:	d1f1      	bne.n	8000506 <main+0x56>
 8000522:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	6943      	ldr	r3, [r0, #20]
 8000528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052c:	6143      	str	r3, [r0, #20]
 800052e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000532:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000536:	f000 f923 	bl	8000780 <HAL_Init>
  SystemClock_Config();
 800053a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80005a0 <main+0xf0>
 800053e:	f7ff ff65 	bl	800040c <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <main+0xdc>)
 8000544:	4f12      	ldr	r7, [pc, #72]	; (8000590 <main+0xe0>)
 8000546:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800054a:	4e12      	ldr	r6, [pc, #72]	; (8000594 <main+0xe4>)
 800054c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000550:	4d11      	ldr	r5, [pc, #68]	; (8000598 <main+0xe8>)
 8000552:	4c12      	ldr	r4, [pc, #72]	; (800059c <main+0xec>)
 8000554:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	9b01      	ldr	r3, [sp, #4]
  MX_X_CUBE_AI_Init();
 8000564:	f000 fe4c 	bl	8001200 <MX_X_CUBE_AI_Init>
  aiInit();
 8000568:	f7ff ff2a 	bl	80003c0 <aiInit>
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800056c:	f8d8 1000 	ldr.w	r1, [r8]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000570:	6832      	ldr	r2, [r6, #0]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000572:	604f      	str	r7, [r1, #4]
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000574:	6820      	ldr	r0, [r4, #0]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000576:	6055      	str	r5, [r2, #4]
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000578:	f000 fff2 	bl	8001560 <ai_network_run>
  if (n_batch != 1) {
 800057c:	2801      	cmp	r0, #1
 800057e:	d0f5      	beq.n	800056c <main+0xbc>
      err = ai_network_get_error(network);
 8000580:	6820      	ldr	r0, [r4, #0]
 8000582:	f000 fe7b 	bl	800127c <ai_network_get_error>
 8000586:	e7f1      	b.n	800056c <main+0xbc>
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	58024400 	.word	0x58024400
 8000590:	240010c0 	.word	0x240010c0
 8000594:	240010a4 	.word	0x240010a4
 8000598:	240010e0 	.word	0x240010e0
 800059c:	240010d0 	.word	0x240010d0
 80005a0:	240010a0 	.word	0x240010a0

080005a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <HAL_MspInit+0x20>)
{
 80005a6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80005ac:	f042 0202 	orr.w	r2, r2, #2
 80005b0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80005b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c0:	b002      	add	sp, #8
 80005c2:	4770      	bx	lr
 80005c4:	58024400 	.word	0x58024400

080005c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler>
 80005ca:	bf00      	nop

080005cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler>
 80005ce:	bf00      	nop

080005d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MemManage_Handler>
 80005d2:	bf00      	nop

080005d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <BusFault_Handler>
 80005d6:	bf00      	nop

080005d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler>
 80005da:	bf00      	nop

080005dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <DebugMon_Handler>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PendSV_Handler>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 b8fa 	b.w	80007e0 <HAL_IncTick>

080005ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ee:	4c0d      	ldr	r4, [pc, #52]	; (8000624 <_sbrk+0x38>)
{
 80005f0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <_sbrk+0x3c>)
 80005f4:	4d0d      	ldr	r5, [pc, #52]	; (800062c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80005f6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80005fa:	b12a      	cbz	r2, 8000608 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fc:	4413      	add	r3, r2
 80005fe:	428b      	cmp	r3, r1
 8000600:	d808      	bhi.n	8000614 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000602:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000604:	6023      	str	r3, [r4, #0]
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <_sbrk+0x44>)
 800060a:	4602      	mov	r2, r0
 800060c:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800060e:	4413      	add	r3, r2
 8000610:	428b      	cmp	r3, r1
 8000612:	d9f6      	bls.n	8000602 <_sbrk+0x16>
    errno = ENOMEM;
 8000614:	f003 fd48 	bl	80040a8 <__errno>
 8000618:	230c      	movs	r3, #12
    return (void *)-1;
 800061a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800061e:	6003      	str	r3, [r0, #0]
}
 8000620:	4610      	mov	r0, r2
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	240010e4 	.word	0x240010e4
 8000628:	24050000 	.word	0x24050000
 800062c:	00000800 	.word	0x00000800
 8000630:	20000000 	.word	0x20000000

08000634 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000634:	4922      	ldr	r1, [pc, #136]	; (80006c0 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4a23      	ldr	r2, [pc, #140]	; (80006c4 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000638:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800063c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000640:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	6813      	ldr	r3, [r2, #0]
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	2b06      	cmp	r3, #6
 800064e:	d805      	bhi.n	800065c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000650:	6813      	ldr	r3, [r2, #0]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	f043 0307 	orr.w	r3, r3, #7
 800065a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800065e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000660:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000662:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000666:	f041 0101 	orr.w	r1, r1, #1
 800066a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800066c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	400a      	ands	r2, r1
 8000672:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	071b      	lsls	r3, r3, #28
 8000678:	d505      	bpl.n	8000686 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800067a:	6803      	ldr	r3, [r0, #0]
 800067c:	f023 030f 	bic.w	r3, r3, #15
 8000680:	f043 0307 	orr.w	r3, r3, #7
 8000684:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <SystemInit+0x94>)
 8000688:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800068a:	4911      	ldr	r1, [pc, #68]	; (80006d0 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4c11      	ldr	r4, [pc, #68]	; (80006d4 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8000690:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000692:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000694:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000696:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000698:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800069c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800069e:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 80006a2:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80006a4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 80006a6:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80006a8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80006aa:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 80006ae:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80006b2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b6:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	52002000 	.word	0x52002000
 80006c8:	58024400 	.word	0x58024400
 80006cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d0:	01010280 	.word	0x01010280
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	52004000 	.word	0x52004000

080006e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f7ff ffa6 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f003 fcd1 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000712:	f7ff fecd 	bl	80004b0 <main>
  bx  lr
 8000716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000718:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800071c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000720:	24000c68 	.word	0x24000c68
  ldr r2, =_sidata
 8000724:	08037204 	.word	0x08037204
  ldr r2, =_sbss
 8000728:	24000c80 	.word	0x24000c80
  ldr r4, =_ebss
 800072c:	240016f0 	.word	0x240016f0

08000730 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC3_IRQHandler>
	...

08000734 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_InitTick+0x40>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b90b      	cbnz	r3, 800073e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800073a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800073c:	4770      	bx	lr
{
 800073e:	b510      	push	{r4, lr}
 8000740:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <HAL_InitTick+0x44>)
 8000748:	fbb0 f3f3 	udiv	r3, r0, r3
 800074c:	6810      	ldr	r0, [r2, #0]
 800074e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000752:	f000 f8a7 	bl	80008a4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	2c0f      	cmp	r4, #15
 8000758:	d800      	bhi.n	800075c <HAL_InitTick+0x28>
 800075a:	b108      	cbz	r0, 8000760 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800075c:	2001      	movs	r0, #1
}
 800075e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	4621      	mov	r1, r4
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f000 f85e 	bl	8000828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_InitTick+0x48>)
 800076e:	2000      	movs	r0, #0
 8000770:	601c      	str	r4, [r3, #0]
}
 8000772:	bd10      	pop	{r4, pc}
 8000774:	24000008 	.word	0x24000008
 8000778:	24000000 	.word	0x24000000
 800077c:	2400000c 	.word	0x2400000c

08000780 <HAL_Init>:
{
 8000780:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000784:	4c12      	ldr	r4, [pc, #72]	; (80007d0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000786:	f000 f83d 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800078a:	f000 fb71 	bl	8000e70 <HAL_RCC_GetSysClockFreq>
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_Init+0x54>)
 8000790:	4911      	ldr	r1, [pc, #68]	; (80007d8 <HAL_Init+0x58>)
 8000792:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000794:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000796:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800079a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800079e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007a0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007a2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007a8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007ac:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007ae:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80007b2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007b6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b8:	f7ff ffbc 	bl	8000734 <HAL_InitTick>
 80007bc:	b110      	cbz	r0, 80007c4 <HAL_Init+0x44>
    return HAL_ERROR;
 80007be:	2401      	movs	r4, #1
}
 80007c0:	4620      	mov	r0, r4
 80007c2:	bd10      	pop	{r4, pc}
 80007c4:	4604      	mov	r4, r0
  HAL_MspInit();
 80007c6:	f7ff feed 	bl	80005a4 <HAL_MspInit>
}
 80007ca:	4620      	mov	r0, r4
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	24000004 	.word	0x24000004
 80007d4:	58024400 	.word	0x58024400
 80007d8:	08005bb0 	.word	0x08005bb0
 80007dc:	24000000 	.word	0x24000000

080007e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x10>)
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <HAL_IncTick+0x14>)
 80007e4:	6811      	ldr	r1, [r2, #0]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	440b      	add	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	240010e8 	.word	0x240010e8
 80007f4:	24000008 	.word	0x24000008

080007f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007f8:	4b01      	ldr	r3, [pc, #4]	; (8000800 <HAL_GetTick+0x8>)
 80007fa:	6818      	ldr	r0, [r3, #0]
}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	240010e8 	.word	0x240010e8

08000804 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000814:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800081a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800081c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00
 8000824:	05fa0000 	.word	0x05fa0000

08000828 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_NVIC_SetPriority+0x70>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000830:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000832:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083a:	f1be 0f04 	cmp.w	lr, #4
 800083e:	bf28      	it	cs
 8000840:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000844:	f1bc 0f06 	cmp.w	ip, #6
 8000848:	d91a      	bls.n	8000880 <HAL_NVIC_SetPriority+0x58>
 800084a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000850:	fa0c fc03 	lsl.w	ip, ip, r3
 8000854:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800085c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000862:	ea21 010c 	bic.w	r1, r1, ip
 8000866:	fa01 f103 	lsl.w	r1, r1, r3
 800086a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800086e:	db0a      	blt.n	8000886 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	0109      	lsls	r1, r1, #4
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_NVIC_SetPriority+0x74>)
 8000874:	b2c9      	uxtb	r1, r1
 8000876:	4403      	add	r3, r0
 8000878:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800087c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000880:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	4613      	mov	r3, r2
 8000884:	e7e8      	b.n	8000858 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	f000 000f 	and.w	r0, r0, #15
 800088a:	0109      	lsls	r1, r1, #4
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_NVIC_SetPriority+0x78>)
 800088e:	b2c9      	uxtb	r1, r1
 8000890:	4403      	add	r3, r0
 8000892:	7619      	strb	r1, [r3, #24]
 8000894:	f85d fb04 	ldr.w	pc, [sp], #4
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ecfc 	.word	0xe000ecfc

080008a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	1e43      	subs	r3, r0, #1
 80008a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008aa:	d20c      	bcs.n	80008c6 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <HAL_SYSTICK_Config+0x28>)
 80008b4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80008d0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80008d2:	4c10      	ldr	r4, [pc, #64]	; (8000914 <HAL_PWREx_ConfigSupply+0x44>)
 80008d4:	68e3      	ldr	r3, [r4, #12]
 80008d6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80008da:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80008dc:	d105      	bne.n	80008ea <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80008de:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80008e2:	1a18      	subs	r0, r3, r0
 80008e4:	bf18      	it	ne
 80008e6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80008e8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80008ea:	f023 0307 	bic.w	r3, r3, #7
 80008ee:	4303      	orrs	r3, r0
 80008f0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80008f2:	f7ff ff81 	bl	80007f8 <HAL_GetTick>
 80008f6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80008f8:	e005      	b.n	8000906 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80008fa:	f7ff ff7d 	bl	80007f8 <HAL_GetTick>
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000904:	d804      	bhi.n	8000910 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000906:	6863      	ldr	r3, [r4, #4]
 8000908:	049b      	lsls	r3, r3, #18
 800090a:	d5f6      	bpl.n	80008fa <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
}
 800090e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000910:	2001      	movs	r0, #1
}
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	58024800 	.word	0x58024800

08000918 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000918:	2800      	cmp	r0, #0
 800091a:	f000 81bd 	beq.w	8000c98 <HAL_RCC_OscConfig+0x380>
{
 800091e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	4604      	mov	r4, r0
 8000924:	07d9      	lsls	r1, r3, #31
 8000926:	d52e      	bpl.n	8000986 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000928:	4993      	ldr	r1, [pc, #588]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 800092a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800092c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800092e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000932:	2a10      	cmp	r2, #16
 8000934:	f000 80f0 	beq.w	8000b18 <HAL_RCC_OscConfig+0x200>
 8000938:	2a18      	cmp	r2, #24
 800093a:	f000 80e8 	beq.w	8000b0e <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093e:	6863      	ldr	r3, [r4, #4]
 8000940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000944:	f000 8108 	beq.w	8000b58 <HAL_RCC_OscConfig+0x240>
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 8146 	beq.w	8000bda <HAL_RCC_OscConfig+0x2c2>
 800094e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000952:	4b89      	ldr	r3, [pc, #548]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f000 8254 	beq.w	8000e02 <HAL_RCC_OscConfig+0x4ea>
 800095a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000966:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000968:	f7ff ff46 	bl	80007f8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800096c:	4e82      	ldr	r6, [pc, #520]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800096e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000970:	e005      	b.n	800097e <HAL_RCC_OscConfig+0x66>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000972:	f7ff ff41 	bl	80007f8 <HAL_GetTick>
 8000976:	1b40      	subs	r0, r0, r5
 8000978:	2864      	cmp	r0, #100	; 0x64
 800097a:	f200 812c 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800097e:	6833      	ldr	r3, [r6, #0]
 8000980:	039b      	lsls	r3, r3, #14
 8000982:	d5f6      	bpl.n	8000972 <HAL_RCC_OscConfig+0x5a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	079d      	lsls	r5, r3, #30
 8000988:	d47e      	bmi.n	8000a88 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800098a:	06d9      	lsls	r1, r3, #27
 800098c:	d528      	bpl.n	80009e0 <HAL_RCC_OscConfig+0xc8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800098e:	497a      	ldr	r1, [pc, #488]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000990:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000992:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000994:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000998:	2a08      	cmp	r2, #8
 800099a:	f000 80cd 	beq.w	8000b38 <HAL_RCC_OscConfig+0x220>
 800099e:	2a18      	cmp	r2, #24
 80009a0:	f000 80c5 	beq.w	8000b2e <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80009a4:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80009a6:	4d74      	ldr	r5, [pc, #464]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 814e 	beq.w	8000c4a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009b6:	f7ff ff1f 	bl	80007f8 <HAL_GetTick>
 80009ba:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80009bc:	e005      	b.n	80009ca <HAL_RCC_OscConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80009be:	f7ff ff1b 	bl	80007f8 <HAL_GetTick>
 80009c2:	1b80      	subs	r0, r0, r6
 80009c4:	2802      	cmp	r0, #2
 80009c6:	f200 8106 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	d5f6      	bpl.n	80009be <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80009d0:	68eb      	ldr	r3, [r5, #12]
 80009d2:	6a22      	ldr	r2, [r4, #32]
 80009d4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80009d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80009dc:	60eb      	str	r3, [r5, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	071d      	lsls	r5, r3, #28
 80009e2:	d516      	bpl.n	8000a12 <HAL_RCC_OscConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80009e4:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009e6:	4d64      	ldr	r5, [pc, #400]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 810c 	beq.w	8000c06 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 80009ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	676b      	str	r3, [r5, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009f6:	f7ff feff 	bl	80007f8 <HAL_GetTick>
 80009fa:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80009fc:	e005      	b.n	8000a0a <HAL_RCC_OscConfig+0xf2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009fe:	f7ff fefb 	bl	80007f8 <HAL_GetTick>
 8000a02:	1b80      	subs	r0, r0, r6
 8000a04:	2802      	cmp	r0, #2
 8000a06:	f200 80e6 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0c:	0798      	lsls	r0, r3, #30
 8000a0e:	d5f6      	bpl.n	80009fe <HAL_RCC_OscConfig+0xe6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	069a      	lsls	r2, r3, #26
 8000a14:	d516      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000a16:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000a18:	4d57      	ldr	r5, [pc, #348]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8104 	beq.w	8000c28 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a26:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000a28:	f7ff fee6 	bl	80007f8 <HAL_GetTick>
 8000a2c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000a2e:	e005      	b.n	8000a3c <HAL_RCC_OscConfig+0x124>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a30:	f7ff fee2 	bl	80007f8 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	f200 80cd 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	049f      	lsls	r7, r3, #18
 8000a40:	d5f6      	bpl.n	8000a30 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	0759      	lsls	r1, r3, #29
 8000a46:	f100 808d 	bmi.w	8000b64 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a4c:	b1d0      	cbz	r0, 8000a84 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000a4e:	4d4a      	ldr	r5, [pc, #296]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000a50:	692b      	ldr	r3, [r5, #16]
 8000a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a56:	2b18      	cmp	r3, #24
 8000a58:	f000 8185 	beq.w	8000d66 <HAL_RCC_OscConfig+0x44e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a5c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a64:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a66:	f000 8119 	beq.w	8000c9c <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fec5 	bl	80007f8 <HAL_GetTick>
 8000a6e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000a70:	e005      	b.n	8000a7e <HAL_RCC_OscConfig+0x166>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a72:	f7ff fec1 	bl	80007f8 <HAL_GetTick>
 8000a76:	1b00      	subs	r0, r0, r4
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	f200 80ac 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	d4f6      	bmi.n	8000a72 <HAL_RCC_OscConfig+0x15a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8000a84:	2000      	movs	r0, #0
}
 8000a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000a8a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a8e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000a92:	d122      	bne.n	8000ada <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000a96:	68e2      	ldr	r2, [r4, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	0759      	lsls	r1, r3, #29
 8000a9c:	d501      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x18a>
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	d043      	beq.n	8000b2a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000aa2:	4d35      	ldr	r5, [pc, #212]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	f023 0319 	bic.w	r3, r3, #25
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000aae:	f7ff fea3 	bl	80007f8 <HAL_GetTick>
 8000ab2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ab4:	e005      	b.n	8000ac2 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fe9f 	bl	80007f8 <HAL_GetTick>
 8000aba:	1b80      	subs	r0, r0, r6
 8000abc:	2802      	cmp	r0, #2
 8000abe:	f200 808a 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ac2:	682b      	ldr	r3, [r5, #0]
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	d5f6      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac8:	686b      	ldr	r3, [r5, #4]
 8000aca:	6922      	ldr	r2, [r4, #16]
 8000acc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000ad0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ad4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	e757      	b.n	800098a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000ada:	2b18      	cmp	r3, #24
 8000adc:	f000 80d8 	beq.w	8000c90 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000ae0:	4d25      	ldr	r5, [pc, #148]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ae2:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000ae4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	f000 80c1 	beq.w	8000c6e <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000aec:	f023 0319 	bic.w	r3, r3, #25
 8000af0:	4313      	orrs	r3, r2
 8000af2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000af4:	f7ff fe80 	bl	80007f8 <HAL_GetTick>
 8000af8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000afa:	e004      	b.n	8000b06 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000afc:	f7ff fe7c 	bl	80007f8 <HAL_GetTick>
 8000b00:	1b80      	subs	r0, r0, r6
 8000b02:	2802      	cmp	r0, #2
 8000b04:	d867      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	075f      	lsls	r7, r3, #29
 8000b0a:	d5f7      	bpl.n	8000afc <HAL_RCC_OscConfig+0x1e4>
 8000b0c:	e7dc      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000b0e:	f001 0103 	and.w	r1, r1, #3
 8000b12:	2902      	cmp	r1, #2
 8000b14:	f47f af13 	bne.w	800093e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	0392      	lsls	r2, r2, #14
 8000b1e:	f57f af32 	bpl.w	8000986 <HAL_RCC_OscConfig+0x6e>
 8000b22:	6862      	ldr	r2, [r4, #4]
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f47f af2e 	bne.w	8000986 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
}
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000b2e:	f001 0103 	and.w	r1, r1, #3
 8000b32:	2901      	cmp	r1, #1
 8000b34:	f47f af36 	bne.w	80009a4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	05d2      	lsls	r2, r2, #23
 8000b3e:	d502      	bpl.n	8000b46 <HAL_RCC_OscConfig+0x22e>
 8000b40:	69e2      	ldr	r2, [r4, #28]
 8000b42:	2a80      	cmp	r2, #128	; 0x80
 8000b44:	d1f1      	bne.n	8000b2a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000b46:	490c      	ldr	r1, [pc, #48]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000b48:	6a20      	ldr	r0, [r4, #32]
 8000b4a:	68ca      	ldr	r2, [r1, #12]
 8000b4c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000b50:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000b54:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000b56:	e743      	b.n	80009e0 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_RCC_OscConfig+0x260>)
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b62:	e701      	b.n	8000968 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8000b64:	4d05      	ldr	r5, [pc, #20]	; (8000b7c <HAL_RCC_OscConfig+0x264>)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b6e:	f7ff fe43 	bl	80007f8 <HAL_GetTick>
 8000b72:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b74:	e009      	b.n	8000b8a <HAL_RCC_OscConfig+0x272>
 8000b76:	bf00      	nop
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b80:	f7ff fe3a 	bl	80007f8 <HAL_GetTick>
 8000b84:	1b80      	subs	r0, r0, r6
 8000b86:	2864      	cmp	r0, #100	; 0x64
 8000b88:	d825      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	05da      	lsls	r2, r3, #23
 8000b8e:	d5f7      	bpl.n	8000b80 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b90:	68a3      	ldr	r3, [r4, #8]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	f000 815c 	beq.w	8000e50 <HAL_RCC_OscConfig+0x538>
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 813a 	beq.w	8000e12 <HAL_RCC_OscConfig+0x4fa>
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	4ba8      	ldr	r3, [pc, #672]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
 8000ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ba4:	f000 815a 	beq.w	8000e5c <HAL_RCC_OscConfig+0x544>
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	671a      	str	r2, [r3, #112]	; 0x70
 8000bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bb0:	f022 0204 	bic.w	r2, r2, #4
 8000bb4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fe1f 	bl	80007f8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bba:	4ea2      	ldr	r6, [pc, #648]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bbc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bc0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bc2:	e004      	b.n	8000bce <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fe18 	bl	80007f8 <HAL_GetTick>
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	42b8      	cmp	r0, r7
 8000bcc:	d803      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bce:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000bd0:	079b      	lsls	r3, r3, #30
 8000bd2:	d5f7      	bpl.n	8000bc4 <HAL_RCC_OscConfig+0x2ac>
 8000bd4:	e739      	b.n	8000a4a <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8000bd6:	2003      	movs	r0, #3
}
 8000bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bda:	4d9a      	ldr	r5, [pc, #616]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be2:	602b      	str	r3, [r5, #0]
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bec:	f7ff fe04 	bl	80007f8 <HAL_GetTick>
 8000bf0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bf2:	e004      	b.n	8000bfe <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf4:	f7ff fe00 	bl	80007f8 <HAL_GetTick>
 8000bf8:	1b80      	subs	r0, r0, r6
 8000bfa:	2864      	cmp	r0, #100	; 0x64
 8000bfc:	d8eb      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	039f      	lsls	r7, r3, #14
 8000c02:	d4f7      	bmi.n	8000bf4 <HAL_RCC_OscConfig+0x2dc>
 8000c04:	e6be      	b.n	8000984 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8000c06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fdf3 	bl	80007f8 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c14:	e004      	b.n	8000c20 <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c16:	f7ff fdef 	bl	80007f8 <HAL_GetTick>
 8000c1a:	1b80      	subs	r0, r0, r6
 8000c1c:	2802      	cmp	r0, #2
 8000c1e:	d8da      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c22:	0799      	lsls	r1, r3, #30
 8000c24:	d4f7      	bmi.n	8000c16 <HAL_RCC_OscConfig+0x2fe>
 8000c26:	e6f3      	b.n	8000a10 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c30:	f7ff fde2 	bl	80007f8 <HAL_GetTick>
 8000c34:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000c36:	e004      	b.n	8000c42 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c38:	f7ff fdde 	bl	80007f8 <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	2802      	cmp	r0, #2
 8000c40:	d8c9      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000c42:	682b      	ldr	r3, [r5, #0]
 8000c44:	0498      	lsls	r0, r3, #18
 8000c46:	d4f7      	bmi.n	8000c38 <HAL_RCC_OscConfig+0x320>
 8000c48:	e6fb      	b.n	8000a42 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c52:	f7ff fdd1 	bl	80007f8 <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000c58:	e004      	b.n	8000c64 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000c5a:	f7ff fdcd 	bl	80007f8 <HAL_GetTick>
 8000c5e:	1b80      	subs	r0, r0, r6
 8000c60:	2802      	cmp	r0, #2
 8000c62:	d8b8      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	05df      	lsls	r7, r3, #23
 8000c68:	d4f7      	bmi.n	8000c5a <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	e6b8      	b.n	80009e0 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c74:	f7ff fdc0 	bl	80007f8 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c7a:	e004      	b.n	8000c86 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fdbc 	bl	80007f8 <HAL_GetTick>
 8000c80:	1b80      	subs	r0, r0, r6
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d8a7      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	0758      	lsls	r0, r3, #29
 8000c8a:	d4f7      	bmi.n	8000c7c <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	e67c      	b.n	800098a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c90:	0790      	lsls	r0, r2, #30
 8000c92:	f47f af25 	bne.w	8000ae0 <HAL_RCC_OscConfig+0x1c8>
 8000c96:	e6fd      	b.n	8000a94 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
}
 8000c9a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fdac 	bl	80007f8 <HAL_GetTick>
 8000ca0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000ca2:	e004      	b.n	8000cae <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ca4:	f7ff fda8 	bl	80007f8 <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d893      	bhi.n	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	0199      	lsls	r1, r3, #6
 8000cb2:	d4f7      	bmi.n	8000ca4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000cb6:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <HAL_RCC_OscConfig+0x530>)
 8000cb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cba:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000cbc:	4963      	ldr	r1, [pc, #396]	; (8000e4c <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cbe:	4e61      	ldr	r6, [pc, #388]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cc4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000cc8:	62ab      	str	r3, [r5, #40]	; 0x28
 8000cca:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	025b      	lsls	r3, r3, #9
 8000cd4:	0412      	lsls	r2, r2, #16
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000cea:	3a01      	subs	r2, #1
 8000cec:	0612      	lsls	r2, r2, #24
 8000cee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8000cf6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000cfe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d02:	4011      	ands	r1, r2
 8000d04:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000d08:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000d0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d0e:	f023 030c 	bic.w	r3, r3, #12
 8000d12:	4313      	orrs	r3, r2
 8000d14:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000d16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000d1a:	f023 0302 	bic.w	r3, r3, #2
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000d22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000d2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000d32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8000d3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fd55 	bl	80007f8 <HAL_GetTick>
 8000d4e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d50:	e005      	b.n	8000d5e <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d52:	f7ff fd51 	bl	80007f8 <HAL_GetTick>
 8000d56:	1b00      	subs	r0, r0, r4
 8000d58:	2802      	cmp	r0, #2
 8000d5a:	f63f af3c 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d5e:	6833      	ldr	r3, [r6, #0]
 8000d60:	019a      	lsls	r2, r3, #6
 8000d62:	d5f6      	bpl.n	8000d52 <HAL_RCC_OscConfig+0x43a>
 8000d64:	e68e      	b.n	8000a84 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d66:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000d68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000d6a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d6c:	f43f ae8b 	beq.w	8000a86 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d70:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d76:	428b      	cmp	r3, r1
 8000d78:	f47f aed7 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d7c:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f47f aed1 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d8a:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8000d8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f47f aeca 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d98:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8000d9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f47f aec3 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000da6:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8000daa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f47f aebc 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000db4:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8000db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	f47f aeb5 	bne.w	8000b2a <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000dc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000dc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000dc4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f43f ae5b 	beq.w	8000a84 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
 8000dd0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8000dd8:	f7ff fd0e 	bl	80007f8 <HAL_GetTick>
 8000ddc:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8000dde:	f7ff fd0b 	bl	80007f8 <HAL_GetTick>
 8000de2:	42a8      	cmp	r0, r5
 8000de4:	d0fb      	beq.n	8000dde <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8000de8:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000dea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_RCC_OscConfig+0x534>)
 8000dee:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8000df0:	4023      	ands	r3, r4
 8000df2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000df6:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8000df8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e5aa      	b.n	8000968 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e12:	4d0c      	ldr	r5, [pc, #48]	; (8000e44 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e14:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e1a:	f023 0301 	bic.w	r3, r3, #1
 8000e1e:	672b      	str	r3, [r5, #112]	; 0x70
 8000e20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e22:	f023 0304 	bic.w	r3, r3, #4
 8000e26:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e28:	f7ff fce6 	bl	80007f8 <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e2e:	e005      	b.n	8000e3c <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e30:	f7ff fce2 	bl	80007f8 <HAL_GetTick>
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	42b8      	cmp	r0, r7
 8000e38:	f63f aecd 	bhi.w	8000bd6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e3e:	0798      	lsls	r0, r3, #30
 8000e40:	d4f6      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x518>
 8000e42:	e602      	b.n	8000a4a <HAL_RCC_OscConfig+0x132>
 8000e44:	58024400 	.word	0x58024400
 8000e48:	fffffc0c 	.word	0xfffffc0c
 8000e4c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_RCC_OscConfig+0x554>)
 8000e52:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5a:	e6ac      	b.n	8000bb6 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5c:	f042 0204 	orr.w	r2, r2, #4
 8000e60:	671a      	str	r2, [r3, #112]	; 0x70
 8000e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e64:	f042 0201 	orr.w	r2, r2, #1
 8000e68:	671a      	str	r2, [r3, #112]	; 0x70
 8000e6a:	e6a4      	b.n	8000bb6 <HAL_RCC_OscConfig+0x29e>
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e70:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x120>)
 8000e72:	6913      	ldr	r3, [r2, #16]
 8000e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d004      	beq.n	8000e86 <HAL_RCC_GetSysClockFreq+0x16>
 8000e7c:	2b18      	cmp	r3, #24
 8000e7e:	d00d      	beq.n	8000e9c <HAL_RCC_GetSysClockFreq+0x2c>
 8000e80:	b11b      	cbz	r3, 8000e8a <HAL_RCC_GetSysClockFreq+0x1a>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8000e82:	4844      	ldr	r0, [pc, #272]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x124>)
 8000e84:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e86:	4844      	ldr	r0, [pc, #272]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x128>)
 8000e88:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	d54a      	bpl.n	8000f26 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	4842      	ldr	r0, [pc, #264]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000e94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000e98:	40d8      	lsrs	r0, r3
 8000e9a:	4770      	bx	lr
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8000e9e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000ea0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000ea2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8000ea4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000ea8:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000eaa:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8000eae:	d038      	beq.n	8000f22 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000eb0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000eb4:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000eb8:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000ebc:	fb05 f101 	mul.w	r1, r5, r1
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	ee07 1a90 	vmov	s15, r1
 8000ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8000eca:	d002      	beq.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x62>
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d02c      	beq.n	8000f2a <HAL_RCC_GetSysClockFreq+0xba>
 8000ed0:	b393      	cbz	r3, 8000f38 <HAL_RCC_GetSysClockFreq+0xc8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ed2:	ee07 0a90 	vmov	s15, r0
 8000ed6:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8000fa0 <HAL_RCC_GetSysClockFreq+0x130>
 8000eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ede:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ee0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8000ee4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8000fa4 <HAL_RCC_GetSysClockFreq+0x134>
 8000ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8000efc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x120>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000f0c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1e:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8000f22:	bc30      	pop	{r4, r5}
 8000f24:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000f26:	481d      	ldr	r0, [pc, #116]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8000f28:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f2a:	ee07 0a90 	vmov	s15, r0
 8000f2e:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8000fa8 <HAL_RCC_GetSysClockFreq+0x138>
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	e7d2      	b.n	8000ede <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	069b      	lsls	r3, r3, #26
 8000f3c:	d520      	bpl.n	8000f80 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000f3e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f40:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000f44:	4915      	ldr	r1, [pc, #84]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f46:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8000f4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000f4c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f54:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8000fa4 <HAL_RCC_GetSysClockFreq+0x134>
 8000f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000f5c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f5e:	ee06 3a90 	vmov	s13, r3
 8000f62:	ee06 1a10 	vmov	s12, r1
 8000f66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000f6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000f6e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8000f72:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000f76:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8000f7a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000f7e:	e7c1      	b.n	8000f04 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f80:	ee07 0a90 	vmov	s15, r0
 8000f84:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8000fac <HAL_RCC_GetSysClockFreq+0x13c>
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	e7a7      	b.n	8000ede <HAL_RCC_GetSysClockFreq+0x6e>
 8000f8e:	bf00      	nop
 8000f90:	58024400 	.word	0x58024400
 8000f94:	003d0900 	.word	0x003d0900
 8000f98:	007a1200 	.word	0x007a1200
 8000f9c:	03d09000 	.word	0x03d09000
 8000fa0:	4a742400 	.word	0x4a742400
 8000fa4:	39000000 	.word	0x39000000
 8000fa8:	4af42400 	.word	0x4af42400
 8000fac:	4c742400 	.word	0x4c742400

08000fb0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f000 810c 	beq.w	80011ce <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb6:	4a8c      	ldr	r2, [pc, #560]	; (80011e8 <HAL_RCC_ClockConfig+0x238>)
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	428b      	cmp	r3, r1
{
 8000fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc8:	d20c      	bcs.n	8000fe4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fca:	6813      	ldr	r3, [r2, #0]
 8000fcc:	f023 030f 	bic.w	r3, r3, #15
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d002      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
}
 8000fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	075f      	lsls	r7, r3, #29
 8000fe8:	d50b      	bpl.n	8001002 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8000fea:	4980      	ldr	r1, [pc, #512]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8000fec:	6920      	ldr	r0, [r4, #16]
 8000fee:	698a      	ldr	r2, [r1, #24]
 8000ff0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000ff4:	4290      	cmp	r0, r2
 8000ff6:	d904      	bls.n	8001002 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000ff8:	698a      	ldr	r2, [r1, #24]
 8000ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ffe:	4302      	orrs	r2, r0
 8001000:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001002:	071e      	lsls	r6, r3, #28
 8001004:	d50b      	bpl.n	800101e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001006:	4979      	ldr	r1, [pc, #484]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8001008:	6960      	ldr	r0, [r4, #20]
 800100a:	69ca      	ldr	r2, [r1, #28]
 800100c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001010:	4290      	cmp	r0, r2
 8001012:	d904      	bls.n	800101e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001014:	69ca      	ldr	r2, [r1, #28]
 8001016:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800101a:	4302      	orrs	r2, r0
 800101c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101e:	06d8      	lsls	r0, r3, #27
 8001020:	d50b      	bpl.n	800103a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001022:	4972      	ldr	r1, [pc, #456]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8001024:	69a0      	ldr	r0, [r4, #24]
 8001026:	69ca      	ldr	r2, [r1, #28]
 8001028:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800102c:	4290      	cmp	r0, r2
 800102e:	d904      	bls.n	800103a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001030:	69ca      	ldr	r2, [r1, #28]
 8001032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001036:	4302      	orrs	r2, r0
 8001038:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800103a:	0699      	lsls	r1, r3, #26
 800103c:	d50b      	bpl.n	8001056 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800103e:	496b      	ldr	r1, [pc, #428]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8001040:	69e0      	ldr	r0, [r4, #28]
 8001042:	6a0a      	ldr	r2, [r1, #32]
 8001044:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001048:	4290      	cmp	r0, r2
 800104a:	d904      	bls.n	8001056 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800104c:	6a0a      	ldr	r2, [r1, #32]
 800104e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001052:	4302      	orrs	r2, r0
 8001054:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001056:	079a      	lsls	r2, r3, #30
 8001058:	f140 80ab 	bpl.w	80011b2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800105c:	4863      	ldr	r0, [pc, #396]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 800105e:	68e1      	ldr	r1, [r4, #12]
 8001060:	6982      	ldr	r2, [r0, #24]
 8001062:	f002 020f 	and.w	r2, r2, #15
 8001066:	4291      	cmp	r1, r2
 8001068:	d904      	bls.n	8001074 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106a:	6982      	ldr	r2, [r0, #24]
 800106c:	f022 020f 	bic.w	r2, r2, #15
 8001070:	430a      	orrs	r2, r1
 8001072:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001074:	07d8      	lsls	r0, r3, #31
 8001076:	d530      	bpl.n	80010da <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001078:	4a5c      	ldr	r2, [pc, #368]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 800107a:	68a1      	ldr	r1, [r4, #8]
 800107c:	6993      	ldr	r3, [r2, #24]
 800107e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001082:	430b      	orrs	r3, r1
 8001084:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001086:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001088:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	2902      	cmp	r1, #2
 800108c:	f000 80a1 	beq.w	80011d2 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001090:	2903      	cmp	r1, #3
 8001092:	f000 8098 	beq.w	80011c6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001096:	2901      	cmp	r1, #1
 8001098:	f000 80a1 	beq.w	80011de <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800109c:	0758      	lsls	r0, r3, #29
 800109e:	d59e      	bpl.n	8000fde <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010a0:	4e52      	ldr	r6, [pc, #328]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	6933      	ldr	r3, [r6, #16]
 80010a8:	f023 0307 	bic.w	r3, r3, #7
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80010b0:	f7ff fba2 	bl	80007f8 <HAL_GetTick>
 80010b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b6:	e005      	b.n	80010c4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fb9e 	bl	80007f8 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	4540      	cmp	r0, r8
 80010c0:	f200 808b 	bhi.w	80011da <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c4:	6933      	ldr	r3, [r6, #16]
 80010c6:	6862      	ldr	r2, [r4, #4]
 80010c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010cc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80010d0:	d1f2      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	0799      	lsls	r1, r3, #30
 80010d6:	d506      	bpl.n	80010e6 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80010d8:	68e1      	ldr	r1, [r4, #12]
 80010da:	4844      	ldr	r0, [pc, #272]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 80010dc:	6982      	ldr	r2, [r0, #24]
 80010de:	f002 020f 	and.w	r2, r2, #15
 80010e2:	428a      	cmp	r2, r1
 80010e4:	d869      	bhi.n	80011ba <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e6:	4940      	ldr	r1, [pc, #256]	; (80011e8 <HAL_RCC_ClockConfig+0x238>)
 80010e8:	680a      	ldr	r2, [r1, #0]
 80010ea:	f002 020f 	and.w	r2, r2, #15
 80010ee:	42aa      	cmp	r2, r5
 80010f0:	d90a      	bls.n	8001108 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	680a      	ldr	r2, [r1, #0]
 80010f4:	f022 020f 	bic.w	r2, r2, #15
 80010f8:	432a      	orrs	r2, r5
 80010fa:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fc:	680a      	ldr	r2, [r1, #0]
 80010fe:	f002 020f 	and.w	r2, r2, #15
 8001102:	42aa      	cmp	r2, r5
 8001104:	f47f af6b 	bne.w	8000fde <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	d50b      	bpl.n	8001124 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800110c:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 800110e:	6920      	ldr	r0, [r4, #16]
 8001110:	698a      	ldr	r2, [r1, #24]
 8001112:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001116:	4290      	cmp	r0, r2
 8001118:	d204      	bcs.n	8001124 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800111a:	698a      	ldr	r2, [r1, #24]
 800111c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001120:	4302      	orrs	r2, r0
 8001122:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	071f      	lsls	r7, r3, #28
 8001126:	d50b      	bpl.n	8001140 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001128:	4930      	ldr	r1, [pc, #192]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 800112a:	6960      	ldr	r0, [r4, #20]
 800112c:	69ca      	ldr	r2, [r1, #28]
 800112e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001132:	4290      	cmp	r0, r2
 8001134:	d204      	bcs.n	8001140 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001136:	69ca      	ldr	r2, [r1, #28]
 8001138:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800113c:	4302      	orrs	r2, r0
 800113e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	06de      	lsls	r6, r3, #27
 8001142:	d50b      	bpl.n	800115c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001144:	4929      	ldr	r1, [pc, #164]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8001146:	69a0      	ldr	r0, [r4, #24]
 8001148:	69ca      	ldr	r2, [r1, #28]
 800114a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800114e:	4290      	cmp	r0, r2
 8001150:	d204      	bcs.n	800115c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001152:	69ca      	ldr	r2, [r1, #28]
 8001154:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001158:	4302      	orrs	r2, r0
 800115a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800115c:	069d      	lsls	r5, r3, #26
 800115e:	d50b      	bpl.n	8001178 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001160:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 8001162:	69e1      	ldr	r1, [r4, #28]
 8001164:	6a13      	ldr	r3, [r2, #32]
 8001166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800116a:	4299      	cmp	r1, r3
 800116c:	d204      	bcs.n	8001178 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800116e:	6a13      	ldr	r3, [r2, #32]
 8001170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001174:	430b      	orrs	r3, r1
 8001176:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001178:	f7ff fe7a 	bl	8000e70 <HAL_RCC_GetSysClockFreq>
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_RCC_ClockConfig+0x23c>)
 800117e:	4603      	mov	r3, r0
 8001180:	481b      	ldr	r0, [pc, #108]	; (80011f0 <HAL_RCC_ClockConfig+0x240>)
 8001182:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001184:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001186:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800118a:	4d1a      	ldr	r5, [pc, #104]	; (80011f4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800118c:	f002 020f 	and.w	r2, r2, #15
 8001190:	4c19      	ldr	r4, [pc, #100]	; (80011f8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001192:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001194:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001196:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800119a:	4818      	ldr	r0, [pc, #96]	; (80011fc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80011a2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80011a4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a6:	40d3      	lsrs	r3, r2
 80011a8:	6023      	str	r3, [r4, #0]
}
 80011aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80011ae:	f7ff bac1 	b.w	8000734 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b2:	07da      	lsls	r2, r3, #31
 80011b4:	f53f af60 	bmi.w	8001078 <HAL_RCC_ClockConfig+0xc8>
 80011b8:	e795      	b.n	80010e6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ba:	6982      	ldr	r2, [r0, #24]
 80011bc:	f022 020f 	bic.w	r2, r2, #15
 80011c0:	430a      	orrs	r2, r1
 80011c2:	6182      	str	r2, [r0, #24]
 80011c4:	e78f      	b.n	80010e6 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80011c6:	019f      	lsls	r7, r3, #6
 80011c8:	f53f af6a 	bmi.w	80010a0 <HAL_RCC_ClockConfig+0xf0>
 80011cc:	e707      	b.n	8000fde <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d2:	039b      	lsls	r3, r3, #14
 80011d4:	f53f af64 	bmi.w	80010a0 <HAL_RCC_ClockConfig+0xf0>
 80011d8:	e701      	b.n	8000fde <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80011da:	2003      	movs	r0, #3
 80011dc:	e700      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011de:	05de      	lsls	r6, r3, #23
 80011e0:	f53f af5e 	bmi.w	80010a0 <HAL_RCC_ClockConfig+0xf0>
 80011e4:	e6fb      	b.n	8000fde <HAL_RCC_ClockConfig+0x2e>
 80011e6:	bf00      	nop
 80011e8:	52002000 	.word	0x52002000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	08005bb0 	.word	0x08005bb0
 80011f4:	24000000 	.word	0x24000000
 80011f8:	24000004 	.word	0x24000004
 80011fc:	2400000c 	.word	0x2400000c

08001200 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8001200:	b530      	push	{r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001202:	4c15      	ldr	r4, [pc, #84]	; (8001258 <MX_X_CUBE_AI_Init+0x58>)
{
 8001204:	b083      	sub	sp, #12
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <MX_X_CUBE_AI_Init+0x5c>)
 8001208:	f002 fe0c 	bl	8003e24 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800120c:	4914      	ldr	r1, [pc, #80]	; (8001260 <MX_X_CUBE_AI_Init+0x60>)
 800120e:	2200      	movs	r2, #0
 8001210:	4620      	mov	r0, r4
 8001212:	f000 f94b 	bl	80014ac <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001216:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 800121a:	d115      	bne.n	8001248 <MX_X_CUBE_AI_Init+0x48>
  ai_input = ai_network_inputs_get(network, NULL);
 800121c:	6820      	ldr	r0, [r4, #0]
 800121e:	4d11      	ldr	r5, [pc, #68]	; (8001264 <MX_X_CUBE_AI_Init+0x64>)
 8001220:	9101      	str	r1, [sp, #4]
 8001222:	f000 f82d 	bl	8001280 <ai_network_inputs_get>
 8001226:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network, NULL);
 8001228:	9901      	ldr	r1, [sp, #4]
 800122a:	6820      	ldr	r0, [r4, #0]
  ai_input = ai_network_inputs_get(network, NULL);
 800122c:	602b      	str	r3, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800122e:	f000 f835 	bl	800129c <ai_network_outputs_get>
 8001232:	4c0d      	ldr	r4, [pc, #52]	; (8001268 <MX_X_CUBE_AI_Init+0x68>)
	data_ins[idx] = ai_input[idx].data;
 8001234:	682a      	ldr	r2, [r5, #0]
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_X_CUBE_AI_Init+0x6c>)
 8001238:	6852      	ldr	r2, [r2, #4]
	data_outs[idx] = ai_output[idx].data;
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <MX_X_CUBE_AI_Init+0x70>)
  ai_output = ai_network_outputs_get(network, NULL);
 800123c:	6020      	str	r0, [r4, #0]
	data_outs[idx] = ai_output[idx].data;
 800123e:	6840      	ldr	r0, [r0, #4]
	data_ins[idx] = ai_input[idx].data;
 8001240:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8001242:	6008      	str	r0, [r1, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8001244:	b003      	add	sp, #12
 8001246:	bd30      	pop	{r4, r5, pc}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001248:	0a03      	lsrs	r3, r0, #8
 800124a:	460a      	mov	r2, r1
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_X_CUBE_AI_Init+0x74>)
 800124e:	490a      	ldr	r1, [pc, #40]	; (8001278 <MX_X_CUBE_AI_Init+0x78>)
 8001250:	f002 fd82 	bl	8003d58 <iprintf>
  do {} while (1);
 8001254:	e7fe      	b.n	8001254 <MX_X_CUBE_AI_Init+0x54>
 8001256:	bf00      	nop
 8001258:	240010fc 	.word	0x240010fc
 800125c:	08005bc0 	.word	0x08005bc0
 8001260:	24000010 	.word	0x24000010
 8001264:	240010ec 	.word	0x240010ec
 8001268:	240010f0 	.word	0x240010f0
 800126c:	240010f4 	.word	0x240010f4
 8001270:	240010f8 	.word	0x240010f8
 8001274:	08005bfc 	.word	0x08005bfc
 8001278:	08005be0 	.word	0x08005be0

0800127c <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800127c:	f000 baa4 	b.w	80017c8 <ai_platform_network_get_error>

08001280 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001280:	b108      	cbz	r0, 8001286 <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001282:	f000 bab3 	b.w	80017ec <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <ai_network_inputs_get+0x14>)
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800128a:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800128c:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 800128e:	f000 baad 	b.w	80017ec <ai_platform_inputs_get>
 8001292:	bf00      	nop
 8001294:	24000544 	.word	0x24000544
 8001298:	a1c00100 	.word	0xa1c00100

0800129c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800129c:	b108      	cbz	r0, 80012a2 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 800129e:	f000 bb1d 	b.w	80018dc <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <ai_network_outputs_get+0x14>)
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80012a6:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80012a8:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 80012aa:	f000 bb17 	b.w	80018dc <ai_platform_outputs_get>
 80012ae:	bf00      	nop
 80012b0:	24000544 	.word	0x24000544
 80012b4:	a1c00100 	.word	0xa1c00100

080012b8 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80012b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012bc:	4606      	mov	r6, r0
 80012be:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80012c0:	f000 fbc4 	bl	8001a4c <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80012c4:	4604      	mov	r4, r0
 80012c6:	2800      	cmp	r0, #0
 80012c8:	f000 80af 	beq.w	800142a <ai_network_init+0x172>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80012cc:	4f5e      	ldr	r7, [pc, #376]	; (8001448 <ai_network_init+0x190>)
 80012ce:	462a      	mov	r2, r5
 80012d0:	2101      	movs	r1, #1
 80012d2:	4638      	mov	r0, r7
 80012d4:	f000 f9ae 	bl	8001634 <ai_platform_get_weights_map>
 80012d8:	4681      	mov	r9, r0
 80012da:	2800      	cmp	r0, #0
 80012dc:	f000 80a7 	beq.w	800142e <ai_network_init+0x176>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012e0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8001490 <ai_network_init+0x1d8>
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012e4:	4959      	ldr	r1, [pc, #356]	; (800144c <ai_network_init+0x194>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012e6:	f8da 2000 	ldr.w	r2, [sl]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80012ea:	683b      	ldr	r3, [r7, #0]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012ec:	f042 4b80 	orr.w	fp, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012f0:	680a      	ldr	r2, [r1, #0]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80012f2:	4f57      	ldr	r7, [pc, #348]	; (8001450 <ai_network_init+0x198>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012f4:	f8ca b000 	str.w	fp, [sl]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80012f8:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001494 <ai_network_init+0x1dc>
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80012fc:	f8df e198 	ldr.w	lr, [pc, #408]	; 8001498 <ai_network_init+0x1e0>
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001300:	4854      	ldr	r0, [pc, #336]	; (8001454 <ai_network_init+0x19c>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001302:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800149c <ai_network_init+0x1e4>
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001306:	f8df b198 	ldr.w	fp, [pc, #408]	; 80014a0 <ai_network_init+0x1e8>
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800130a:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800130e:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001312:	4a51      	ldr	r2, [pc, #324]	; (8001458 <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001314:	449b      	add	fp, r3
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001316:	6812      	ldr	r2, [r2, #0]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001318:	f8c1 a000 	str.w	sl, [r1]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800131c:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001322:	f8c8 b008 	str.w	fp, [r8, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001326:	f8c2 a000 	str.w	sl, [r2]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001330:	f8dc 2000 	ldr.w	r2, [ip]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8001334:	f8c7 a000 	str.w	sl, [r7]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001338:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800133c:	f8de 2000 	ldr.w	r2, [lr]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001340:	f8cc a000 	str.w	sl, [ip]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8001344:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001348:	6802      	ldr	r2, [r0, #0]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800134a:	f8ce a000 	str.w	sl, [lr]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800134e:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001352:	f8d8 2000 	ldr.w	r2, [r8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001356:	f8c0 a000 	str.w	sl, [r0]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800135a:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2048);
 800135e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8001362:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8001366:	f503 6120 	add.w	r1, r3, #2560	; 0xa00
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <ai_network_init+0x1a0>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800136c:	f8c8 a000 	str.w	sl, [r8]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001370:	f8df a130 	ldr.w	sl, [pc, #304]	; 80014a4 <ai_network_init+0x1ec>
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8001374:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 8001378:	f503 3285 	add.w	r2, r3, #68096	; 0x10a00
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 800137c:	449a      	add	sl, r3
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 800137e:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 68608);
 8001382:	f503 3286 	add.w	r2, r3, #68608	; 0x10c00
 8001386:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 134144);
 800138a:	f503 3203 	add.w	r2, r3, #134144	; 0x20c00
 800138e:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <ai_network_init+0x1a4>)
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001394:	e9c0 aa02 	strd	sl, sl, [r0, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001398:	441a      	add	r2, r3
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800139a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80014a8 <ai_network_init+0x1f0>
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 800139e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 80013a2:	f8c8 b00c 	str.w	fp, [r8, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80013a6:	482e      	ldr	r0, [pc, #184]	; (8001460 <ai_network_init+0x1a8>)
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 80013a8:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80013ac:	f8da 3000 	ldr.w	r3, [sl]
 80013b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013b4:	f8ca 3000 	str.w	r3, [sl]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 80013be:	e9c0 2202 	strd	r2, r2, [r0, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80013c2:	6003      	str	r3, [r0, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80013c4:	4f27      	ldr	r7, [pc, #156]	; (8001464 <ai_network_init+0x1ac>)
 80013c6:	462a      	mov	r2, r5
 80013c8:	2101      	movs	r1, #1
 80013ca:	4638      	mov	r0, r7
 80013cc:	f000 f98a 	bl	80016e4 <ai_platform_get_activations_map>
 80013d0:	4605      	mov	r5, r0
 80013d2:	b390      	cbz	r0, 800143a <ai_network_init+0x182>
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4924      	ldr	r1, [pc, #144]	; (8001468 <ai_network_init+0x1b0>)
 80013d8:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 80013e0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013e4:	4921      	ldr	r1, [pc, #132]	; (800146c <ai_network_init+0x1b4>)
 80013e6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013ea:	4921      	ldr	r1, [pc, #132]	; (8001470 <ai_network_init+0x1b8>)
 80013ec:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <ai_network_init+0x1bc>)
 80013f2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013f6:	4920      	ldr	r1, [pc, #128]	; (8001478 <ai_network_init+0x1c0>)
 80013f8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013fc:	491f      	ldr	r1, [pc, #124]	; (800147c <ai_network_init+0x1c4>)
 80013fe:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001402:	491f      	ldr	r1, [pc, #124]	; (8001480 <ai_network_init+0x1c8>)
 8001404:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001408:	491e      	ldr	r1, [pc, #120]	; (8001484 <ai_network_init+0x1cc>)
 800140a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800140e:	491e      	ldr	r1, [pc, #120]	; (8001488 <ai_network_init+0x1d0>)
 8001410:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <ai_network_init+0x1d4>)
 8001416:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800141a:	4630      	mov	r0, r6
 800141c:	f000 fbd6 	bl	8001bcc <ai_platform_network_post_init>
 8001420:	4028      	ands	r0, r5
 8001422:	ea09 0900 	and.w	r9, r9, r0
 8001426:	fa5f f089 	uxtb.w	r0, r9

  return ok;
}
 800142a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800142e:	2212      	movs	r2, #18
 8001430:	2130      	movs	r1, #48	; 0x30
 8001432:	4620      	mov	r0, r4
 8001434:	f000 f9d4 	bl	80017e0 <ai_platform_network_set_error>
  return false;
 8001438:	e7c4      	b.n	80013c4 <ai_network_init+0x10c>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800143a:	2213      	movs	r2, #19
 800143c:	4620      	mov	r0, r4
 800143e:	2130      	movs	r1, #48	; 0x30
 8001440:	f000 f9ce 	bl	80017e0 <ai_platform_network_set_error>
  return false;
 8001444:	e7e9      	b.n	800141a <ai_network_init+0x162>
 8001446:	bf00      	nop
 8001448:	240015a0 	.word	0x240015a0
 800144c:	240005b0 	.word	0x240005b0
 8001450:	24000658 	.word	0x24000658
 8001454:	24000820 	.word	0x24000820
 8001458:	240006d0 	.word	0x240006d0
 800145c:	00031200 	.word	0x00031200
 8001460:	24000850 	.word	0x24000850
 8001464:	2400159c 	.word	0x2400159c
 8001468:	24000a38 	.word	0x24000a38
 800146c:	240005f8 	.word	0x240005f8
 8001470:	24000918 	.word	0x24000918
 8001474:	240006a0 	.word	0x240006a0
 8001478:	24000968 	.word	0x24000968
 800147c:	24000748 	.word	0x24000748
 8001480:	240009b8 	.word	0x240009b8
 8001484:	240007f0 	.word	0x240007f0
 8001488:	24000a08 	.word	0x24000a08
 800148c:	24000898 	.word	0x24000898
 8001490:	24000628 	.word	0x24000628
 8001494:	24000778 	.word	0x24000778
 8001498:	24000700 	.word	0x24000700
 800149c:	240007a8 	.word	0x240007a8
 80014a0:	00030e00 	.word	0x00030e00
 80014a4:	00020e00 	.word	0x00020e00
 80014a8:	240008c8 	.word	0x240008c8

080014ac <ai_network_create_and_init>:
{
 80014ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 80014b0:	2300      	movs	r3, #0
{
 80014b2:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 80014b4:	2405      	movs	r4, #5
{
 80014b6:	4689      	mov	r9, r1
  return ai_platform_network_create(
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	4619      	mov	r1, r3
{
 80014bc:	4616      	mov	r6, r2
  return ai_platform_network_create(
 80014be:	2301      	movs	r3, #1
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <ai_network_create_and_init+0xb0>)
{
 80014c2:	4607      	mov	r7, r0
  return ai_platform_network_create(
 80014c4:	9400      	str	r4, [sp, #0]
 80014c6:	f000 fa7f 	bl	80019c8 <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 80014ca:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 80014ce:	4605      	mov	r5, r0
 80014d0:	d003      	beq.n	80014da <ai_network_create_and_init+0x2e>
}
 80014d2:	4628      	mov	r0, r5
 80014d4:	b011      	add	sp, #68	; 0x44
 80014d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 80014da:	a802      	add	r0, sp, #8
 80014dc:	f000 f842 	bl	8001564 <ai_network_data_params_get>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d035      	beq.n	8001550 <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80014e4:	f1b9 0f00 	cmp.w	r9, #0
 80014e8:	d00f      	beq.n	800150a <ai_network_create_and_init+0x5e>
 80014ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80014ee:	b163      	cbz	r3, 800150a <ai_network_create_and_init+0x5e>
 80014f0:	4644      	mov	r4, r8
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80014f2:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80014f4:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80014f6:	a805      	add	r0, sp, #20
 80014f8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80014fc:	f000 f88a 	bl	8001614 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001500:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001504:	b2a3      	uxth	r3, r4
 8001506:	429a      	cmp	r2, r3
 8001508:	d8f3      	bhi.n	80014f2 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800150a:	b17e      	cbz	r6, 800152c <ai_network_create_and_init+0x80>
 800150c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001510:	b163      	cbz	r3, 800152c <ai_network_create_and_init+0x80>
 8001512:	2400      	movs	r4, #0
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001514:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001516:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001518:	a803      	add	r0, sp, #12
 800151a:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 800151e:	f000 f879 	bl	8001614 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001522:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8001526:	b2a3      	uxth	r3, r4
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f3      	bhi.n	8001514 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 800152c:	a902      	add	r1, sp, #8
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f7ff fec2 	bl	80012b8 <ai_network_init>
 8001534:	b128      	cbz	r0, 8001542 <ai_network_create_and_init+0x96>
  return err;
 8001536:	f368 0507 	bfi	r5, r8, #0, #8
}
 800153a:	4628      	mov	r0, r5
 800153c:	b011      	add	sp, #68	; 0x44
 800153e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 f940 	bl	80017c8 <ai_platform_network_get_error>
 8001548:	4605      	mov	r5, r0
 800154a:	fa5f f880 	uxtb.w	r8, r0
 800154e:	e7f2      	b.n	8001536 <ai_network_create_and_init+0x8a>
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f000 f939 	bl	80017c8 <ai_platform_network_get_error>
 8001556:	4605      	mov	r5, r0
    return err;
 8001558:	e7bb      	b.n	80014d2 <ai_network_create_and_init+0x26>
 800155a:	bf00      	nop
 800155c:	24000544 	.word	0x24000544

08001560 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8001560:	f000 bb64 	b.w	8001c2c <ai_platform_network_process>

08001564 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8001564:	4603      	mov	r3, r0
 8001566:	b1a0      	cbz	r0, 8001592 <ai_network_data_params_get+0x2e>
{
 8001568:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 800156a:	4c0a      	ldr	r4, [pc, #40]	; (8001594 <ai_network_data_params_get+0x30>)
{
 800156c:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001574:	3408      	adds	r4, #8
 8001576:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 800157a:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800157e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001582:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001586:	4661      	mov	r1, ip
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f903 	bl	8001794 <ai_platform_bind_network_params>
}
 800158e:	b004      	add	sp, #16
 8001590:	bd10      	pop	{r4, pc}
 8001592:	4770      	bx	lr
 8001594:	08005ba0 	.word	0x08005ba0

08001598 <ai_buffer_get_size>:
 8001598:	b368      	cbz	r0, 80015f6 <ai_buffer_get_size+0x5e>
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <ai_buffer_get_size+0x60>)
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <ai_buffer_get_size+0x64>)
 800159e:	b410      	push	{r4}
 80015a0:	6804      	ldr	r4, [r0, #0]
 80015a2:	4023      	ands	r3, r4
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d123      	bne.n	80015f0 <ai_buffer_get_size+0x58>
 80015a8:	b311      	cbz	r1, 80015f0 <ai_buffer_get_size+0x58>
 80015aa:	6984      	ldr	r4, [r0, #24]
 80015ac:	6862      	ldr	r2, [r4, #4]
 80015ae:	321f      	adds	r2, #31
 80015b0:	f022 021f 	bic.w	r2, r2, #31
 80015b4:	7d03      	ldrb	r3, [r0, #20]
 80015b6:	6941      	ldr	r1, [r0, #20]
 80015b8:	f1a3 0301 	sub.w	r3, r3, #1
 80015bc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80015ca:	da0c      	bge.n	80015e6 <ai_buffer_get_size+0x4e>
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d103      	bne.n	80015d8 <ai_buffer_get_size+0x40>
 80015d0:	2802      	cmp	r0, #2
 80015d2:	f04f 0302 	mov.w	r3, #2
 80015d6:	d006      	beq.n	80015e6 <ai_buffer_get_size+0x4e>
 80015d8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80015dc:	3301      	adds	r3, #1
 80015de:	4298      	cmp	r0, r3
 80015e0:	fb01 f202 	mul.w	r2, r1, r2
 80015e4:	d1f2      	bne.n	80015cc <ai_buffer_get_size+0x34>
 80015e6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80015ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	6984      	ldr	r4, [r0, #24]
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	e7de      	b.n	80015b4 <ai_buffer_get_size+0x1c>
 80015f6:	4770      	bx	lr
 80015f8:	017fffff 	.word	0x017fffff
 80015fc:	000400c0 	.word	0x000400c0

08001600 <ai_buffer_array_sane>:
 8001600:	b138      	cbz	r0, 8001612 <ai_buffer_array_sane+0x12>
 8001602:	6843      	ldr	r3, [r0, #4]
 8001604:	b123      	cbz	r3, 8001610 <ai_buffer_array_sane+0x10>
 8001606:	8840      	ldrh	r0, [r0, #2]
 8001608:	3800      	subs	r0, #0
 800160a:	bf18      	it	ne
 800160c:	2001      	movne	r0, #1
 800160e:	4770      	bx	lr
 8001610:	4618      	mov	r0, r3
 8001612:	4770      	bx	lr

08001614 <ai_buffer_array_item_set_address>:
 8001614:	b150      	cbz	r0, 800162c <ai_buffer_array_item_set_address+0x18>
 8001616:	6843      	ldr	r3, [r0, #4]
 8001618:	b14b      	cbz	r3, 800162e <ai_buffer_array_item_set_address+0x1a>
 800161a:	8840      	ldrh	r0, [r0, #2]
 800161c:	b900      	cbnz	r0, 8001620 <ai_buffer_array_item_set_address+0xc>
 800161e:	4770      	bx	lr
 8001620:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001624:	2001      	movs	r0, #1
 8001626:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	4770      	bx	lr
 800162e:	4618      	mov	r0, r3
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <ai_platform_get_weights_map>:
 8001634:	2900      	cmp	r1, #0
 8001636:	bf18      	it	ne
 8001638:	2800      	cmpne	r0, #0
 800163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163c:	bf0c      	ite	eq
 800163e:	2401      	moveq	r4, #1
 8001640:	2400      	movne	r4, #0
 8001642:	2a00      	cmp	r2, #0
 8001644:	bf08      	it	eq
 8001646:	f044 0401 	orreq.w	r4, r4, #1
 800164a:	b114      	cbz	r4, 8001652 <ai_platform_get_weights_map+0x1e>
 800164c:	2400      	movs	r4, #0
 800164e:	4620      	mov	r0, r4
 8001650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001652:	4616      	mov	r6, r2
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <ai_platform_get_weights_map+0xac>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4605      	mov	r5, r0
 800165a:	460f      	mov	r7, r1
 800165c:	429a      	cmp	r2, r3
 800165e:	d022      	beq.n	80016a6 <ai_platform_get_weights_map+0x72>
 8001660:	6870      	ldr	r0, [r6, #4]
 8001662:	2800      	cmp	r0, #0
 8001664:	d0f2      	beq.n	800164c <ai_platform_get_weights_map+0x18>
 8001666:	6806      	ldr	r6, [r0, #0]
 8001668:	429e      	cmp	r6, r3
 800166a:	d006      	beq.n	800167a <ai_platform_get_weights_map+0x46>
 800166c:	f1a1 0401 	sub.w	r4, r1, #1
 8001670:	6028      	str	r0, [r5, #0]
 8001672:	fab4 f484 	clz	r4, r4
 8001676:	0964      	lsrs	r4, r4, #5
 8001678:	e7e9      	b.n	800164e <ai_platform_get_weights_map+0x1a>
 800167a:	3d04      	subs	r5, #4
 800167c:	4602      	mov	r2, r0
 800167e:	4621      	mov	r1, r4
 8001680:	e000      	b.n	8001684 <ai_platform_get_weights_map+0x50>
 8001682:	4619      	mov	r1, r3
 8001684:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001688:	42b3      	cmp	r3, r6
 800168a:	d025      	beq.n	80016d8 <ai_platform_get_weights_map+0xa4>
 800168c:	f845 3f04 	str.w	r3, [r5, #4]!
 8001690:	1c4b      	adds	r3, r1, #1
 8001692:	429f      	cmp	r7, r3
 8001694:	d8f5      	bhi.n	8001682 <ai_platform_get_weights_map+0x4e>
 8001696:	d1da      	bne.n	800164e <ai_platform_get_weights_map+0x1a>
 8001698:	3102      	adds	r1, #2
 800169a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800169e:	42b3      	cmp	r3, r6
 80016a0:	d1d5      	bne.n	800164e <ai_platform_get_weights_map+0x1a>
 80016a2:	2401      	movs	r4, #1
 80016a4:	e7d3      	b.n	800164e <ai_platform_get_weights_map+0x1a>
 80016a6:	1d30      	adds	r0, r6, #4
 80016a8:	f7ff ffaa 	bl	8001600 <ai_buffer_array_sane>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d0cd      	beq.n	800164c <ai_platform_get_weights_map+0x18>
 80016b0:	88f3      	ldrh	r3, [r6, #6]
 80016b2:	429f      	cmp	r7, r3
 80016b4:	d1ca      	bne.n	800164c <ai_platform_get_weights_map+0x18>
 80016b6:	3d04      	subs	r5, #4
 80016b8:	4622      	mov	r2, r4
 80016ba:	68b3      	ldr	r3, [r6, #8]
 80016bc:	4423      	add	r3, r4
 80016be:	341c      	adds	r4, #28
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	b123      	cbz	r3, 80016ce <ai_platform_get_weights_map+0x9a>
 80016c4:	3201      	adds	r2, #1
 80016c6:	f845 3f04 	str.w	r3, [r5, #4]!
 80016ca:	4297      	cmp	r7, r2
 80016cc:	d8f5      	bhi.n	80016ba <ai_platform_get_weights_map+0x86>
 80016ce:	1abc      	subs	r4, r7, r2
 80016d0:	fab4 f484 	clz	r4, r4
 80016d4:	0964      	lsrs	r4, r4, #5
 80016d6:	e7ba      	b.n	800164e <ai_platform_get_weights_map+0x1a>
 80016d8:	428f      	cmp	r7, r1
 80016da:	d1b8      	bne.n	800164e <ai_platform_get_weights_map+0x1a>
 80016dc:	e7e1      	b.n	80016a2 <ai_platform_get_weights_map+0x6e>
 80016de:	bf00      	nop
 80016e0:	a1facade 	.word	0xa1facade

080016e4 <ai_platform_get_activations_map>:
 80016e4:	2900      	cmp	r1, #0
 80016e6:	bf18      	it	ne
 80016e8:	2800      	cmpne	r0, #0
 80016ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ec:	bf0c      	ite	eq
 80016ee:	2401      	moveq	r4, #1
 80016f0:	2400      	movne	r4, #0
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	bf08      	it	eq
 80016f6:	f044 0401 	orreq.w	r4, r4, #1
 80016fa:	b114      	cbz	r4, 8001702 <ai_platform_get_activations_map+0x1e>
 80016fc:	2400      	movs	r4, #0
 80016fe:	4620      	mov	r0, r4
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001702:	4616      	mov	r6, r2
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <ai_platform_get_activations_map+0xac>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	4605      	mov	r5, r0
 800170a:	460f      	mov	r7, r1
 800170c:	429a      	cmp	r2, r3
 800170e:	d022      	beq.n	8001756 <ai_platform_get_activations_map+0x72>
 8001710:	6a30      	ldr	r0, [r6, #32]
 8001712:	2800      	cmp	r0, #0
 8001714:	d0f2      	beq.n	80016fc <ai_platform_get_activations_map+0x18>
 8001716:	6806      	ldr	r6, [r0, #0]
 8001718:	429e      	cmp	r6, r3
 800171a:	d006      	beq.n	800172a <ai_platform_get_activations_map+0x46>
 800171c:	f1a1 0401 	sub.w	r4, r1, #1
 8001720:	6028      	str	r0, [r5, #0]
 8001722:	fab4 f484 	clz	r4, r4
 8001726:	0964      	lsrs	r4, r4, #5
 8001728:	e7e9      	b.n	80016fe <ai_platform_get_activations_map+0x1a>
 800172a:	3d04      	subs	r5, #4
 800172c:	4602      	mov	r2, r0
 800172e:	4621      	mov	r1, r4
 8001730:	e000      	b.n	8001734 <ai_platform_get_activations_map+0x50>
 8001732:	4619      	mov	r1, r3
 8001734:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001738:	42b3      	cmp	r3, r6
 800173a:	d026      	beq.n	800178a <ai_platform_get_activations_map+0xa6>
 800173c:	f845 3f04 	str.w	r3, [r5, #4]!
 8001740:	1c4b      	adds	r3, r1, #1
 8001742:	429f      	cmp	r7, r3
 8001744:	d8f5      	bhi.n	8001732 <ai_platform_get_activations_map+0x4e>
 8001746:	d1da      	bne.n	80016fe <ai_platform_get_activations_map+0x1a>
 8001748:	3102      	adds	r1, #2
 800174a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800174e:	42b3      	cmp	r3, r6
 8001750:	d1d5      	bne.n	80016fe <ai_platform_get_activations_map+0x1a>
 8001752:	2401      	movs	r4, #1
 8001754:	e7d3      	b.n	80016fe <ai_platform_get_activations_map+0x1a>
 8001756:	f106 000c 	add.w	r0, r6, #12
 800175a:	f7ff ff51 	bl	8001600 <ai_buffer_array_sane>
 800175e:	2800      	cmp	r0, #0
 8001760:	d0cc      	beq.n	80016fc <ai_platform_get_activations_map+0x18>
 8001762:	89f3      	ldrh	r3, [r6, #14]
 8001764:	429f      	cmp	r7, r3
 8001766:	d1c9      	bne.n	80016fc <ai_platform_get_activations_map+0x18>
 8001768:	3d04      	subs	r5, #4
 800176a:	4622      	mov	r2, r4
 800176c:	6933      	ldr	r3, [r6, #16]
 800176e:	4423      	add	r3, r4
 8001770:	341c      	adds	r4, #28
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	b123      	cbz	r3, 8001780 <ai_platform_get_activations_map+0x9c>
 8001776:	3201      	adds	r2, #1
 8001778:	f845 3f04 	str.w	r3, [r5, #4]!
 800177c:	4297      	cmp	r7, r2
 800177e:	d8f5      	bhi.n	800176c <ai_platform_get_activations_map+0x88>
 8001780:	1abc      	subs	r4, r7, r2
 8001782:	fab4 f484 	clz	r4, r4
 8001786:	0964      	lsrs	r4, r4, #5
 8001788:	e7b9      	b.n	80016fe <ai_platform_get_activations_map+0x1a>
 800178a:	428f      	cmp	r7, r1
 800178c:	d1b7      	bne.n	80016fe <ai_platform_get_activations_map+0x1a>
 800178e:	e7e0      	b.n	8001752 <ai_platform_get_activations_map+0x6e>
 8001790:	a1facade 	.word	0xa1facade

08001794 <ai_platform_bind_network_params>:
 8001794:	2a00      	cmp	r2, #0
 8001796:	bf18      	it	ne
 8001798:	2900      	cmpne	r1, #0
 800179a:	d010      	beq.n	80017be <ai_platform_bind_network_params+0x2a>
 800179c:	b178      	cbz	r0, 80017be <ai_platform_bind_network_params+0x2a>
 800179e:	4603      	mov	r3, r0
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <ai_platform_bind_network_params+0x30>)
 80017a2:	f103 0c0c 	add.w	ip, r3, #12
 80017a6:	f843 0b04 	str.w	r0, [r3], #4
 80017aa:	c903      	ldmia	r1, {r0, r1}
 80017ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80017b0:	2301      	movs	r3, #1
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80017ba:	4618      	mov	r0, r3
 80017bc:	4770      	bx	lr
 80017be:	2300      	movs	r3, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	4770      	bx	lr
 80017c4:	a1facade 	.word	0xa1facade

080017c8 <ai_platform_network_get_error>:
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <ai_platform_network_get_error+0x14>)
 80017ca:	6802      	ldr	r2, [r0, #0]
 80017cc:	4393      	bics	r3, r2
 80017ce:	d102      	bne.n	80017d6 <ai_platform_network_get_error+0xe>
 80017d0:	300c      	adds	r0, #12
 80017d2:	f000 bc73 	b.w	80020bc <core_get_error>
 80017d6:	f241 0010 	movw	r0, #4112	; 0x1010
 80017da:	4770      	bx	lr
 80017dc:	a1c00100 	.word	0xa1c00100

080017e0 <ai_platform_network_set_error>:
 80017e0:	b110      	cbz	r0, 80017e8 <ai_platform_network_set_error+0x8>
 80017e2:	300c      	adds	r0, #12
 80017e4:	f000 bc70 	b.w	80020c8 <core_set_error>
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <ai_platform_inputs_get>:
 80017ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <ai_platform_inputs_get+0xec>)
 80017f2:	b085      	sub	sp, #20
 80017f4:	6802      	ldr	r2, [r0, #0]
 80017f6:	4393      	bics	r3, r2
 80017f8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80017fc:	d162      	bne.n	80018c4 <ai_platform_inputs_get+0xd8>
 80017fe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d051      	beq.n	80018a8 <ai_platform_inputs_get+0xbc>
 8001804:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8001808:	f1ba 0f00 	cmp.w	sl, #0
 800180c:	d04c      	beq.n	80018a8 <ai_platform_inputs_get+0xbc>
 800180e:	f04f 0900 	mov.w	r9, #0
 8001812:	464d      	mov	r5, r9
 8001814:	e016      	b.n	8001844 <ai_platform_inputs_get+0x58>
 8001816:	9901      	ldr	r1, [sp, #4]
 8001818:	2301      	movs	r3, #1
 800181a:	f848 3001 	str.w	r3, [r8, r1]
 800181e:	69b1      	ldr	r1, [r6, #24]
 8001820:	f04f 0301 	mov.w	r3, #1
 8001824:	684e      	ldr	r6, [r1, #4]
 8001826:	3501      	adds	r5, #1
 8001828:	f109 091c 	add.w	r9, r9, #28
 800182c:	7523      	strb	r3, [r4, #20]
 800182e:	2300      	movs	r3, #0
 8001830:	6961      	ldr	r1, [r4, #20]
 8001832:	6020      	str	r0, [r4, #0]
 8001834:	f36b 211f 	bfi	r1, fp, #8, #24
 8001838:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800183c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8001840:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8001844:	f8ba 3000 	ldrh.w	r3, [sl]
 8001848:	b2ac      	uxth	r4, r5
 800184a:	42ab      	cmp	r3, r5
 800184c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	d93b      	bls.n	80018cc <ai_platform_inputs_get+0xe0>
 8001854:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d037      	beq.n	80018cc <ai_platform_inputs_get+0xe0>
 800185c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001860:	2e00      	cmp	r6, #0
 8001862:	d033      	beq.n	80018cc <ai_platform_inputs_get+0xe0>
 8001864:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001868:	69b2      	ldr	r2, [r6, #24]
 800186a:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800186e:	6810      	ldr	r0, [r2, #0]
 8001870:	68b3      	ldr	r3, [r6, #8]
 8001872:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8001876:	68f2      	ldr	r2, [r6, #12]
 8001878:	444c      	add	r4, r9
 800187a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	f001 fc1a 	bl	80030b8 <ai_array_to_buffer_fmt>
 8001884:	69b1      	ldr	r1, [r6, #24]
 8001886:	9a00      	ldr	r2, [sp, #0]
 8001888:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800188c:	2f00      	cmp	r7, #0
 800188e:	d0c7      	beq.n	8001820 <ai_platform_inputs_get+0x34>
 8001890:	2100      	movs	r1, #0
 8001892:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001896:	6831      	ldr	r1, [r6, #0]
 8001898:	6079      	str	r1, [r7, #4]
 800189a:	b111      	cbz	r1, 80018a2 <ai_platform_inputs_get+0xb6>
 800189c:	8849      	ldrh	r1, [r1, #2]
 800189e:	2900      	cmp	r1, #0
 80018a0:	d1b9      	bne.n	8001816 <ai_platform_inputs_get+0x2a>
 80018a2:	69b1      	ldr	r1, [r6, #24]
 80018a4:	2700      	movs	r7, #0
 80018a6:	e7bb      	b.n	8001820 <ai_platform_inputs_get+0x34>
 80018a8:	9803      	ldr	r0, [sp, #12]
 80018aa:	2400      	movs	r4, #0
 80018ac:	2218      	movs	r2, #24
 80018ae:	2111      	movs	r1, #17
 80018b0:	300c      	adds	r0, #12
 80018b2:	f000 fc09 	bl	80020c8 <core_set_error>
 80018b6:	4620      	mov	r0, r4
 80018b8:	9b02      	ldr	r3, [sp, #8]
 80018ba:	b103      	cbz	r3, 80018be <ai_platform_inputs_get+0xd2>
 80018bc:	801c      	strh	r4, [r3, #0]
 80018be:	b005      	add	sp, #20
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c4:	2000      	movs	r0, #0
 80018c6:	b005      	add	sp, #20
 80018c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d0eb      	beq.n	80018a8 <ai_platform_inputs_get+0xbc>
 80018d0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80018d4:	6858      	ldr	r0, [r3, #4]
 80018d6:	e7ef      	b.n	80018b8 <ai_platform_inputs_get+0xcc>
 80018d8:	a1c00100 	.word	0xa1c00100

080018dc <ai_platform_outputs_get>:
 80018dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <ai_platform_outputs_get+0xe8>)
 80018e2:	b085      	sub	sp, #20
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	4393      	bics	r3, r2
 80018e8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80018ec:	d15f      	bne.n	80019ae <ai_platform_outputs_get+0xd2>
 80018ee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d94e      	bls.n	8001992 <ai_platform_outputs_get+0xb6>
 80018f4:	f04f 0900 	mov.w	r9, #0
 80018f8:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 80018fc:	464d      	mov	r5, r9
 80018fe:	e016      	b.n	800192e <ai_platform_outputs_get+0x52>
 8001900:	9901      	ldr	r1, [sp, #4]
 8001902:	2301      	movs	r3, #1
 8001904:	f848 3001 	str.w	r3, [r8, r1]
 8001908:	69b1      	ldr	r1, [r6, #24]
 800190a:	f04f 0301 	mov.w	r3, #1
 800190e:	684e      	ldr	r6, [r1, #4]
 8001910:	3501      	adds	r5, #1
 8001912:	f109 091c 	add.w	r9, r9, #28
 8001916:	7523      	strb	r3, [r4, #20]
 8001918:	2300      	movs	r3, #0
 800191a:	6961      	ldr	r1, [r4, #20]
 800191c:	6020      	str	r0, [r4, #0]
 800191e:	f36b 211f 	bfi	r1, fp, #8, #24
 8001922:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8001926:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800192a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800192e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8001932:	b2ac      	uxth	r4, r5
 8001934:	42ab      	cmp	r3, r5
 8001936:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	d93b      	bls.n	80019b6 <ai_platform_outputs_get+0xda>
 800193e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d037      	beq.n	80019b6 <ai_platform_outputs_get+0xda>
 8001946:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800194a:	2e00      	cmp	r6, #0
 800194c:	d033      	beq.n	80019b6 <ai_platform_outputs_get+0xda>
 800194e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8001952:	69b2      	ldr	r2, [r6, #24]
 8001954:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8001958:	6810      	ldr	r0, [r2, #0]
 800195a:	68b3      	ldr	r3, [r6, #8]
 800195c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8001960:	68f2      	ldr	r2, [r6, #12]
 8001962:	444c      	add	r4, r9
 8001964:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	f001 fba5 	bl	80030b8 <ai_array_to_buffer_fmt>
 800196e:	69b1      	ldr	r1, [r6, #24]
 8001970:	9a00      	ldr	r2, [sp, #0]
 8001972:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001976:	2f00      	cmp	r7, #0
 8001978:	d0c7      	beq.n	800190a <ai_platform_outputs_get+0x2e>
 800197a:	2100      	movs	r1, #0
 800197c:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001980:	6831      	ldr	r1, [r6, #0]
 8001982:	6079      	str	r1, [r7, #4]
 8001984:	b111      	cbz	r1, 800198c <ai_platform_outputs_get+0xb0>
 8001986:	8849      	ldrh	r1, [r1, #2]
 8001988:	2900      	cmp	r1, #0
 800198a:	d1b9      	bne.n	8001900 <ai_platform_outputs_get+0x24>
 800198c:	69b1      	ldr	r1, [r6, #24]
 800198e:	2700      	movs	r7, #0
 8001990:	e7bb      	b.n	800190a <ai_platform_outputs_get+0x2e>
 8001992:	9803      	ldr	r0, [sp, #12]
 8001994:	2400      	movs	r4, #0
 8001996:	2218      	movs	r2, #24
 8001998:	2111      	movs	r1, #17
 800199a:	300c      	adds	r0, #12
 800199c:	f000 fb94 	bl	80020c8 <core_set_error>
 80019a0:	4620      	mov	r0, r4
 80019a2:	9b02      	ldr	r3, [sp, #8]
 80019a4:	b103      	cbz	r3, 80019a8 <ai_platform_outputs_get+0xcc>
 80019a6:	801c      	strh	r4, [r3, #0]
 80019a8:	b005      	add	sp, #20
 80019aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ae:	2000      	movs	r0, #0
 80019b0:	b005      	add	sp, #20
 80019b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d0eb      	beq.n	8001992 <ai_platform_outputs_get+0xb6>
 80019ba:	f8da 3014 	ldr.w	r3, [sl, #20]
 80019be:	6858      	ldr	r0, [r3, #4]
 80019c0:	e7ef      	b.n	80019a2 <ai_platform_outputs_get+0xc6>
 80019c2:	bf00      	nop
 80019c4:	a1c00100 	.word	0xa1c00100

080019c8 <ai_platform_network_create>:
 80019c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019cc:	b083      	sub	sp, #12
 80019ce:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80019d2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80019d6:	b320      	cbz	r0, 8001a22 <ai_platform_network_create+0x5a>
 80019d8:	6002      	str	r2, [r0, #0]
 80019da:	4616      	mov	r6, r2
 80019dc:	461f      	mov	r7, r3
 80019de:	4604      	mov	r4, r0
 80019e0:	f000 fb6a 	bl	80020b8 <core_init>
 80019e4:	b970      	cbnz	r0, 8001a04 <ai_platform_network_create+0x3c>
 80019e6:	2530      	movs	r5, #48	; 0x30
 80019e8:	2300      	movs	r3, #0
 80019ea:	6023      	str	r3, [r4, #0]
 80019ec:	2410      	movs	r4, #16
 80019ee:	464a      	mov	r2, r9
 80019f0:	4641      	mov	r1, r8
 80019f2:	4638      	mov	r0, r7
 80019f4:	f001 fbe2 	bl	80031bc <ai_version_get>
 80019f8:	60b0      	str	r0, [r6, #8]
 80019fa:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80019fe:	b003      	add	sp, #12
 8001a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a04:	2200      	movs	r2, #0
 8001a06:	4641      	mov	r1, r8
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f001 fbd7 	bl	80031bc <ai_version_get>
 8001a0e:	4605      	mov	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	2105      	movs	r1, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	f001 fbd1 	bl	80031bc <ai_version_get>
 8001a1a:	4285      	cmp	r5, r0
 8001a1c:	d008      	beq.n	8001a30 <ai_platform_network_create+0x68>
 8001a1e:	2501      	movs	r5, #1
 8001a20:	e7e2      	b.n	80019e8 <ai_platform_network_create+0x20>
 8001a22:	2510      	movs	r5, #16
 8001a24:	462c      	mov	r4, r5
 8001a26:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8001a2a:	b003      	add	sp, #12
 8001a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <ai_platform_network_create+0x80>)
 8001a32:	a801      	add	r0, sp, #4
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	f000 fb53 	bl	80020e0 <ai_check_custom_types>
 8001a3a:	b110      	cbz	r0, 8001a42 <ai_platform_network_create+0x7a>
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	4625      	mov	r5, r4
 8001a40:	e7d5      	b.n	80019ee <ai_platform_network_create+0x26>
 8001a42:	2502      	movs	r5, #2
 8001a44:	e7d0      	b.n	80019e8 <ai_platform_network_create+0x20>
 8001a46:	bf00      	nop
 8001a48:	84048403 	.word	0x84048403

08001a4c <ai_platform_network_init>:
 8001a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a50:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <ai_platform_network_init+0x178>)
 8001a52:	460c      	mov	r4, r1
 8001a54:	6801      	ldr	r1, [r0, #0]
 8001a56:	438a      	bics	r2, r1
 8001a58:	d133      	bne.n	8001ac2 <ai_platform_network_init+0x76>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	2c00      	cmp	r4, #0
 8001a5e:	f000 8093 	beq.w	8001b88 <ai_platform_network_init+0x13c>
 8001a62:	f8d4 b000 	ldr.w	fp, [r4]
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <ai_platform_network_init+0x17c>)
 8001a68:	4593      	cmp	fp, r2
 8001a6a:	d10f      	bne.n	8001a8c <ai_platform_network_init+0x40>
 8001a6c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8001a70:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <ai_platform_network_init+0x178>)
 8001a76:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8001a7a:	0c32      	lsrs	r2, r6, #16
 8001a7c:	4299      	cmp	r1, r3
 8001a7e:	d02c      	beq.n	8001ada <ai_platform_network_init+0x8e>
 8001a80:	2303      	movs	r3, #3
 8001a82:	462c      	mov	r4, r5
 8001a84:	612b      	str	r3, [r5, #16]
 8001a86:	4620      	mov	r0, r4
 8001a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a8c:	4627      	mov	r7, r4
 8001a8e:	2101      	movs	r1, #1
 8001a90:	6864      	ldr	r4, [r4, #4]
 8001a92:	4638      	mov	r0, r7
 8001a94:	f107 081c 	add.w	r8, r7, #28
 8001a98:	f7ff fd7e 	bl	8001598 <ai_buffer_get_size>
 8001a9c:	4606      	mov	r6, r0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4640      	mov	r0, r8
 8001aa2:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8001aa6:	f7ff fd77 	bl	8001598 <ai_buffer_get_size>
 8001aaa:	b976      	cbnz	r6, 8001aca <ai_platform_network_init+0x7e>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d150      	bne.n	8001b52 <ai_platform_network_init+0x106>
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4686      	mov	lr, r0
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	4607      	mov	r7, r0
 8001ab8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8001abc:	6829      	ldr	r1, [r5, #0]
 8001abe:	0436      	lsls	r6, r6, #16
 8001ac0:	e7d8      	b.n	8001a74 <ai_platform_network_init+0x28>
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d13b      	bne.n	8001b46 <ai_platform_network_init+0xfa>
 8001ace:	4680      	mov	r8, r0
 8001ad0:	4686      	mov	lr, r0
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	d05e      	beq.n	8001b94 <ai_platform_network_init+0x148>
 8001ad6:	2601      	movs	r6, #1
 8001ad8:	e7ee      	b.n	8001ab8 <ai_platform_network_init+0x6c>
 8001ada:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8001adc:	4293      	cmp	r3, r2
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <ai_platform_network_init+0x17c>)
 8001ae0:	d33e      	bcc.n	8001b60 <ai_platform_network_init+0x114>
 8001ae2:	459b      	cmp	fp, r3
 8001ae4:	d03e      	beq.n	8001b64 <ai_platform_network_init+0x118>
 8001ae6:	b1a2      	cbz	r2, 8001b12 <ai_platform_network_init+0xc6>
 8001ae8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001aec:	f04f 0c00 	mov.w	ip, #0
 8001af0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001af4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001af6:	eb07 0b0c 	add.w	fp, r7, ip
 8001afa:	4464      	add	r4, ip
 8001afc:	f10c 0c1c 	add.w	ip, ip, #28
 8001b00:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8001b04:	45cc      	cmp	ip, r9
 8001b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b08:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8001b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b10:	d1f0      	bne.n	8001af4 <ai_platform_network_init+0xa8>
 8001b12:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001b14:	622e      	str	r6, [r5, #32]
 8001b16:	4553      	cmp	r3, sl
 8001b18:	d34b      	bcc.n	8001bb2 <ai_platform_network_init+0x166>
 8001b1a:	f1ba 0f00 	cmp.w	sl, #0
 8001b1e:	d025      	beq.n	8001b6c <ai_platform_network_init+0x120>
 8001b20:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8001b24:	2700      	movs	r7, #0
 8001b26:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b2a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001b2c:	eb08 0607 	add.w	r6, r8, r7
 8001b30:	443c      	add	r4, r7
 8001b32:	371c      	adds	r7, #28
 8001b34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b36:	4557      	cmp	r7, sl
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b42:	d1f2      	bne.n	8001b2a <ai_platform_network_init+0xde>
 8001b44:	e012      	b.n	8001b6c <ai_platform_network_init+0x120>
 8001b46:	f1b9 0f00 	cmp.w	r9, #0
 8001b4a:	d015      	beq.n	8001b78 <ai_platform_network_init+0x12c>
 8001b4c:	f04f 0e01 	mov.w	lr, #1
 8001b50:	e7bf      	b.n	8001ad2 <ai_platform_network_init+0x86>
 8001b52:	f1b9 0f00 	cmp.w	r9, #0
 8001b56:	d00f      	beq.n	8001b78 <ai_platform_network_init+0x12c>
 8001b58:	f04f 0e01 	mov.w	lr, #1
 8001b5c:	4637      	mov	r7, r6
 8001b5e:	e7ab      	b.n	8001ab8 <ai_platform_network_init+0x6c>
 8001b60:	459b      	cmp	fp, r3
 8001b62:	d11e      	bne.n	8001ba2 <ai_platform_network_init+0x156>
 8001b64:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8001b68:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8001b72:	f000 fadd 	bl	8002130 <ai_layers_init_all>
 8001b76:	e783      	b.n	8001a80 <ai_platform_network_init+0x34>
 8001b78:	2213      	movs	r2, #19
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	f105 000c 	add.w	r0, r5, #12
 8001b80:	2400      	movs	r4, #0
 8001b82:	f000 faa1 	bl	80020c8 <core_set_error>
 8001b86:	e77e      	b.n	8001a86 <ai_platform_network_init+0x3a>
 8001b88:	2211      	movs	r2, #17
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	300c      	adds	r0, #12
 8001b8e:	f000 fa9b 	bl	80020c8 <core_set_error>
 8001b92:	e778      	b.n	8001a86 <ai_platform_network_init+0x3a>
 8001b94:	2212      	movs	r2, #18
 8001b96:	2110      	movs	r1, #16
 8001b98:	f105 000c 	add.w	r0, r5, #12
 8001b9c:	f000 fa94 	bl	80020c8 <core_set_error>
 8001ba0:	e771      	b.n	8001a86 <ai_platform_network_init+0x3a>
 8001ba2:	2212      	movs	r2, #18
 8001ba4:	2116      	movs	r1, #22
 8001ba6:	f105 000c 	add.w	r0, r5, #12
 8001baa:	2400      	movs	r4, #0
 8001bac:	f000 fa8c 	bl	80020c8 <core_set_error>
 8001bb0:	e769      	b.n	8001a86 <ai_platform_network_init+0x3a>
 8001bb2:	2213      	movs	r2, #19
 8001bb4:	2116      	movs	r1, #22
 8001bb6:	f105 000c 	add.w	r0, r5, #12
 8001bba:	2400      	movs	r4, #0
 8001bbc:	f000 fa84 	bl	80020c8 <core_set_error>
 8001bc0:	e761      	b.n	8001a86 <ai_platform_network_init+0x3a>
 8001bc2:	bf00      	nop
 8001bc4:	a1c00100 	.word	0xa1c00100
 8001bc8:	a1facade 	.word	0xa1facade

08001bcc <ai_platform_network_post_init>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <ai_platform_network_post_init+0x5c>)
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	ea02 0103 	and.w	r1, r2, r3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	d108      	bne.n	8001bec <ai_platform_network_post_init+0x20>
 8001bda:	6903      	ldr	r3, [r0, #16]
 8001bdc:	4604      	mov	r4, r0
 8001bde:	f013 0502 	ands.w	r5, r3, #2
 8001be2:	d005      	beq.n	8001bf0 <ai_platform_network_post_init+0x24>
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d00a      	beq.n	8001bfe <ai_platform_network_post_init+0x32>
 8001be8:	2001      	movs	r0, #1
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	2000      	movs	r0, #0
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	2111      	movs	r1, #17
 8001bf4:	300c      	adds	r0, #12
 8001bf6:	f000 fa67 	bl	80020c8 <core_set_error>
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	bd38      	pop	{r3, r4, r5, pc}
 8001bfe:	f000 faa5 	bl	800214c <ai_layers_post_init_all>
 8001c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ef      	beq.n	8001be8 <ai_platform_network_post_init+0x1c>
 8001c08:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c0a:	e008      	b.n	8001c1e <ai_platform_network_post_init+0x52>
 8001c0c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8001c10:	4798      	blx	r3
 8001c12:	692b      	ldr	r3, [r5, #16]
 8001c14:	42ab      	cmp	r3, r5
 8001c16:	461d      	mov	r5, r3
 8001c18:	d0e6      	beq.n	8001be8 <ai_platform_network_post_init+0x1c>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0e4      	beq.n	8001be8 <ai_platform_network_post_init+0x1c>
 8001c1e:	4629      	mov	r1, r5
 8001c20:	2000      	movs	r0, #0
 8001c22:	2d00      	cmp	r5, #0
 8001c24:	d1f2      	bne.n	8001c0c <ai_platform_network_post_init+0x40>
 8001c26:	e7df      	b.n	8001be8 <ai_platform_network_post_init+0x1c>
 8001c28:	a1c00100 	.word	0xa1c00100

08001c2c <ai_platform_network_process>:
 8001c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c30:	b085      	sub	sp, #20
 8001c32:	4bb7      	ldr	r3, [pc, #732]	; (8001f10 <ai_platform_network_process+0x2e4>)
 8001c34:	9202      	str	r2, [sp, #8]
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	4393      	bics	r3, r2
 8001c3a:	f040 8142 	bne.w	8001ec2 <ai_platform_network_process+0x296>
 8001c3e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001c40:	4605      	mov	r5, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8126 	beq.w	8001e94 <ai_platform_network_process+0x268>
 8001c48:	6903      	ldr	r3, [r0, #16]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	6182      	str	r2, [r0, #24]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	f040 8122 	bne.w	8001ea0 <ai_platform_network_process+0x274>
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	f000 8136 	beq.w	8001ece <ai_platform_network_process+0x2a2>
 8001c62:	fab8 f788 	clz	r7, r8
 8001c66:	097f      	lsrs	r7, r7, #5
 8001c68:	f1b8 0f00 	cmp.w	r8, #0
 8001c6c:	f000 812f 	beq.w	8001ece <ai_platform_network_process+0x2a2>
 8001c70:	f8b8 3000 	ldrh.w	r3, [r8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 812a 	beq.w	8001ece <ai_platform_network_process+0x2a2>
 8001c7a:	698b      	ldr	r3, [r1, #24]
 8001c7c:	460e      	mov	r6, r1
 8001c7e:	9003      	str	r0, [sp, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d072      	beq.n	8001d72 <ai_platform_network_process+0x146>
 8001c8c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d06e      	beq.n	8001d72 <ai_platform_network_process+0x146>
 8001c94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001c98:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8001c9c:	f8d3 a000 	ldr.w	sl, [r3]
 8001ca0:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8001ca4:	f000 8112 	beq.w	8001ecc <ai_platform_network_process+0x2a0>
 8001ca8:	69a3      	ldr	r3, [r4, #24]
 8001caa:	2101      	movs	r1, #1
 8001cac:	4630      	mov	r0, r6
 8001cae:	685d      	ldr	r5, [r3, #4]
 8001cb0:	f7ff fc72 	bl	8001598 <ai_buffer_get_size>
 8001cb4:	4285      	cmp	r5, r0
 8001cb6:	f0c0 8115 	bcc.w	8001ee4 <ai_platform_network_process+0x2b8>
 8001cba:	68e0      	ldr	r0, [r4, #12]
 8001cbc:	69b1      	ldr	r1, [r6, #24]
 8001cbe:	68c2      	ldr	r2, [r0, #12]
 8001cc0:	68cb      	ldr	r3, [r1, #12]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	f040 810e 	bne.w	8001ee4 <ai_platform_network_process+0x2b8>
 8001cc8:	6882      	ldr	r2, [r0, #8]
 8001cca:	688b      	ldr	r3, [r1, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8109 	bne.w	8001ee4 <ai_platform_network_process+0x2b8>
 8001cd2:	6842      	ldr	r2, [r0, #4]
 8001cd4:	684b      	ldr	r3, [r1, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	f040 8104 	bne.w	8001ee4 <ai_platform_network_process+0x2b8>
 8001cdc:	69a3      	ldr	r3, [r4, #24]
 8001cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce2:	f001 fa59 	bl	8003198 <ai_array_get_data_byte_size>
 8001ce6:	4605      	mov	r5, r0
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f001 fa6d 	bl	80031c8 <get_tensor_byte_size>
 8001cee:	4285      	cmp	r5, r0
 8001cf0:	f0c0 80f8 	bcc.w	8001ee4 <ai_platform_network_process+0x2b8>
 8001cf4:	69a3      	ldr	r3, [r4, #24]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f001 f9de 	bl	80030b8 <ai_array_to_buffer_fmt>
 8001cfc:	6833      	ldr	r3, [r6, #0]
 8001cfe:	4058      	eors	r0, r3
 8001d00:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8001d04:	f040 81a4 	bne.w	8002050 <ai_platform_network_process+0x424>
 8001d08:	6873      	ldr	r3, [r6, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80de 	beq.w	8001ecc <ai_platform_network_process+0x2a0>
 8001d10:	69b3      	ldr	r3, [r6, #24]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 81a4 	beq.w	8002062 <ai_platform_network_process+0x436>
 8001d1a:	9a01      	ldr	r2, [sp, #4]
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	3701      	adds	r7, #1
 8001d20:	361c      	adds	r6, #28
 8001d22:	429a      	cmp	r2, r3
 8001d24:	bf38      	it	cc
 8001d26:	461a      	movcc	r2, r3
 8001d28:	9201      	str	r2, [sp, #4]
 8001d2a:	f001 fa4d 	bl	80031c8 <get_tensor_byte_size>
 8001d2e:	f8c9 0008 	str.w	r0, [r9, #8]
 8001d32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fb00 f303 	mul.w	r3, r0, r3
 8001d3c:	f8c9 300c 	str.w	r3, [r9, #12]
 8001d40:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8001d44:	440b      	add	r3, r1
 8001d46:	f8c9 1004 	str.w	r1, [r9, #4]
 8001d4a:	f84a 300b 	str.w	r3, [sl, fp]
 8001d4e:	69a0      	ldr	r0, [r4, #24]
 8001d50:	6803      	ldr	r3, [r0, #0]
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	f100 80af 	bmi.w	8001eb6 <ai_platform_network_process+0x28a>
 8001d58:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	4419      	add	r1, r3
 8001d60:	6081      	str	r1, [r0, #8]
 8001d62:	69a3      	ldr	r3, [r4, #24]
 8001d64:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	f8b8 3000 	ldrh.w	r3, [r8]
 8001d6e:	42bb      	cmp	r3, r7
 8001d70:	d888      	bhi.n	8001c84 <ai_platform_network_process+0x58>
 8001d72:	9d03      	ldr	r5, [sp, #12]
 8001d74:	9b02      	ldr	r3, [sp, #8]
 8001d76:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 817b 	beq.w	8002074 <ai_platform_network_process+0x448>
 8001d7e:	2a01      	cmp	r2, #1
 8001d80:	f240 80bd 	bls.w	8001efe <ai_platform_network_process+0x2d2>
 8001d84:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8001d88:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b6 	beq.w	8001efe <ai_platform_network_process+0x2d2>
 8001d92:	2700      	movs	r7, #0
 8001d94:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001d98:	9502      	str	r5, [sp, #8]
 8001d9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80bd 	beq.w	8001f1e <ai_platform_network_process+0x2f2>
 8001da4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8001da8:	2e00      	cmp	r6, #0
 8001daa:	f000 80b8 	beq.w	8001f1e <ai_platform_network_process+0x2f2>
 8001dae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8001db2:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8001dbc:	f000 8170 	beq.w	80020a0 <ai_platform_network_process+0x474>
 8001dc0:	69b3      	ldr	r3, [r6, #24]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4658      	mov	r0, fp
 8001dc6:	685d      	ldr	r5, [r3, #4]
 8001dc8:	f7ff fbe6 	bl	8001598 <ai_buffer_get_size>
 8001dcc:	4285      	cmp	r5, r0
 8001dce:	f0c0 8095 	bcc.w	8001efc <ai_platform_network_process+0x2d0>
 8001dd2:	68f0      	ldr	r0, [r6, #12]
 8001dd4:	f8db 1018 	ldr.w	r1, [fp, #24]
 8001dd8:	68c2      	ldr	r2, [r0, #12]
 8001dda:	68cb      	ldr	r3, [r1, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 808d 	bne.w	8001efc <ai_platform_network_process+0x2d0>
 8001de2:	6882      	ldr	r2, [r0, #8]
 8001de4:	688b      	ldr	r3, [r1, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	f040 8088 	bne.w	8001efc <ai_platform_network_process+0x2d0>
 8001dec:	6842      	ldr	r2, [r0, #4]
 8001dee:	684b      	ldr	r3, [r1, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8083 	bne.w	8001efc <ai_platform_network_process+0x2d0>
 8001df6:	69b3      	ldr	r3, [r6, #24]
 8001df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfc:	f001 f9cc 	bl	8003198 <ai_array_get_data_byte_size>
 8001e00:	9003      	str	r0, [sp, #12]
 8001e02:	4630      	mov	r0, r6
 8001e04:	f001 f9e0 	bl	80031c8 <get_tensor_byte_size>
 8001e08:	9b03      	ldr	r3, [sp, #12]
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	d376      	bcc.n	8001efc <ai_platform_network_process+0x2d0>
 8001e0e:	69b3      	ldr	r3, [r6, #24]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	f001 f951 	bl	80030b8 <ai_array_to_buffer_fmt>
 8001e16:	f8db 3000 	ldr.w	r3, [fp]
 8001e1a:	4058      	eors	r0, r3
 8001e1c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8001e20:	f040 812c 	bne.w	800207c <ai_platform_network_process+0x450>
 8001e24:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8139 	beq.w	80020a0 <ai_platform_network_process+0x474>
 8001e2e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 812a 	beq.w	800208e <ai_platform_network_process+0x462>
 8001e3a:	9a01      	ldr	r2, [sp, #4]
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	3701      	adds	r7, #1
 8001e40:	f10b 0b1c 	add.w	fp, fp, #28
 8001e44:	429a      	cmp	r2, r3
 8001e46:	bf38      	it	cc
 8001e48:	461a      	movcc	r2, r3
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	f001 f9bc 	bl	80031c8 <get_tensor_byte_size>
 8001e50:	f8c8 0008 	str.w	r0, [r8, #8]
 8001e54:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fb00 f303 	mul.w	r3, r0, r3
 8001e5e:	f8c8 300c 	str.w	r3, [r8, #12]
 8001e62:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8001e66:	440b      	add	r3, r1
 8001e68:	f8c8 1004 	str.w	r1, [r8, #4]
 8001e6c:	f844 300a 	str.w	r3, [r4, sl]
 8001e70:	69b0      	ldr	r0, [r6, #24]
 8001e72:	6803      	ldr	r3, [r0, #0]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	d44d      	bmi.n	8001f14 <ai_platform_network_process+0x2e8>
 8001e78:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	4419      	add	r1, r3
 8001e80:	6081      	str	r1, [r0, #8]
 8001e82:	69b3      	ldr	r3, [r6, #24]
 8001e84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001e8e:	42bb      	cmp	r3, r7
 8001e90:	d883      	bhi.n	8001d9a <ai_platform_network_process+0x16e>
 8001e92:	e044      	b.n	8001f1e <ai_platform_network_process+0x2f2>
 8001e94:	6902      	ldr	r2, [r0, #16]
 8001e96:	6183      	str	r3, [r0, #24]
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	2a03      	cmp	r2, #3
 8001e9e:	d016      	beq.n	8001ece <ai_platform_network_process+0x2a2>
 8001ea0:	2230      	movs	r2, #48	; 0x30
 8001ea2:	2111      	movs	r1, #17
 8001ea4:	f105 000c 	add.w	r0, r5, #12
 8001ea8:	2400      	movs	r4, #0
 8001eaa:	f000 f90d 	bl	80020c8 <core_set_error>
 8001eae:	4620      	mov	r0, r4
 8001eb0:	b005      	add	sp, #20
 8001eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb6:	f8b8 3000 	ldrh.w	r3, [r8]
 8001eba:	429f      	cmp	r7, r3
 8001ebc:	f4ff aee2 	bcc.w	8001c84 <ai_platform_network_process+0x58>
 8001ec0:	e757      	b.n	8001d72 <ai_platform_network_process+0x146>
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	b005      	add	sp, #20
 8001ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ecc:	9d03      	ldr	r5, [sp, #12]
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2217      	movs	r2, #23
 8001ed2:	2112      	movs	r1, #18
 8001ed4:	f105 000c 	add.w	r0, r5, #12
 8001ed8:	f000 f8f6 	bl	80020c8 <core_set_error>
 8001edc:	4620      	mov	r0, r4
 8001ede:	b005      	add	sp, #20
 8001ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee4:	9d03      	ldr	r5, [sp, #12]
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	2218      	movs	r2, #24
 8001eea:	2112      	movs	r1, #18
 8001eec:	f105 000c 	add.w	r0, r5, #12
 8001ef0:	f000 f8ea 	bl	80020c8 <core_set_error>
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	b005      	add	sp, #20
 8001ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001efc:	9d02      	ldr	r5, [sp, #8]
 8001efe:	2218      	movs	r2, #24
 8001f00:	2113      	movs	r1, #19
 8001f02:	f105 000c 	add.w	r0, r5, #12
 8001f06:	2400      	movs	r4, #0
 8001f08:	f000 f8de 	bl	80020c8 <core_set_error>
 8001f0c:	e7cf      	b.n	8001eae <ai_platform_network_process+0x282>
 8001f0e:	bf00      	nop
 8001f10:	a1c00100 	.word	0xa1c00100
 8001f14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001f18:	429f      	cmp	r7, r3
 8001f1a:	f4ff af3e 	bcc.w	8001d9a <ai_platform_network_process+0x16e>
 8001f1e:	9d02      	ldr	r5, [sp, #8]
 8001f20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001f24:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8001f26:	832b      	strh	r3, [r5, #24]
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	f040 808b 	bne.w	8002044 <ai_platform_network_process+0x418>
 8001f2e:	4616      	mov	r6, r2
 8001f30:	4617      	mov	r7, r2
 8001f32:	8b6c      	ldrh	r4, [r5, #26]
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d2ba      	bcs.n	8001eae <ai_platform_network_process+0x282>
 8001f38:	46ab      	mov	fp, r5
 8001f3a:	2e00      	cmp	r6, #0
 8001f3c:	d030      	beq.n	8001fa0 <ai_platform_network_process+0x374>
 8001f3e:	f04f 0800 	mov.w	r8, #0
 8001f42:	e014      	b.n	8001f6e <ai_platform_network_process+0x342>
 8001f44:	6882      	ldr	r2, [r0, #8]
 8001f46:	68c5      	ldr	r5, [r0, #12]
 8001f48:	6863      	ldr	r3, [r4, #4]
 8001f4a:	1b52      	subs	r2, r2, r5
 8001f4c:	4413      	add	r3, r2
 8001f4e:	6083      	str	r3, [r0, #8]
 8001f50:	698b      	ldr	r3, [r1, #24]
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	f859 200a 	ldr.w	r2, [r9, sl]
 8001f5a:	f108 0801 	add.w	r8, r8, #1
 8001f5e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8001f62:	440b      	add	r3, r1
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d301      	bcc.n	8001f6c <ai_platform_network_process+0x340>
 8001f68:	68e3      	ldr	r3, [r4, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	6063      	str	r3, [r4, #4]
 8001f6e:	8833      	ldrh	r3, [r6, #0]
 8001f70:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8001f74:	4543      	cmp	r3, r8
 8001f76:	d913      	bls.n	8001fa0 <ai_platform_network_process+0x374>
 8001f78:	6873      	ldr	r3, [r6, #4]
 8001f7a:	b18b      	cbz	r3, 8001fa0 <ai_platform_network_process+0x374>
 8001f7c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8001f80:	b171      	cbz	r1, 8001fa0 <ai_platform_network_process+0x374>
 8001f82:	6988      	ldr	r0, [r1, #24]
 8001f84:	68b2      	ldr	r2, [r6, #8]
 8001f86:	6803      	ldr	r3, [r0, #0]
 8001f88:	f8d2 9000 	ldr.w	r9, [r2]
 8001f8c:	009d      	lsls	r5, r3, #2
 8001f8e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8001f92:	d5d7      	bpl.n	8001f44 <ai_platform_network_process+0x318>
 8001f94:	6881      	ldr	r1, [r0, #8]
 8001f96:	68a2      	ldr	r2, [r4, #8]
 8001f98:	6860      	ldr	r0, [r4, #4]
 8001f9a:	f001 f805 	bl	8002fa8 <st_int8_copy>
 8001f9e:	e7da      	b.n	8001f56 <ai_platform_network_process+0x32a>
 8001fa0:	4658      	mov	r0, fp
 8001fa2:	f000 f8e7 	bl	8002174 <ai_layers_forward_all>
 8001fa6:	2f00      	cmp	r7, #0
 8001fa8:	d03d      	beq.n	8002026 <ai_platform_network_process+0x3fa>
 8001faa:	2400      	movs	r4, #0
 8001fac:	e016      	b.n	8001fdc <ai_platform_network_process+0x3b0>
 8001fae:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8001fb2:	f859 100a 	ldr.w	r1, [r9, sl]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d302      	bcc.n	8001fc2 <ai_platform_network_process+0x396>
 8001fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001fc0:	1acb      	subs	r3, r1, r3
 8001fc2:	f8c8 3004 	str.w	r3, [r8, #4]
 8001fc6:	6981      	ldr	r1, [r0, #24]
 8001fc8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8001fcc:	1b52      	subs	r2, r2, r5
 8001fce:	4413      	add	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
 8001fd2:	6983      	ldr	r3, [r0, #24]
 8001fd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	3401      	adds	r4, #1
 8001fdc:	883b      	ldrh	r3, [r7, #0]
 8001fde:	42a3      	cmp	r3, r4
 8001fe0:	d921      	bls.n	8002026 <ai_platform_network_process+0x3fa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	b1fb      	cbz	r3, 8002026 <ai_platform_network_process+0x3fa>
 8001fe6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001fea:	b1e0      	cbz	r0, 8002026 <ai_platform_network_process+0x3fa>
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8001ff2:	6983      	ldr	r3, [r0, #24]
 8001ff4:	f8d2 9000 	ldr.w	r9, [r2]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	d5d5      	bpl.n	8001fae <ai_platform_network_process+0x382>
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8002008:	f000 ffce 	bl	8002fa8 <st_int8_copy>
 800200c:	f859 200a 	ldr.w	r2, [r9, sl]
 8002010:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8002014:	440b      	add	r3, r1
 8002016:	4293      	cmp	r3, r2
 8002018:	d302      	bcc.n	8002020 <ai_platform_network_process+0x3f4>
 800201a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f8c8 3004 	str.w	r3, [r8, #4]
 8002024:	e7d9      	b.n	8001fda <ai_platform_network_process+0x3ae>
 8002026:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800202a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800202e:	3401      	adds	r4, #1
 8002030:	b2a4      	uxth	r4, r4
 8002032:	42a3      	cmp	r3, r4
 8002034:	f8ab 401a 	strh.w	r4, [fp, #26]
 8002038:	f63f af7f 	bhi.w	8001f3a <ai_platform_network_process+0x30e>
 800203c:	4620      	mov	r0, r4
 800203e:	b005      	add	sp, #20
 8002040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002044:	2a01      	cmp	r2, #1
 8002046:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8002048:	d033      	beq.n	80020b2 <ai_platform_network_process+0x486>
 800204a:	f106 070c 	add.w	r7, r6, #12
 800204e:	e770      	b.n	8001f32 <ai_platform_network_process+0x306>
 8002050:	9d03      	ldr	r5, [sp, #12]
 8002052:	2219      	movs	r2, #25
 8002054:	2112      	movs	r1, #18
 8002056:	2400      	movs	r4, #0
 8002058:	f105 000c 	add.w	r0, r5, #12
 800205c:	f000 f834 	bl	80020c8 <core_set_error>
 8002060:	e725      	b.n	8001eae <ai_platform_network_process+0x282>
 8002062:	9d03      	ldr	r5, [sp, #12]
 8002064:	4604      	mov	r4, r0
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	2112      	movs	r1, #18
 800206a:	f105 000c 	add.w	r0, r5, #12
 800206e:	f000 f82b 	bl	80020c8 <core_set_error>
 8002072:	e71c      	b.n	8001eae <ai_platform_network_process+0x282>
 8002074:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002078:	832b      	strh	r3, [r5, #24]
 800207a:	e755      	b.n	8001f28 <ai_platform_network_process+0x2fc>
 800207c:	9d02      	ldr	r5, [sp, #8]
 800207e:	2219      	movs	r2, #25
 8002080:	2113      	movs	r1, #19
 8002082:	2400      	movs	r4, #0
 8002084:	f105 000c 	add.w	r0, r5, #12
 8002088:	f000 f81e 	bl	80020c8 <core_set_error>
 800208c:	e70f      	b.n	8001eae <ai_platform_network_process+0x282>
 800208e:	9d02      	ldr	r5, [sp, #8]
 8002090:	4604      	mov	r4, r0
 8002092:	2221      	movs	r2, #33	; 0x21
 8002094:	2113      	movs	r1, #19
 8002096:	f105 000c 	add.w	r0, r5, #12
 800209a:	f000 f815 	bl	80020c8 <core_set_error>
 800209e:	e706      	b.n	8001eae <ai_platform_network_process+0x282>
 80020a0:	9d02      	ldr	r5, [sp, #8]
 80020a2:	2217      	movs	r2, #23
 80020a4:	2113      	movs	r1, #19
 80020a6:	2400      	movs	r4, #0
 80020a8:	f105 000c 	add.w	r0, r5, #12
 80020ac:	f000 f80c 	bl	80020c8 <core_set_error>
 80020b0:	e6fd      	b.n	8001eae <ai_platform_network_process+0x282>
 80020b2:	2700      	movs	r7, #0
 80020b4:	e73d      	b.n	8001f32 <ai_platform_network_process+0x306>
 80020b6:	bf00      	nop

080020b8 <core_init>:
 80020b8:	2001      	movs	r0, #1
 80020ba:	4770      	bx	lr

080020bc <core_get_error>:
 80020bc:	4603      	mov	r3, r0
 80020be:	2200      	movs	r2, #0
 80020c0:	6800      	ldr	r0, [r0, #0]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <core_set_error>:
 80020c8:	4603      	mov	r3, r0
 80020ca:	7800      	ldrb	r0, [r0, #0]
 80020cc:	b108      	cbz	r0, 80020d2 <core_set_error+0xa>
 80020ce:	2000      	movs	r0, #0
 80020d0:	4770      	bx	lr
 80020d2:	7019      	strb	r1, [r3, #0]
 80020d4:	2001      	movs	r0, #1
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	f362 211f 	bfi	r1, r2, #8, #24
 80020dc:	6019      	str	r1, [r3, #0]
 80020de:	4770      	bx	lr

080020e0 <ai_check_custom_types>:
 80020e0:	b082      	sub	sp, #8
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <ai_check_custom_types+0x4c>)
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	b118      	cbz	r0, 80020f0 <ai_check_custom_types+0x10>
 80020e8:	7803      	ldrb	r3, [r0, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d002      	beq.n	80020f4 <ai_check_custom_types+0x14>
 80020ee:	2000      	movs	r0, #0
 80020f0:	b002      	add	sp, #8
 80020f2:	4770      	bx	lr
 80020f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <ai_check_custom_types+0x26>
 80020fc:	2001      	movs	r0, #1
 80020fe:	f080 0001 	eor.w	r0, r0, #1
 8002102:	b002      	add	sp, #8
 8002104:	4770      	bx	lr
 8002106:	7842      	ldrb	r2, [r0, #1]
 8002108:	3001      	adds	r0, #1
 800210a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800210e:	429a      	cmp	r2, r3
 8002110:	d1f4      	bne.n	80020fc <ai_check_custom_types+0x1c>
 8002112:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002116:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800211a:	429a      	cmp	r2, r3
 800211c:	d1ee      	bne.n	80020fc <ai_check_custom_types+0x1c>
 800211e:	7842      	ldrb	r2, [r0, #1]
 8002120:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002124:	429a      	cmp	r2, r3
 8002126:	d1e9      	bne.n	80020fc <ai_check_custom_types+0x1c>
 8002128:	2000      	movs	r0, #0
 800212a:	e7e8      	b.n	80020fe <ai_check_custom_types+0x1e>
 800212c:	84048403 	.word	0x84048403

08002130 <ai_layers_init_all>:
 8002130:	2100      	movs	r1, #0
 8002132:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002134:	b13b      	cbz	r3, 8002146 <ai_layers_init_all+0x16>
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	3101      	adds	r1, #1
 800213a:	60d8      	str	r0, [r3, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	d001      	beq.n	8002146 <ai_layers_init_all+0x16>
 8002142:	2a00      	cmp	r2, #0
 8002144:	d1f6      	bne.n	8002134 <ai_layers_init_all+0x4>
 8002146:	4608      	mov	r0, r1
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <ai_layers_post_init_all>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	2500      	movs	r5, #0
 8002150:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002152:	b16c      	cbz	r4, 8002170 <ai_layers_post_init_all+0x24>
 8002154:	6863      	ldr	r3, [r4, #4]
 8002156:	07db      	lsls	r3, r3, #31
 8002158:	d504      	bpl.n	8002164 <ai_layers_post_init_all+0x18>
 800215a:	6a23      	ldr	r3, [r4, #32]
 800215c:	4620      	mov	r0, r4
 800215e:	b10b      	cbz	r3, 8002164 <ai_layers_post_init_all+0x18>
 8002160:	3501      	adds	r5, #1
 8002162:	4798      	blx	r3
 8002164:	6923      	ldr	r3, [r4, #16]
 8002166:	42a3      	cmp	r3, r4
 8002168:	461c      	mov	r4, r3
 800216a:	d001      	beq.n	8002170 <ai_layers_post_init_all+0x24>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <ai_layers_post_init_all+0x6>
 8002170:	4628      	mov	r0, r5
 8002172:	bd38      	pop	{r3, r4, r5, pc}

08002174 <ai_layers_forward_all>:
 8002174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002178:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800217c:	4604      	mov	r4, r0
 800217e:	f1b8 0f00 	cmp.w	r8, #0
 8002182:	d02a      	beq.n	80021da <ai_layers_forward_all+0x66>
 8002184:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002186:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002188:	b319      	cbz	r1, 80021d2 <ai_layers_forward_all+0x5e>
 800218a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800218c:	2001      	movs	r0, #1
 800218e:	47c0      	blx	r8
 8002190:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002192:	b1f6      	cbz	r6, 80021d2 <ai_layers_forward_all+0x5e>
 8002194:	2700      	movs	r7, #0
 8002196:	4631      	mov	r1, r6
 8002198:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800219a:	2002      	movs	r0, #2
 800219c:	47c0      	blx	r8
 800219e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80021a0:	4628      	mov	r0, r5
 80021a2:	696b      	ldr	r3, [r5, #20]
 80021a4:	4798      	blx	r3
 80021a6:	692e      	ldr	r6, [r5, #16]
 80021a8:	2003      	movs	r0, #3
 80021aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80021ac:	42b5      	cmp	r5, r6
 80021ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80021b0:	d007      	beq.n	80021c2 <ai_layers_forward_all+0x4e>
 80021b2:	47c0      	blx	r8
 80021b4:	3701      	adds	r7, #1
 80021b6:	63e6      	str	r6, [r4, #60]	; 0x3c
 80021b8:	2e00      	cmp	r6, #0
 80021ba:	d1ec      	bne.n	8002196 <ai_layers_forward_all+0x22>
 80021bc:	4638      	mov	r0, r7
 80021be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c2:	2003      	movs	r0, #3
 80021c4:	3701      	adds	r7, #1
 80021c6:	47c0      	blx	r8
 80021c8:	2300      	movs	r3, #0
 80021ca:	4638      	mov	r0, r7
 80021cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d2:	2700      	movs	r7, #0
 80021d4:	4638      	mov	r0, r7
 80021d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021da:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80021dc:	63c5      	str	r5, [r0, #60]	; 0x3c
 80021de:	2d00      	cmp	r5, #0
 80021e0:	d0f7      	beq.n	80021d2 <ai_layers_forward_all+0x5e>
 80021e2:	4647      	mov	r7, r8
 80021e4:	696b      	ldr	r3, [r5, #20]
 80021e6:	4628      	mov	r0, r5
 80021e8:	4798      	blx	r3
 80021ea:	462b      	mov	r3, r5
 80021ec:	692d      	ldr	r5, [r5, #16]
 80021ee:	429d      	cmp	r5, r3
 80021f0:	d004      	beq.n	80021fc <ai_layers_forward_all+0x88>
 80021f2:	3701      	adds	r7, #1
 80021f4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d1f4      	bne.n	80021e4 <ai_layers_forward_all+0x70>
 80021fa:	e7df      	b.n	80021bc <ai_layers_forward_all+0x48>
 80021fc:	2300      	movs	r3, #0
 80021fe:	3701      	adds	r7, #1
 8002200:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002202:	e7db      	b.n	80021bc <ai_layers_forward_all+0x48>

08002204 <forward_dense>:
 8002204:	6982      	ldr	r2, [r0, #24]
 8002206:	8813      	ldrh	r3, [r2, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d043      	beq.n	8002294 <forward_dense+0x90>
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	6855      	ldr	r5, [r2, #4]
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	6869      	ldr	r1, [r5, #4]
 8002216:	b101      	cbz	r1, 800221a <forward_dense+0x16>
 8002218:	6809      	ldr	r1, [r1, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d069      	beq.n	80022f2 <forward_dense+0xee>
 800221e:	692a      	ldr	r2, [r5, #16]
 8002220:	b102      	cbz	r2, 8002224 <forward_dense+0x20>
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d061      	beq.n	80022ec <forward_dense+0xe8>
 8002228:	69ec      	ldr	r4, [r5, #28]
 800222a:	2c00      	cmp	r4, #0
 800222c:	d057      	beq.n	80022de <forward_dense+0xda>
 800222e:	8b2e      	ldrh	r6, [r5, #24]
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	2e01      	cmp	r6, #1
 8002234:	d955      	bls.n	80022e2 <forward_dense+0xde>
 8002236:	6864      	ldr	r4, [r4, #4]
 8002238:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800223c:	2b03      	cmp	r3, #3
 800223e:	68d0      	ldr	r0, [r2, #12]
 8002240:	68cf      	ldr	r7, [r1, #12]
 8002242:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002246:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800224a:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800224e:	f8d9 0000 	ldr.w	r0, [r9]
 8002252:	fb06 f807 	mul.w	r8, r6, r7
 8002256:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 800225a:	d044      	beq.n	80022e6 <forward_dense+0xe2>
 800225c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800225e:	b11d      	cbz	r5, 8002268 <forward_dense+0x64>
 8002260:	682d      	ldr	r5, [r5, #0]
 8002262:	b10d      	cbz	r5, 8002268 <forward_dense+0x64>
 8002264:	69ab      	ldr	r3, [r5, #24]
 8002266:	689d      	ldr	r5, [r3, #8]
 8002268:	6992      	ldr	r2, [r2, #24]
 800226a:	698b      	ldr	r3, [r1, #24]
 800226c:	6890      	ldr	r0, [r2, #8]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	b10c      	cbz	r4, 8002276 <forward_dense+0x72>
 8002272:	69a3      	ldr	r3, [r4, #24]
 8002274:	689c      	ldr	r4, [r3, #8]
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <forward_dense+0xf4>)
 8002278:	459c      	cmp	ip, r3
 800227a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800227e:	d023      	beq.n	80022c8 <forward_dense+0xc4>
 8002280:	4e1e      	ldr	r6, [pc, #120]	; (80022fc <forward_dense+0xf8>)
 8002282:	45b4      	cmp	ip, r6
 8002284:	d015      	beq.n	80022b2 <forward_dense+0xae>
 8002286:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 800228a:	459c      	cmp	ip, r3
 800228c:	d004      	beq.n	8002298 <forward_dense+0x94>
 800228e:	b00e      	add	sp, #56	; 0x38
 8002290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	deff      	udf	#255	; 0xff
 8002298:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800229c:	a807      	add	r0, sp, #28
 800229e:	9209      	str	r2, [sp, #36]	; 0x24
 80022a0:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80022a4:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80022a8:	f000 f946 	bl	8002538 <forward_lite_dense_if32of32wf32>
 80022ac:	b00e      	add	sp, #56	; 0x38
 80022ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b2:	464b      	mov	r3, r9
 80022b4:	9500      	str	r5, [sp, #0]
 80022b6:	e9cd e803 	strd	lr, r8, [sp, #12]
 80022ba:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80022be:	f000 fa99 	bl	80027f4 <forward_lite_dense_if32of32wf32_lut4>
 80022c2:	b00e      	add	sp, #56	; 0x38
 80022c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022c8:	464b      	mov	r3, r9
 80022ca:	9500      	str	r5, [sp, #0]
 80022cc:	e9cd e803 	strd	lr, r8, [sp, #12]
 80022d0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80022d4:	f000 fbb8 	bl	8002a48 <forward_lite_dense_if32of32wf32_lut8>
 80022d8:	b00e      	add	sp, #56	; 0x38
 80022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022de:	4620      	mov	r0, r4
 80022e0:	e7aa      	b.n	8002238 <forward_dense+0x34>
 80022e2:	2400      	movs	r4, #0
 80022e4:	e7a8      	b.n	8002238 <forward_dense+0x34>
 80022e6:	2300      	movs	r3, #0
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	deff      	udf	#255	; 0xff
 80022ec:	2300      	movs	r3, #0
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	deff      	udf	#255	; 0xff
 80022f2:	2300      	movs	r3, #0
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	deff      	udf	#255	; 0xff
 80022f8:	01d01040 	.word	0x01d01040
 80022fc:	01e81040 	.word	0x01e81040

08002300 <forward_relu>:
 8002300:	6982      	ldr	r2, [r0, #24]
 8002302:	8813      	ldrh	r3, [r2, #0]
 8002304:	b323      	cbz	r3, 8002350 <forward_relu+0x50>
 8002306:	6851      	ldr	r1, [r2, #4]
 8002308:	684a      	ldr	r2, [r1, #4]
 800230a:	b102      	cbz	r2, 800230e <forward_relu+0xe>
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	f000 8086 	beq.w	8002420 <forward_relu+0x120>
 8002314:	b470      	push	{r4, r5, r6}
 8002316:	690b      	ldr	r3, [r1, #16]
 8002318:	b103      	cbz	r3, 800231c <forward_relu+0x1c>
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69c6      	ldr	r6, [r0, #28]
 800231e:	b1ce      	cbz	r6, 8002354 <forward_relu+0x54>
 8002320:	6871      	ldr	r1, [r6, #4]
 8002322:	6998      	ldr	r0, [r3, #24]
 8002324:	2901      	cmp	r1, #1
 8002326:	d03f      	beq.n	80023a8 <forward_relu+0xa8>
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	6991      	ldr	r1, [r2, #24]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	6880      	ldr	r0, [r0, #8]
 8002330:	6889      	ldr	r1, [r1, #8]
 8002332:	d06c      	beq.n	800240e <forward_relu+0x10e>
 8002334:	68d5      	ldr	r5, [r2, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800233c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8002340:	429d      	cmp	r5, r3
 8002342:	fb04 f202 	mul.w	r2, r4, r2
 8002346:	d1f9      	bne.n	800233c <forward_relu+0x3c>
 8002348:	68b3      	ldr	r3, [r6, #8]
 800234a:	bc70      	pop	{r4, r5, r6}
 800234c:	f000 b86e 	b.w	800242c <forward_lite_nl_relu_generic_if32of32_kernel>
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	deff      	udf	#255	; 0xff
 8002354:	6999      	ldr	r1, [r3, #24]
 8002356:	6893      	ldr	r3, [r2, #8]
 8002358:	6990      	ldr	r0, [r2, #24]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	6889      	ldr	r1, [r1, #8]
 800235e:	6884      	ldr	r4, [r0, #8]
 8002360:	d057      	beq.n	8002412 <forward_relu+0x112>
 8002362:	68d5      	ldr	r5, [r2, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800236a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800236e:	429d      	cmp	r5, r3
 8002370:	fb00 f202 	mul.w	r2, r0, r2
 8002374:	d1f9      	bne.n	800236a <forward_relu+0x6a>
 8002376:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800237a:	4413      	add	r3, r2
 800237c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002380:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002384:	4294      	cmp	r4, r2
 8002386:	d80d      	bhi.n	80023a4 <forward_relu+0xa4>
 8002388:	3204      	adds	r2, #4
 800238a:	3104      	adds	r1, #4
 800238c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002428 <forward_relu+0x128>
 8002390:	4613      	mov	r3, r2
 8002392:	ed72 7a01 	vldmdb	r2!, {s15}
 8002396:	3b08      	subs	r3, #8
 8002398:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800239c:	ed61 7a01 	vstmdb	r1!, {s15}
 80023a0:	429c      	cmp	r4, r3
 80023a2:	d9f5      	bls.n	8002390 <forward_relu+0x90>
 80023a4:	bc70      	pop	{r4, r5, r6}
 80023a6:	4770      	bx	lr
 80023a8:	6993      	ldr	r3, [r2, #24]
 80023aa:	6880      	ldr	r0, [r0, #8]
 80023ac:	689c      	ldr	r4, [r3, #8]
 80023ae:	6893      	ldr	r3, [r2, #8]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	d030      	beq.n	8002416 <forward_relu+0x116>
 80023b4:	68d5      	ldr	r5, [r2, #12]
 80023b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80023ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80023be:	429d      	cmp	r5, r3
 80023c0:	fb02 f101 	mul.w	r1, r2, r1
 80023c4:	d1f9      	bne.n	80023ba <forward_relu+0xba>
 80023c6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80023ca:	68b3      	ldr	r3, [r6, #8]
 80023cc:	440a      	add	r2, r1
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80023d6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80023da:	429c      	cmp	r4, r3
 80023dc:	d8e2      	bhi.n	80023a4 <forward_relu+0xa4>
 80023de:	1d02      	adds	r2, r0, #4
 80023e0:	3304      	adds	r3, #4
 80023e2:	2000      	movs	r0, #0
 80023e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80023e8:	1f19      	subs	r1, r3, #4
 80023ea:	3b08      	subs	r3, #8
 80023ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d405      	bmi.n	8002402 <forward_relu+0x102>
 80023f6:	429c      	cmp	r4, r3
 80023f8:	f842 0d04 	str.w	r0, [r2, #-4]!
 80023fc:	d8d2      	bhi.n	80023a4 <forward_relu+0xa4>
 80023fe:	460b      	mov	r3, r1
 8002400:	e7f0      	b.n	80023e4 <forward_relu+0xe4>
 8002402:	429c      	cmp	r4, r3
 8002404:	ed62 7a01 	vstmdb	r2!, {s15}
 8002408:	d8cc      	bhi.n	80023a4 <forward_relu+0xa4>
 800240a:	460b      	mov	r3, r1
 800240c:	e7ea      	b.n	80023e4 <forward_relu+0xe4>
 800240e:	2201      	movs	r2, #1
 8002410:	e79a      	b.n	8002348 <forward_relu+0x48>
 8002412:	4622      	mov	r2, r4
 8002414:	e7b8      	b.n	8002388 <forward_relu+0x88>
 8002416:	68b2      	ldr	r2, [r6, #8]
 8002418:	4623      	mov	r3, r4
 800241a:	ed92 7a00 	vldr	s14, [r2]
 800241e:	e7de      	b.n	80023de <forward_relu+0xde>
 8002420:	2300      	movs	r3, #0
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	deff      	udf	#255	; 0xff
 8002426:	bf00      	nop
 8002428:	00000000 	.word	0x00000000

0800242c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800242c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002438:	ed93 6a01 	vldr	s12, [r3, #4]
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	d42b      	bmi.n	800249a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8002442:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002446:	4413      	add	r3, r2
 8002448:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800244c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8002450:	4291      	cmp	r1, r2
 8002452:	d821      	bhi.n	8002498 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8002454:	f10c 0104 	add.w	r1, ip, #4
 8002458:	1d13      	adds	r3, r2, #4
 800245a:	eba2 020c 	sub.w	r2, r2, ip
 800245e:	4408      	add	r0, r1
 8002460:	e00c      	b.n	800247c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8002462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002466:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	db01      	blt.n	8002474 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8002470:	ee65 7a86 	vmul.f32	s15, s11, s12
 8002474:	4293      	cmp	r3, r2
 8002476:	ed60 7a01 	vstmdb	r0!, {s15}
 800247a:	d00c      	beq.n	8002496 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800247c:	ed73 7a01 	vldmdb	r3!, {s15}
 8002480:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	daeb      	bge.n	8002462 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800248a:	eef0 7a66 	vmov.f32	s15, s13
 800248e:	4293      	cmp	r3, r2
 8002490:	ed60 7a01 	vstmdb	r0!, {s15}
 8002494:	d1f2      	bne.n	800247c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8002496:	4770      	bx	lr
 8002498:	4770      	bx	lr
 800249a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800249e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80024a2:	4413      	add	r3, r2
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80024ac:	b500      	push	{lr}
 80024ae:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80024b2:	d019      	beq.n	80024e8 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 80024b4:	4561      	cmp	r1, ip
 80024b6:	d815      	bhi.n	80024e4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80024b8:	f10e 0204 	add.w	r2, lr, #4
 80024bc:	f10c 0304 	add.w	r3, ip, #4
 80024c0:	ebac 010e 	sub.w	r1, ip, lr
 80024c4:	4402      	add	r2, r0
 80024c6:	ed73 7a01 	vldmdb	r3!, {s15}
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80024da:	d827      	bhi.n	800252c <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 80024dc:	428b      	cmp	r3, r1
 80024de:	ed62 6a01 	vstmdb	r2!, {s13}
 80024e2:	d1f0      	bne.n	80024c6 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80024e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e8:	4561      	cmp	r1, ip
 80024ea:	d8fb      	bhi.n	80024e4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80024ec:	f10e 0204 	add.w	r2, lr, #4
 80024f0:	f10c 0304 	add.w	r3, ip, #4
 80024f4:	ebac 010e 	sub.w	r1, ip, lr
 80024f8:	f04f 0c00 	mov.w	ip, #0
 80024fc:	4402      	add	r2, r0
 80024fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d40a      	bmi.n	8002522 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 800250c:	428b      	cmp	r3, r1
 800250e:	f842 cd04 	str.w	ip, [r2, #-4]!
 8002512:	d0e7      	beq.n	80024e4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8002514:	ed73 7a01 	vldmdb	r3!, {s15}
 8002518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d5f4      	bpl.n	800250c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8002522:	428b      	cmp	r3, r1
 8002524:	ed62 7a01 	vstmdb	r2!, {s15}
 8002528:	d1e9      	bne.n	80024fe <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 800252a:	e7db      	b.n	80024e4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800252c:	428b      	cmp	r3, r1
 800252e:	ed62 7a01 	vstmdb	r2!, {s15}
 8002532:	d1c8      	bne.n	80024c6 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8002534:	e7d6      	b.n	80024e4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8002536:	bf00      	nop

08002538 <forward_lite_dense_if32of32wf32>:
 8002538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	ed2d 8b0c 	vpush	{d8-d13}
 8002540:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8002544:	6801      	ldr	r1, [r0, #0]
 8002546:	b083      	sub	sp, #12
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002550:	9100      	str	r1, [sp, #0]
 8002552:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002556:	4299      	cmp	r1, r3
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	f080 811c 	bcs.w	8002796 <forward_lite_dense_if32of32wf32+0x25e>
 800255e:	4607      	mov	r7, r0
 8002560:	6904      	ldr	r4, [r0, #16]
 8002562:	0096      	lsls	r6, r2, #2
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	68bd      	ldr	r5, [r7, #8]
 8002568:	eb03 0e06 	add.w	lr, r3, r6
 800256c:	461e      	mov	r6, r3
 800256e:	459e      	cmp	lr, r3
 8002570:	f240 8103 	bls.w	800277a <forward_lite_dense_if32of32wf32+0x242>
 8002574:	f1a4 0c10 	sub.w	ip, r4, #16
 8002578:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800257c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002580:	f10c 0c01 	add.w	ip, ip, #1
 8002584:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8002588:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800258c:	2c0f      	cmp	r4, #15
 800258e:	f240 8107 	bls.w	80027a0 <forward_lite_dense_if32of32wf32+0x268>
 8002592:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8002596:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800259a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80027f0 <forward_lite_dense_if32of32wf32+0x2b8>
 800259e:	4621      	mov	r1, r4
 80025a0:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 80025a4:	3910      	subs	r1, #16
 80025a6:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80025aa:	3340      	adds	r3, #64	; 0x40
 80025ac:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 80025b0:	290f      	cmp	r1, #15
 80025b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025b6:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 80025ba:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80025be:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80025c2:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 80025c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80025ca:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 80025ce:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 80025d2:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 80025d6:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 80025da:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 80025de:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 80025e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80025e6:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 80025ea:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 80025ee:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 80025f2:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 80025f6:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 80025fa:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 80025fe:	eeed 7a26 	vfma.f32	s15, s26, s13
 8002602:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8002606:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800260a:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800260e:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8002612:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8002616:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800261a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800261e:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8002622:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8002626:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800262a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800262e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8002632:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8002636:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800263a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800263e:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8002642:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8002646:	eee9 7a89 	vfma.f32	s15, s19, s18
 800264a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800264e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8002652:	eee1 7a21 	vfma.f32	s15, s2, s3
 8002656:	eee2 7a22 	vfma.f32	s15, s4, s5
 800265a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800265e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002662:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002666:	eee6 7a26 	vfma.f32	s15, s12, s13
 800266a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266e:	d897      	bhi.n	80025a0 <forward_lite_dense_if32of32wf32+0x68>
 8002670:	eb05 020b 	add.w	r2, r5, fp
 8002674:	f004 010f 	and.w	r1, r4, #15
 8002678:	4663      	mov	r3, ip
 800267a:	2903      	cmp	r1, #3
 800267c:	d95f      	bls.n	800273e <forward_lite_dense_if32of32wf32+0x206>
 800267e:	edd2 6a01 	vldr	s13, [r2, #4]
 8002682:	1f08      	subs	r0, r1, #4
 8002684:	edd3 7a01 	vldr	s15, [r3, #4]
 8002688:	ed93 4a00 	vldr	s8, [r3]
 800268c:	2803      	cmp	r0, #3
 800268e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002692:	edd2 4a00 	vldr	s9, [r2]
 8002696:	ed93 5a02 	vldr	s10, [r3, #8]
 800269a:	edd2 5a02 	vldr	s11, [r2, #8]
 800269e:	eee4 7a24 	vfma.f32	s15, s8, s9
 80026a2:	ed93 6a03 	vldr	s12, [r3, #12]
 80026a6:	edd2 6a03 	vldr	s13, [r2, #12]
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 80026b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80026b6:	eeb0 7a67 	vmov.f32	s14, s15
 80026ba:	d938      	bls.n	800272e <forward_lite_dense_if32of32wf32+0x1f6>
 80026bc:	edd2 6a05 	vldr	s13, [r2, #20]
 80026c0:	f1a1 0a08 	sub.w	sl, r1, #8
 80026c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80026c8:	ed93 4a04 	vldr	s8, [r3, #16]
 80026cc:	f1ba 0f03 	cmp.w	sl, #3
 80026d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026d4:	edd2 4a04 	vldr	s9, [r2, #16]
 80026d8:	ed93 5a06 	vldr	s10, [r3, #24]
 80026dc:	edd2 5a06 	vldr	s11, [r2, #24]
 80026e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80026e4:	ed93 6a07 	vldr	s12, [r3, #28]
 80026e8:	edd2 6a07 	vldr	s13, [r2, #28]
 80026ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80026f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80026f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f8:	d919      	bls.n	800272e <forward_lite_dense_if32of32wf32+0x1f6>
 80026fa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80026fe:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8002702:	ed92 4a08 	vldr	s8, [r2, #32]
 8002706:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800270a:	edd3 4a08 	vldr	s9, [r3, #32]
 800270e:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8002712:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8002716:	eee4 7a24 	vfma.f32	s15, s8, s9
 800271a:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800271e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002722:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002726:	eee6 7a26 	vfma.f32	s15, s12, s13
 800272a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272e:	0880      	lsrs	r0, r0, #2
 8002730:	f001 0103 	and.w	r1, r1, #3
 8002734:	3001      	adds	r0, #1
 8002736:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800273a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800273e:	b1a9      	cbz	r1, 800276c <forward_lite_dense_if32of32wf32+0x234>
 8002740:	edd3 6a00 	vldr	s13, [r3]
 8002744:	3901      	subs	r1, #1
 8002746:	edd2 7a00 	vldr	s15, [r2]
 800274a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800274e:	d00d      	beq.n	800276c <forward_lite_dense_if32of32wf32+0x234>
 8002750:	edd3 6a01 	vldr	s13, [r3, #4]
 8002754:	2901      	cmp	r1, #1
 8002756:	edd2 7a01 	vldr	s15, [r2, #4]
 800275a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800275e:	d005      	beq.n	800276c <forward_lite_dense_if32of32wf32+0x234>
 8002760:	edd2 6a02 	vldr	s13, [r2, #8]
 8002764:	edd3 7a02 	vldr	s15, [r3, #8]
 8002768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800276c:	eca6 7a01 	vstmia	r6!, {s14}
 8002770:	45b6      	cmp	lr, r6
 8002772:	444d      	add	r5, r9
 8002774:	f63f af0a 	bhi.w	800258c <forward_lite_dense_if32of32wf32+0x54>
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	b9b3      	cbnz	r3, 80027ac <forward_lite_dense_if32of32wf32+0x274>
 800277e:	9b00      	ldr	r3, [sp, #0]
 8002780:	0096      	lsls	r6, r2, #2
 8002782:	9901      	ldr	r1, [sp, #4]
 8002784:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002788:	693c      	ldr	r4, [r7, #16]
 800278a:	4299      	cmp	r1, r3
 800278c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f63f aee7 	bhi.w	8002564 <forward_lite_dense_if32of32wf32+0x2c>
 8002796:	b003      	add	sp, #12
 8002798:	ecbd 8b0c 	vpop	{d8-d13}
 800279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a0:	4621      	mov	r1, r4
 80027a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80027f0 <forward_lite_dense_if32of32wf32+0x2b8>
 80027a6:	462a      	mov	r2, r5
 80027a8:	4643      	mov	r3, r8
 80027aa:	e766      	b.n	800267a <forward_lite_dense_if32of32wf32+0x142>
 80027ac:	2a00      	cmp	r2, #0
 80027ae:	d0e6      	beq.n	800277e <forward_lite_dense_if32of32wf32+0x246>
 80027b0:	9a00      	ldr	r2, [sp, #0]
 80027b2:	ed93 7a00 	vldr	s14, [r3]
 80027b6:	edd2 7a00 	vldr	s15, [r2]
 80027ba:	4613      	mov	r3, r2
 80027bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c0:	edc2 7a00 	vstr	s15, [r2]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	2a01      	cmp	r2, #1
 80027c8:	d9d9      	bls.n	800277e <forward_lite_dense_if32of32wf32+0x246>
 80027ca:	1d19      	adds	r1, r3, #4
 80027cc:	2301      	movs	r3, #1
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	ed91 7a00 	vldr	s14, [r1]
 80027d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80027d8:	3301      	adds	r3, #1
 80027da:	edd2 7a00 	vldr	s15, [r2]
 80027de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027e2:	ece1 7a01 	vstmia	r1!, {s15}
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f0      	bhi.n	80027ce <forward_lite_dense_if32of32wf32+0x296>
 80027ec:	e7c7      	b.n	800277e <forward_lite_dense_if32of32wf32+0x246>
 80027ee:	bf00      	nop
 80027f0:	00000000 	.word	0x00000000

080027f4 <forward_lite_dense_if32of32wf32_lut4>:
 80027f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f8:	b08d      	sub	sp, #52	; 0x34
 80027fa:	4605      	mov	r5, r0
 80027fc:	460c      	mov	r4, r1
 80027fe:	9005      	str	r0, [sp, #20]
 8002800:	4618      	mov	r0, r3
 8002802:	920a      	str	r2, [sp, #40]	; 0x28
 8002804:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8002806:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002812:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002814:	9308      	str	r3, [sp, #32]
 8002816:	b126      	cbz	r6, 8002822 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	4631      	mov	r1, r6
 800281c:	f000 fbc4 	bl	8002fa8 <st_int8_copy>
 8002820:	4630      	mov	r0, r6
 8002822:	9b05      	ldr	r3, [sp, #20]
 8002824:	9a08      	ldr	r2, [sp, #32]
 8002826:	4293      	cmp	r3, r2
 8002828:	f080 80f7 	bcs.w	8002a1a <forward_lite_dense_if32of32wf32_lut4+0x226>
 800282c:	08eb      	lsrs	r3, r5, #3
 800282e:	f005 0101 	and.w	r1, r5, #1
 8002832:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002834:	f025 0801 	bic.w	r8, r5, #1
 8002838:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	9102      	str	r1, [sp, #8]
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	f104 0b20 	add.w	fp, r4, #32
 8002848:	00a9      	lsls	r1, r5, #2
 800284a:	9304      	str	r3, [sp, #16]
 800284c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002850:	9b05      	ldr	r3, [sp, #20]
 8002852:	9207      	str	r2, [sp, #28]
 8002854:	9109      	str	r1, [sp, #36]	; 0x24
 8002856:	920b      	str	r2, [sp, #44]	; 0x2c
 8002858:	9a07      	ldr	r2, [sp, #28]
 800285a:	eb03 0902 	add.w	r9, r3, r2
 800285e:	f1ab 0220 	sub.w	r2, fp, #32
 8002862:	4599      	cmp	r9, r3
 8002864:	9206      	str	r2, [sp, #24]
 8002866:	f240 80db 	bls.w	8002a20 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800286a:	469e      	mov	lr, r3
 800286c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800286e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80b4 	beq.w	80029e4 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800287c:	9b04      	ldr	r3, [sp, #16]
 800287e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002a44 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8002882:	18d4      	adds	r4, r2, r3
 8002884:	465b      	mov	r3, fp
 8002886:	7816      	ldrb	r6, [r2, #0]
 8002888:	3204      	adds	r2, #4
 800288a:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800288e:	3320      	adds	r3, #32
 8002890:	f006 070f 	and.w	r7, r6, #15
 8002894:	0936      	lsrs	r6, r6, #4
 8002896:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 800289a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800289e:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 80028a2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80028a6:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 80028aa:	edd7 7a00 	vldr	s15, [r7]
 80028ae:	ed96 3a00 	vldr	s6, [r6]
 80028b2:	092e      	lsrs	r6, r5, #4
 80028b4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80028b8:	f005 050f 	and.w	r5, r5, #15
 80028bc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80028c0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80028c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80028c8:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 80028cc:	eee3 7a04 	vfma.f32	s15, s6, s8
 80028d0:	ed96 3a00 	vldr	s6, [r6]
 80028d4:	ed95 4a00 	vldr	s8, [r5]
 80028d8:	090d      	lsrs	r5, r1, #4
 80028da:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80028de:	f001 010f 	and.w	r1, r1, #15
 80028e2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80028e6:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 80028ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80028ee:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 80028f2:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80028f6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80028fa:	eee4 7a05 	vfma.f32	s15, s8, s10
 80028fe:	ed95 4a00 	vldr	s8, [r5]
 8002902:	ed91 5a00 	vldr	s10, [r1]
 8002906:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800290a:	42a2      	cmp	r2, r4
 800290c:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8002910:	f001 010f 	and.w	r1, r1, #15
 8002914:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002918:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800291c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002920:	eee5 7a06 	vfma.f32	s15, s10, s12
 8002924:	ed95 5a00 	vldr	s10, [r5]
 8002928:	ed91 6a00 	vldr	s12, [r1]
 800292c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002930:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002938:	d1a5      	bne.n	8002886 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800293a:	4656      	mov	r6, sl
 800293c:	4546      	cmp	r6, r8
 800293e:	d257      	bcs.n	80029f0 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	f106 0208 	add.w	r2, r6, #8
 8002946:	1e61      	subs	r1, r4, #1
 8002948:	1b9d      	subs	r5, r3, r6
 800294a:	08ef      	lsrs	r7, r5, #3
 800294c:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8002950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002954:	3208      	adds	r2, #8
 8002956:	ed52 5a03 	vldr	s11, [r2, #-12]
 800295a:	f003 0c0f 	and.w	ip, r3, #15
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	ed52 6a04 	vldr	s13, [r2, #-16]
 8002964:	42a9      	cmp	r1, r5
 8002966:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800296a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800296e:	eddc 7a00 	vldr	s15, [ip]
 8002972:	ed93 6a00 	vldr	s12, [r3]
 8002976:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800297a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800297e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002982:	d1e5      	bne.n	8002950 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8002984:	3701      	adds	r7, #1
 8002986:	19e2      	adds	r2, r4, r7
 8002988:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800298c:	9b02      	ldr	r3, [sp, #8]
 800298e:	b30b      	cbz	r3, 80029d4 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8002990:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002994:	edd6 7a00 	vldr	s15, [r6]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800299e:	edd3 6a00 	vldr	s13, [r3]
 80029a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029a6:	ecae 7a01 	vstmia	lr!, {s14}
 80029aa:	45f1      	cmp	r9, lr
 80029ac:	f63f af62 	bhi.w	8002874 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80029b0:	9b05      	ldr	r3, [sp, #20]
 80029b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029b4:	1899      	adds	r1, r3, r2
 80029b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80029b8:	b9e3      	cbnz	r3, 80029f4 <forward_lite_dense_if32of32wf32_lut4+0x200>
 80029ba:	9b08      	ldr	r3, [sp, #32]
 80029bc:	428b      	cmp	r3, r1
 80029be:	d92c      	bls.n	8002a1a <forward_lite_dense_if32of32wf32_lut4+0x226>
 80029c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029c2:	4498      	add	r8, r3
 80029c4:	449a      	add	sl, r3
 80029c6:	449b      	add	fp, r3
 80029c8:	9b05      	ldr	r3, [sp, #20]
 80029ca:	4599      	cmp	r9, r3
 80029cc:	d92a      	bls.n	8002a24 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80029ce:	460b      	mov	r3, r1
 80029d0:	9105      	str	r1, [sp, #20]
 80029d2:	e741      	b.n	8002858 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80029d4:	ecae 7a01 	vstmia	lr!, {s14}
 80029d8:	45f1      	cmp	r9, lr
 80029da:	d9e9      	bls.n	80029b0 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f47f af4c 	bne.w	800287c <forward_lite_dense_if32of32wf32_lut4+0x88>
 80029e4:	9e06      	ldr	r6, [sp, #24]
 80029e6:	4614      	mov	r4, r2
 80029e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a44 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80029ec:	4546      	cmp	r6, r8
 80029ee:	d3a7      	bcc.n	8002940 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80029f0:	4622      	mov	r2, r4
 80029f2:	e7cb      	b.n	800298c <forward_lite_dense_if32of32wf32_lut4+0x198>
 80029f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0df      	beq.n	80029ba <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80029fa:	9b07      	ldr	r3, [sp, #28]
 80029fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ecb2 7a01 	vldmia	r2!, {s14}
 8002a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a0c:	ece3 7a01 	vstmia	r3!, {s15}
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d1f5      	bne.n	8002a00 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8002a14:	9b08      	ldr	r3, [sp, #32]
 8002a16:	428b      	cmp	r3, r1
 8002a18:	d8d2      	bhi.n	80029c0 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8002a1a:	b00d      	add	sp, #52	; 0x34
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a20:	4619      	mov	r1, r3
 8002a22:	e7c8      	b.n	80029b6 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8002a24:	9b07      	ldr	r3, [sp, #28]
 8002a26:	1acb      	subs	r3, r1, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002a2c:	ed92 7a00 	vldr	s14, [r2]
 8002a30:	ecf0 7a01 	vldmia	r0!, {s15}
 8002a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a38:	ece2 7a01 	vstmia	r2!, {s15}
 8002a3c:	428a      	cmp	r2, r1
 8002a3e:	d1f5      	bne.n	8002a2c <forward_lite_dense_if32of32wf32_lut4+0x238>
 8002a40:	e7f2      	b.n	8002a28 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8002a42:	bf00      	nop
 8002a44:	00000000 	.word	0x00000000

08002a48 <forward_lite_dense_if32of32wf32_lut8>:
 8002a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4c:	b091      	sub	sp, #68	; 0x44
 8002a4e:	4699      	mov	r9, r3
 8002a50:	468b      	mov	fp, r1
 8002a52:	920e      	str	r2, [sp, #56]	; 0x38
 8002a54:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8002a56:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8002a5a:	9003      	str	r0, [sp, #12]
 8002a5c:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002a68:	930c      	str	r3, [sp, #48]	; 0x30
 8002a6a:	b134      	cbz	r4, 8002a7a <forward_lite_dense_if32of32wf32_lut8+0x32>
 8002a6c:	4648      	mov	r0, r9
 8002a6e:	46a1      	mov	r9, r4
 8002a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a74:	4621      	mov	r1, r4
 8002a76:	f000 fa97 	bl	8002fa8 <st_int8_copy>
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f080 8084 	bcs.w	8002b8c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8002a84:	4bb7      	ldr	r3, [pc, #732]	; (8002d64 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8002a86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002a88:	4443      	add	r3, r8
 8002a8a:	9d03      	ldr	r5, [sp, #12]
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	eddf 3ab6 	vldr	s7, [pc, #728]	; 8002d68 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	920b      	str	r2, [sp, #44]	; 0x2c
 8002a96:	f103 0120 	add.w	r1, r3, #32
 8002a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8002a9c:	445b      	add	r3, fp
 8002a9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002aa0:	9105      	str	r1, [sp, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	eb0b 0301 	add.w	r3, fp, r1
 8002aa8:	469a      	mov	sl, r3
 8002aaa:	469e      	mov	lr, r3
 8002aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002aae:	eb05 0c03 	add.w	ip, r5, r3
 8002ab2:	45ac      	cmp	ip, r5
 8002ab4:	d952      	bls.n	8002b5c <forward_lite_dense_if32of32wf32_lut8+0x114>
 8002ab6:	9800      	ldr	r0, [sp, #0]
 8002ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aba:	f100 011f 	add.w	r1, r0, #31
 8002abe:	eba0 020b 	sub.w	r2, r0, fp
 8002ac2:	445b      	add	r3, fp
 8002ac4:	9101      	str	r1, [sp, #4]
 8002ac6:	eba1 010b 	sub.w	r1, r1, fp
 8002aca:	0952      	lsrs	r2, r2, #5
 8002acc:	9306      	str	r3, [sp, #24]
 8002ace:	0889      	lsrs	r1, r1, #2
 8002ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ad2:	3101      	adds	r1, #1
 8002ad4:	9102      	str	r1, [sp, #8]
 8002ad6:	1c51      	adds	r1, r2, #1
 8002ad8:	00d2      	lsls	r2, r2, #3
 8002ada:	3210      	adds	r2, #16
 8002adc:	920a      	str	r2, [sp, #40]	; 0x28
 8002ade:	00ca      	lsls	r2, r1, #3
 8002ae0:	9208      	str	r2, [sp, #32]
 8002ae2:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8002ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8002ae8:	1f02      	subs	r2, r0, #4
 8002aea:	9204      	str	r2, [sp, #16]
 8002aec:	f10b 0204 	add.w	r2, fp, #4
 8002af0:	9207      	str	r2, [sp, #28]
 8002af2:	f1b8 0f07 	cmp.w	r8, #7
 8002af6:	d84c      	bhi.n	8002b92 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8002af8:	45d3      	cmp	fp, sl
 8002afa:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002d68 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002afe:	d20f      	bcs.n	8002b20 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002b00:	4659      	mov	r1, fp
 8002b02:	4618      	mov	r0, r3
 8002b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b08:	ecf1 7a01 	vldmia	r1!, {s15}
 8002b0c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002b10:	4551      	cmp	r1, sl
 8002b12:	edd2 6a00 	vldr	s13, [r2]
 8002b16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002b1a:	d3f3      	bcc.n	8002b04 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8002b1c:	9a02      	ldr	r2, [sp, #8]
 8002b1e:	4413      	add	r3, r2
 8002b20:	eca5 7a01 	vstmia	r5!, {s14}
 8002b24:	45ac      	cmp	ip, r5
 8002b26:	d8e4      	bhi.n	8002af2 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	46f3      	mov	fp, lr
 8002b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b2e:	1899      	adds	r1, r3, r2
 8002b30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b32:	b9c3      	cbnz	r3, 8002b66 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8002b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b36:	428b      	cmp	r3, r1
 8002b38:	d928      	bls.n	8002b8c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8002b3a:	9b00      	ldr	r3, [sp, #0]
 8002b3c:	9a05      	ldr	r2, [sp, #20]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4492      	add	sl, r2
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	459c      	cmp	ip, r3
 8002b48:	f240 821e 	bls.w	8002f88 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8002b4c:	460d      	mov	r5, r1
 8002b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b50:	4496      	add	lr, r2
 8002b52:	9103      	str	r1, [sp, #12]
 8002b54:	eb05 0c03 	add.w	ip, r5, r3
 8002b58:	45ac      	cmp	ip, r5
 8002b5a:	d8ac      	bhi.n	8002ab6 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8002b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b5e:	4629      	mov	r1, r5
 8002b60:	46f3      	mov	fp, lr
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0e6      	beq.n	8002b34 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8002b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0e3      	beq.n	8002b34 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8002b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002b70:	1acb      	subs	r3, r1, r3
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ecb2 7a01 	vldmia	r2!, {s14}
 8002b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b7e:	ece3 7a01 	vstmia	r3!, {s15}
 8002b82:	428b      	cmp	r3, r1
 8002b84:	d1f5      	bne.n	8002b72 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8002b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b88:	428b      	cmp	r3, r1
 8002b8a:	d8d6      	bhi.n	8002b3a <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8002b8c:	b011      	add	sp, #68	; 0x44
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b92:	f003 0203 	and.w	r2, r3, #3
 8002b96:	2a02      	cmp	r2, #2
 8002b98:	f000 81ee 	beq.w	8002f78 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8002b9c:	2a03      	cmp	r2, #3
 8002b9e:	f000 80e5 	beq.w	8002d6c <forward_lite_dense_if32of32wf32_lut8+0x324>
 8002ba2:	2a01      	cmp	r2, #1
 8002ba4:	f000 81d2 	beq.w	8002f4c <forward_lite_dense_if32of32wf32_lut8+0x504>
 8002ba8:	9a06      	ldr	r2, [sp, #24]
 8002baa:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002d68 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002bae:	4593      	cmp	fp, r2
 8002bb0:	f200 81e8 	bhi.w	8002f84 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8002bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002bb6:	f103 0208 	add.w	r2, r3, #8
 8002bba:	f10b 0120 	add.w	r1, fp, #32
 8002bbe:	18c4      	adds	r4, r0, r3
 8002bc0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 8002bca:	3120      	adds	r1, #32
 8002bcc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002bd0:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 8002bd4:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 8002bd8:	edd0 7a00 	vldr	s15, [r0]
 8002bdc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8002be0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002be4:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 8002be8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002bec:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 8002bf0:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 8002bf4:	edd0 2a00 	vldr	s5, [r0]
 8002bf8:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8002bfc:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002c00:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 8002c04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c08:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8002c0c:	ed90 3a00 	vldr	s6, [r0]
 8002c10:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8002c14:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002c18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c1c:	ed90 4a00 	vldr	s8, [r0]
 8002c20:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8002c24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c28:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002c2c:	edd0 4a00 	vldr	s9, [r0]
 8002c30:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8002c34:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c38:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002c3c:	ed90 5a00 	vldr	s10, [r0]
 8002c40:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8002c44:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c48:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002c4c:	edd0 5a00 	vldr	s11, [r0]
 8002c50:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8002c54:	42a2      	cmp	r2, r4
 8002c56:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c5a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002c5e:	ed90 6a00 	vldr	s12, [r0]
 8002c62:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c6a:	d1a9      	bne.n	8002bc0 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8002c6c:	9a08      	ldr	r2, [sp, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c72:	4572      	cmp	r2, lr
 8002c74:	f4bf af54 	bcs.w	8002b20 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002c78:	7819      	ldrb	r1, [r3, #0]
 8002c7a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002c7e:	edd1 7a00 	vldr	s15, [r1]
 8002c82:	4611      	mov	r1, r2
 8002c84:	ecf1 6a01 	vldmia	r1!, {s13}
 8002c88:	458a      	cmp	sl, r1
 8002c8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002c8e:	d963      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002c90:	7859      	ldrb	r1, [r3, #1]
 8002c92:	edd2 6a01 	vldr	s13, [r2, #4]
 8002c96:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002c9a:	edd1 7a00 	vldr	s15, [r1]
 8002c9e:	f102 0108 	add.w	r1, r2, #8
 8002ca2:	458a      	cmp	sl, r1
 8002ca4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ca8:	d956      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002caa:	7899      	ldrb	r1, [r3, #2]
 8002cac:	edd2 6a02 	vldr	s13, [r2, #8]
 8002cb0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002cb4:	edd1 7a00 	vldr	s15, [r1]
 8002cb8:	f102 010c 	add.w	r1, r2, #12
 8002cbc:	458a      	cmp	sl, r1
 8002cbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cc2:	d949      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cc4:	78d9      	ldrb	r1, [r3, #3]
 8002cc6:	edd2 6a03 	vldr	s13, [r2, #12]
 8002cca:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002cce:	edd1 7a00 	vldr	s15, [r1]
 8002cd2:	f102 0110 	add.w	r1, r2, #16
 8002cd6:	458a      	cmp	sl, r1
 8002cd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cdc:	d93c      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cde:	7919      	ldrb	r1, [r3, #4]
 8002ce0:	edd2 6a04 	vldr	s13, [r2, #16]
 8002ce4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002ce8:	edd1 7a00 	vldr	s15, [r1]
 8002cec:	f102 0114 	add.w	r1, r2, #20
 8002cf0:	458a      	cmp	sl, r1
 8002cf2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cf6:	d92f      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cf8:	7959      	ldrb	r1, [r3, #5]
 8002cfa:	edd2 6a05 	vldr	s13, [r2, #20]
 8002cfe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d02:	edd1 7a00 	vldr	s15, [r1]
 8002d06:	f102 0118 	add.w	r1, r2, #24
 8002d0a:	458a      	cmp	sl, r1
 8002d0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d10:	d922      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002d12:	7999      	ldrb	r1, [r3, #6]
 8002d14:	edd2 6a06 	vldr	s13, [r2, #24]
 8002d18:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d1c:	edd1 7a00 	vldr	s15, [r1]
 8002d20:	f102 011c 	add.w	r1, r2, #28
 8002d24:	458a      	cmp	sl, r1
 8002d26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d2a:	d915      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002d2c:	79d9      	ldrb	r1, [r3, #7]
 8002d2e:	edd2 6a07 	vldr	s13, [r2, #28]
 8002d32:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d36:	edd1 7a00 	vldr	s15, [r1]
 8002d3a:	f102 0120 	add.w	r1, r2, #32
 8002d3e:	458a      	cmp	sl, r1
 8002d40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d44:	d908      	bls.n	8002d58 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002d46:	7a19      	ldrb	r1, [r3, #8]
 8002d48:	edd2 7a08 	vldr	s15, [r2, #32]
 8002d4c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d50:	edd1 6a00 	vldr	s13, [r1]
 8002d54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d58:	9901      	ldr	r1, [sp, #4]
 8002d5a:	1a8a      	subs	r2, r1, r2
 8002d5c:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8002d60:	1c53      	adds	r3, r2, #1
 8002d62:	e6dd      	b.n	8002b20 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002d64:	3ffffff8 	.word	0x3ffffff8
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	eeb0 7a63 	vmov.f32	s14, s7
 8002d70:	465a      	mov	r2, fp
 8002d72:	461f      	mov	r7, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d7a:	ecf0 7a01 	vldmia	r0!, {s15}
 8002d7e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d82:	edd1 6a00 	vldr	s13, [r1]
 8002d86:	9900      	ldr	r1, [sp, #0]
 8002d88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d8c:	4288      	cmp	r0, r1
 8002d8e:	f200 80f7 	bhi.w	8002f80 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8002d92:	9904      	ldr	r1, [sp, #16]
 8002d94:	f103 0411 	add.w	r4, r3, #17
 8002d98:	3309      	adds	r3, #9
 8002d9a:	1a8e      	subs	r6, r1, r2
 8002d9c:	3224      	adds	r2, #36	; 0x24
 8002d9e:	0976      	lsrs	r6, r6, #5
 8002da0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002da4:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8002da8:	3308      	adds	r3, #8
 8002daa:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 8002dae:	3220      	adds	r2, #32
 8002db0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002db4:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 8002db8:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8002dbc:	edd1 7a00 	vldr	s15, [r1]
 8002dc0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002dc4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002dc8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8002dcc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002dd0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8002dd4:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8002dd8:	edd1 2a00 	vldr	s5, [r1]
 8002ddc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8002de0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002de4:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 8002de8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002dec:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8002df0:	ed91 3a00 	vldr	s6, [r1]
 8002df4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8002df8:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002dfc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e00:	ed91 4a00 	vldr	s8, [r1]
 8002e04:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8002e08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002e10:	edd1 4a00 	vldr	s9, [r1]
 8002e14:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8002e18:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002e20:	ed91 5a00 	vldr	s10, [r1]
 8002e24:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8002e28:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002e30:	edd1 5a00 	vldr	s11, [r1]
 8002e34:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e3e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002e42:	ed91 6a00 	vldr	s12, [r1]
 8002e46:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4e:	d1a9      	bne.n	8002da4 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8002e50:	3601      	adds	r6, #1
 8002e52:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8002e56:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8002e5a:	4550      	cmp	r0, sl
 8002e5c:	f4bf ae60 	bcs.w	8002b20 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e66:	edd2 7a00 	vldr	s15, [r2]
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	ecf2 6a01 	vldmia	r2!, {s13}
 8002e70:	4592      	cmp	sl, r2
 8002e72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e76:	d963      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002e78:	785a      	ldrb	r2, [r3, #1]
 8002e7a:	edd0 6a01 	vldr	s13, [r0, #4]
 8002e7e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e82:	edd2 7a00 	vldr	s15, [r2]
 8002e86:	f100 0208 	add.w	r2, r0, #8
 8002e8a:	4592      	cmp	sl, r2
 8002e8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e90:	d956      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002e92:	789a      	ldrb	r2, [r3, #2]
 8002e94:	edd0 6a02 	vldr	s13, [r0, #8]
 8002e98:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e9c:	edd2 7a00 	vldr	s15, [r2]
 8002ea0:	f100 020c 	add.w	r2, r0, #12
 8002ea4:	4592      	cmp	sl, r2
 8002ea6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002eaa:	d949      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002eac:	78da      	ldrb	r2, [r3, #3]
 8002eae:	edd0 6a03 	vldr	s13, [r0, #12]
 8002eb2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002eb6:	edd2 7a00 	vldr	s15, [r2]
 8002eba:	f100 0210 	add.w	r2, r0, #16
 8002ebe:	4592      	cmp	sl, r2
 8002ec0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ec4:	d93c      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002ec6:	791a      	ldrb	r2, [r3, #4]
 8002ec8:	edd0 6a04 	vldr	s13, [r0, #16]
 8002ecc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002ed0:	edd2 7a00 	vldr	s15, [r2]
 8002ed4:	f100 0214 	add.w	r2, r0, #20
 8002ed8:	4592      	cmp	sl, r2
 8002eda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ede:	d92f      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002ee0:	795a      	ldrb	r2, [r3, #5]
 8002ee2:	edd0 6a05 	vldr	s13, [r0, #20]
 8002ee6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002eea:	edd2 7a00 	vldr	s15, [r2]
 8002eee:	f100 0218 	add.w	r2, r0, #24
 8002ef2:	4596      	cmp	lr, r2
 8002ef4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ef8:	d922      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002efa:	799a      	ldrb	r2, [r3, #6]
 8002efc:	edd0 6a06 	vldr	s13, [r0, #24]
 8002f00:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002f04:	edd2 7a00 	vldr	s15, [r2]
 8002f08:	f100 021c 	add.w	r2, r0, #28
 8002f0c:	4596      	cmp	lr, r2
 8002f0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f12:	d915      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002f14:	79da      	ldrb	r2, [r3, #7]
 8002f16:	edd0 6a07 	vldr	s13, [r0, #28]
 8002f1a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002f1e:	edd2 7a00 	vldr	s15, [r2]
 8002f22:	f100 0220 	add.w	r2, r0, #32
 8002f26:	4596      	cmp	lr, r2
 8002f28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f2c:	d908      	bls.n	8002f40 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002f2e:	7a1a      	ldrb	r2, [r3, #8]
 8002f30:	edd0 7a08 	vldr	s15, [r0, #32]
 8002f34:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002f38:	edd2 6a00 	vldr	s13, [r2]
 8002f3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f40:	9a01      	ldr	r2, [sp, #4]
 8002f42:	1a10      	subs	r0, r2, r0
 8002f44:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	e5e9      	b.n	8002b20 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002f4c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f50:	eddb 7a00 	vldr	s15, [fp]
 8002f54:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002f58:	9a07      	ldr	r2, [sp, #28]
 8002f5a:	ed91 7a00 	vldr	s14, [r1]
 8002f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f66:	ecf2 7a01 	vldmia	r2!, {s15}
 8002f6a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002f6e:	edd1 6a00 	vldr	s13, [r1]
 8002f72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f76:	e6fc      	b.n	8002d72 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8002f78:	eeb0 7a63 	vmov.f32	s14, s7
 8002f7c:	465a      	mov	r2, fp
 8002f7e:	e7f0      	b.n	8002f62 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8002f80:	463b      	mov	r3, r7
 8002f82:	e76a      	b.n	8002e5a <forward_lite_dense_if32of32wf32_lut8+0x412>
 8002f84:	465a      	mov	r2, fp
 8002f86:	e674      	b.n	8002c72 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8002f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f8a:	1acb      	subs	r3, r1, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002f90:	ed92 7a00 	vldr	s14, [r2]
 8002f94:	ecf0 7a01 	vldmia	r0!, {s15}
 8002f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f9c:	ece2 7a01 	vstmia	r2!, {s15}
 8002fa0:	4291      	cmp	r1, r2
 8002fa2:	d1f5      	bne.n	8002f90 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8002fa4:	e7f2      	b.n	8002f8c <forward_lite_dense_if32of32wf32_lut8+0x544>
 8002fa6:	bf00      	nop

08002fa8 <st_int8_copy>:
 8002fa8:	4288      	cmp	r0, r1
 8002faa:	d010      	beq.n	8002fce <st_int8_copy+0x26>
 8002fac:	b17a      	cbz	r2, 8002fce <st_int8_copy+0x26>
 8002fae:	4288      	cmp	r0, r1
 8002fb0:	eb00 0302 	add.w	r3, r0, r2
 8002fb4:	d20c      	bcs.n	8002fd0 <st_int8_copy+0x28>
 8002fb6:	428b      	cmp	r3, r1
 8002fb8:	d90a      	bls.n	8002fd0 <st_int8_copy+0x28>
 8002fba:	4283      	cmp	r3, r0
 8002fbc:	440a      	add	r2, r1
 8002fbe:	d906      	bls.n	8002fce <st_int8_copy+0x26>
 8002fc0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8002fc4:	4283      	cmp	r3, r0
 8002fc6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002fca:	d1f9      	bne.n	8002fc0 <st_int8_copy+0x18>
 8002fcc:	4770      	bx	lr
 8002fce:	4770      	bx	lr
 8002fd0:	078b      	lsls	r3, r1, #30
 8002fd2:	d102      	bne.n	8002fda <st_int8_copy+0x32>
 8002fd4:	e008      	b.n	8002fe8 <st_int8_copy+0x40>
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	d04c      	beq.n	8003074 <st_int8_copy+0xcc>
 8002fda:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	f801 3b01 	strb.w	r3, [r1], #1
 8002fe4:	078b      	lsls	r3, r1, #30
 8002fe6:	d1f6      	bne.n	8002fd6 <st_int8_copy+0x2e>
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fec:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8002ff0:	d05d      	beq.n	80030ae <st_int8_copy+0x106>
 8002ff2:	ea41 0300 	orr.w	r3, r1, r0
 8002ff6:	075b      	lsls	r3, r3, #29
 8002ff8:	d13d      	bne.n	8003076 <st_int8_copy+0xce>
 8002ffa:	f1be 0f01 	cmp.w	lr, #1
 8002ffe:	d03a      	beq.n	8003076 <st_int8_copy+0xce>
 8003000:	f100 0310 	add.w	r3, r0, #16
 8003004:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8003008:	f101 0c10 	add.w	ip, r1, #16
 800300c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8003010:	3310      	adds	r3, #16
 8003012:	f10c 0c10 	add.w	ip, ip, #16
 8003016:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800301a:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800301e:	4573      	cmp	r3, lr
 8003020:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8003024:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8003028:	d1f2      	bne.n	8003010 <st_int8_copy+0x68>
 800302a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800302e:	4421      	add	r1, r4
 8003030:	4420      	add	r0, r4
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	b16b      	cbz	r3, 8003054 <st_int8_copy+0xac>
 8003038:	6804      	ldr	r4, [r0, #0]
 800303a:	600c      	str	r4, [r1, #0]
 800303c:	1e5c      	subs	r4, r3, #1
 800303e:	d005      	beq.n	800304c <st_int8_copy+0xa4>
 8003040:	6845      	ldr	r5, [r0, #4]
 8003042:	2c01      	cmp	r4, #1
 8003044:	604d      	str	r5, [r1, #4]
 8003046:	d001      	beq.n	800304c <st_int8_copy+0xa4>
 8003048:	6884      	ldr	r4, [r0, #8]
 800304a:	608c      	str	r4, [r1, #8]
 800304c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003050:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003054:	b162      	cbz	r2, 8003070 <st_int8_copy+0xc8>
 8003056:	f990 3000 	ldrsb.w	r3, [r0]
 800305a:	3a01      	subs	r2, #1
 800305c:	700b      	strb	r3, [r1, #0]
 800305e:	d007      	beq.n	8003070 <st_int8_copy+0xc8>
 8003060:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8003064:	2a01      	cmp	r2, #1
 8003066:	704b      	strb	r3, [r1, #1]
 8003068:	d002      	beq.n	8003070 <st_int8_copy+0xc8>
 800306a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800306e:	708b      	strb	r3, [r1, #2]
 8003070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003074:	4770      	bx	lr
 8003076:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800307a:	460b      	mov	r3, r1
 800307c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8003080:	4684      	mov	ip, r0
 8003082:	f8dc 8000 	ldr.w	r8, [ip]
 8003086:	3310      	adds	r3, #16
 8003088:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800308c:	f10c 0c10 	add.w	ip, ip, #16
 8003090:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8003094:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8003098:	f843 8c10 	str.w	r8, [r3, #-16]
 800309c:	f843 7c0c 	str.w	r7, [r3, #-12]
 80030a0:	f843 6c08 	str.w	r6, [r3, #-8]
 80030a4:	f843 5c04 	str.w	r5, [r3, #-4]
 80030a8:	459e      	cmp	lr, r3
 80030aa:	d1ea      	bne.n	8003082 <st_int8_copy+0xda>
 80030ac:	e7bd      	b.n	800302a <st_int8_copy+0x82>
 80030ae:	0893      	lsrs	r3, r2, #2
 80030b0:	f002 0203 	and.w	r2, r2, #3
 80030b4:	e7bf      	b.n	8003036 <st_int8_copy+0x8e>
 80030b6:	bf00      	nop

080030b8 <ai_array_to_buffer_fmt>:
 80030b8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d053      	beq.n	8003168 <ai_array_to_buffer_fmt+0xb0>
 80030c0:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80030c4:	4a2b      	ldr	r2, [pc, #172]	; (8003174 <ai_array_to_buffer_fmt+0xbc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d010      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 80030ca:	dc21      	bgt.n	8003110 <ai_array_to_buffer_fmt+0x58>
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <ai_array_to_buffer_fmt+0xc0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00c      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 80030d2:	dd0f      	ble.n	80030f4 <ai_array_to_buffer_fmt+0x3c>
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <ai_array_to_buffer_fmt+0xc4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d008      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 80030da:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <ai_array_to_buffer_fmt+0xc8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf0c      	ite	eq
 80030e8:	4613      	moveq	r3, r2
 80030ea:	2340      	movne	r3, #64	; 0x40
 80030ec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80030f0:	4318      	orrs	r0, r3
 80030f2:	4770      	bx	lr
 80030f4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d0f7      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 80030fc:	dd2a      	ble.n	8003154 <ai_array_to_buffer_fmt+0x9c>
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <ai_array_to_buffer_fmt+0xcc>)
 8003100:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8003104:	4293      	cmp	r3, r2
 8003106:	bf0c      	ite	eq
 8003108:	4613      	moveq	r3, r2
 800310a:	2340      	movne	r3, #64	; 0x40
 800310c:	4318      	orrs	r0, r3
 800310e:	4770      	bx	lr
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <ai_array_to_buffer_fmt+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d0ea      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003116:	dd0f      	ble.n	8003138 <ai_array_to_buffer_fmt+0x80>
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <ai_array_to_buffer_fmt+0xd4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d0e6      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 800311e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8003122:	4293      	cmp	r3, r2
 8003124:	d0e2      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <ai_array_to_buffer_fmt+0xd8>)
 8003128:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800312c:	4293      	cmp	r3, r2
 800312e:	bf0c      	ite	eq
 8003130:	4613      	moveq	r3, r2
 8003132:	2340      	movne	r3, #64	; 0x40
 8003134:	4318      	orrs	r0, r3
 8003136:	4770      	bx	lr
 8003138:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800313c:	4293      	cmp	r3, r2
 800313e:	d0d5      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003140:	3207      	adds	r2, #7
 8003142:	4293      	cmp	r3, r2
 8003144:	d0d2      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003146:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800314a:	4293      	cmp	r3, r2
 800314c:	bf0c      	ite	eq
 800314e:	4613      	moveq	r3, r2
 8003150:	2340      	movne	r3, #64	; 0x40
 8003152:	e7cb      	b.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003154:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003158:	4293      	cmp	r3, r2
 800315a:	d0c7      	beq.n	80030ec <ai_array_to_buffer_fmt+0x34>
 800315c:	3280      	adds	r2, #128	; 0x80
 800315e:	4293      	cmp	r3, r2
 8003160:	bf0c      	ite	eq
 8003162:	4613      	moveq	r3, r2
 8003164:	2340      	movne	r3, #64	; 0x40
 8003166:	e7c1      	b.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <ai_array_to_buffer_fmt+0xdc>)
 800316a:	4003      	ands	r3, r0
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	e7bc      	b.n	80030ec <ai_array_to_buffer_fmt+0x34>
 8003172:	bf00      	nop
 8003174:	00840040 	.word	0x00840040
 8003178:	00040840 	.word	0x00040840
 800317c:	00041040 	.word	0x00041040
 8003180:	0004084f 	.word	0x0004084f
 8003184:	00040447 	.word	0x00040447
 8003188:	00840840 	.word	0x00840840
 800318c:	00841040 	.word	0x00841040
 8003190:	0084084f 	.word	0x0084084f
 8003194:	00803fff 	.word	0x00803fff

08003198 <ai_array_get_data_byte_size>:
 8003198:	b169      	cbz	r1, 80031b6 <ai_array_get_data_byte_size+0x1e>
 800319a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800319e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80031a2:	fb03 f101 	mul.w	r1, r3, r1
 80031a6:	1dcb      	adds	r3, r1, #7
 80031a8:	f023 0307 	bic.w	r3, r3, #7
 80031ac:	fa23 f000 	lsr.w	r0, r3, r0
 80031b0:	3007      	adds	r0, #7
 80031b2:	08c0      	lsrs	r0, r0, #3
 80031b4:	4770      	bx	lr
 80031b6:	4608      	mov	r0, r1
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop

080031bc <ai_version_get>:
 80031bc:	0212      	lsls	r2, r2, #8
 80031be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031c2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80031c6:	4770      	bx	lr

080031c8 <get_tensor_byte_size>:
 80031c8:	b430      	push	{r4, r5}
 80031ca:	6985      	ldr	r5, [r0, #24]
 80031cc:	68c4      	ldr	r4, [r0, #12]
 80031ce:	6941      	ldr	r1, [r0, #20]
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <get_tensor_byte_size+0x24>)
 80031d2:	6828      	ldr	r0, [r5, #0]
 80031d4:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <get_tensor_byte_size+0x28>)
 80031d6:	4003      	ands	r3, r0
 80031d8:	68c9      	ldr	r1, [r1, #12]
 80031da:	68e0      	ldr	r0, [r4, #12]
 80031dc:	4293      	cmp	r3, r2
 80031de:	fb01 f000 	mul.w	r0, r1, r0
 80031e2:	d101      	bne.n	80031e8 <get_tensor_byte_size+0x20>
 80031e4:	3007      	adds	r0, #7
 80031e6:	08c0      	lsrs	r0, r0, #3
 80031e8:	bc30      	pop	{r4, r5}
 80031ea:	4770      	bx	lr
 80031ec:	017fffff 	.word	0x017fffff
 80031f0:	000400c0 	.word	0x000400c0

080031f4 <malloc>:
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <malloc+0xc>)
 80031f6:	4601      	mov	r1, r0
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	f000 b823 	b.w	8003244 <_malloc_r>
 80031fe:	bf00      	nop
 8003200:	24000af8 	.word	0x24000af8

08003204 <sbrk_aligned>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	4e0e      	ldr	r6, [pc, #56]	; (8003240 <sbrk_aligned+0x3c>)
 8003208:	460c      	mov	r4, r1
 800320a:	6831      	ldr	r1, [r6, #0]
 800320c:	4605      	mov	r5, r0
 800320e:	b911      	cbnz	r1, 8003216 <sbrk_aligned+0x12>
 8003210:	f000 ff28 	bl	8004064 <_sbrk_r>
 8003214:	6030      	str	r0, [r6, #0]
 8003216:	4621      	mov	r1, r4
 8003218:	4628      	mov	r0, r5
 800321a:	f000 ff23 	bl	8004064 <_sbrk_r>
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	d00a      	beq.n	8003238 <sbrk_aligned+0x34>
 8003222:	1cc4      	adds	r4, r0, #3
 8003224:	f024 0403 	bic.w	r4, r4, #3
 8003228:	42a0      	cmp	r0, r4
 800322a:	d007      	beq.n	800323c <sbrk_aligned+0x38>
 800322c:	1a21      	subs	r1, r4, r0
 800322e:	4628      	mov	r0, r5
 8003230:	f000 ff18 	bl	8004064 <_sbrk_r>
 8003234:	3001      	adds	r0, #1
 8003236:	d101      	bne.n	800323c <sbrk_aligned+0x38>
 8003238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800323c:	4620      	mov	r0, r4
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	240015a8 	.word	0x240015a8

08003244 <_malloc_r>:
 8003244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003248:	1ccd      	adds	r5, r1, #3
 800324a:	f025 0503 	bic.w	r5, r5, #3
 800324e:	3508      	adds	r5, #8
 8003250:	2d0c      	cmp	r5, #12
 8003252:	bf38      	it	cc
 8003254:	250c      	movcc	r5, #12
 8003256:	2d00      	cmp	r5, #0
 8003258:	4607      	mov	r7, r0
 800325a:	db01      	blt.n	8003260 <_malloc_r+0x1c>
 800325c:	42a9      	cmp	r1, r5
 800325e:	d905      	bls.n	800326c <_malloc_r+0x28>
 8003260:	230c      	movs	r3, #12
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	2600      	movs	r6, #0
 8003266:	4630      	mov	r0, r6
 8003268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800326c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003340 <_malloc_r+0xfc>
 8003270:	f000 f868 	bl	8003344 <__malloc_lock>
 8003274:	f8d8 3000 	ldr.w	r3, [r8]
 8003278:	461c      	mov	r4, r3
 800327a:	bb5c      	cbnz	r4, 80032d4 <_malloc_r+0x90>
 800327c:	4629      	mov	r1, r5
 800327e:	4638      	mov	r0, r7
 8003280:	f7ff ffc0 	bl	8003204 <sbrk_aligned>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	4604      	mov	r4, r0
 8003288:	d155      	bne.n	8003336 <_malloc_r+0xf2>
 800328a:	f8d8 4000 	ldr.w	r4, [r8]
 800328e:	4626      	mov	r6, r4
 8003290:	2e00      	cmp	r6, #0
 8003292:	d145      	bne.n	8003320 <_malloc_r+0xdc>
 8003294:	2c00      	cmp	r4, #0
 8003296:	d048      	beq.n	800332a <_malloc_r+0xe6>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	4631      	mov	r1, r6
 800329c:	4638      	mov	r0, r7
 800329e:	eb04 0903 	add.w	r9, r4, r3
 80032a2:	f000 fedf 	bl	8004064 <_sbrk_r>
 80032a6:	4581      	cmp	r9, r0
 80032a8:	d13f      	bne.n	800332a <_malloc_r+0xe6>
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	1a6d      	subs	r5, r5, r1
 80032ae:	4629      	mov	r1, r5
 80032b0:	4638      	mov	r0, r7
 80032b2:	f7ff ffa7 	bl	8003204 <sbrk_aligned>
 80032b6:	3001      	adds	r0, #1
 80032b8:	d037      	beq.n	800332a <_malloc_r+0xe6>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	442b      	add	r3, r5
 80032be:	6023      	str	r3, [r4, #0]
 80032c0:	f8d8 3000 	ldr.w	r3, [r8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d038      	beq.n	800333a <_malloc_r+0xf6>
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	42a2      	cmp	r2, r4
 80032cc:	d12b      	bne.n	8003326 <_malloc_r+0xe2>
 80032ce:	2200      	movs	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	e00f      	b.n	80032f4 <_malloc_r+0xb0>
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	1b52      	subs	r2, r2, r5
 80032d8:	d41f      	bmi.n	800331a <_malloc_r+0xd6>
 80032da:	2a0b      	cmp	r2, #11
 80032dc:	d917      	bls.n	800330e <_malloc_r+0xca>
 80032de:	1961      	adds	r1, r4, r5
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	6025      	str	r5, [r4, #0]
 80032e4:	bf18      	it	ne
 80032e6:	6059      	strne	r1, [r3, #4]
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	bf08      	it	eq
 80032ec:	f8c8 1000 	streq.w	r1, [r8]
 80032f0:	5162      	str	r2, [r4, r5]
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	4638      	mov	r0, r7
 80032f6:	f104 060b 	add.w	r6, r4, #11
 80032fa:	f000 f829 	bl	8003350 <__malloc_unlock>
 80032fe:	f026 0607 	bic.w	r6, r6, #7
 8003302:	1d23      	adds	r3, r4, #4
 8003304:	1af2      	subs	r2, r6, r3
 8003306:	d0ae      	beq.n	8003266 <_malloc_r+0x22>
 8003308:	1b9b      	subs	r3, r3, r6
 800330a:	50a3      	str	r3, [r4, r2]
 800330c:	e7ab      	b.n	8003266 <_malloc_r+0x22>
 800330e:	42a3      	cmp	r3, r4
 8003310:	6862      	ldr	r2, [r4, #4]
 8003312:	d1dd      	bne.n	80032d0 <_malloc_r+0x8c>
 8003314:	f8c8 2000 	str.w	r2, [r8]
 8003318:	e7ec      	b.n	80032f4 <_malloc_r+0xb0>
 800331a:	4623      	mov	r3, r4
 800331c:	6864      	ldr	r4, [r4, #4]
 800331e:	e7ac      	b.n	800327a <_malloc_r+0x36>
 8003320:	4634      	mov	r4, r6
 8003322:	6876      	ldr	r6, [r6, #4]
 8003324:	e7b4      	b.n	8003290 <_malloc_r+0x4c>
 8003326:	4613      	mov	r3, r2
 8003328:	e7cc      	b.n	80032c4 <_malloc_r+0x80>
 800332a:	230c      	movs	r3, #12
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4638      	mov	r0, r7
 8003330:	f000 f80e 	bl	8003350 <__malloc_unlock>
 8003334:	e797      	b.n	8003266 <_malloc_r+0x22>
 8003336:	6025      	str	r5, [r4, #0]
 8003338:	e7dc      	b.n	80032f4 <_malloc_r+0xb0>
 800333a:	605b      	str	r3, [r3, #4]
 800333c:	deff      	udf	#255	; 0xff
 800333e:	bf00      	nop
 8003340:	240015a4 	.word	0x240015a4

08003344 <__malloc_lock>:
 8003344:	4801      	ldr	r0, [pc, #4]	; (800334c <__malloc_lock+0x8>)
 8003346:	f000 beda 	b.w	80040fe <__retarget_lock_acquire_recursive>
 800334a:	bf00      	nop
 800334c:	240016ec 	.word	0x240016ec

08003350 <__malloc_unlock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_unlock+0x8>)
 8003352:	f000 bed5 	b.w	8004100 <__retarget_lock_release_recursive>
 8003356:	bf00      	nop
 8003358:	240016ec 	.word	0x240016ec

0800335c <__cvt>:
 800335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335e:	ed2d 8b02 	vpush	{d8}
 8003362:	eeb0 8b40 	vmov.f64	d8, d0
 8003366:	b085      	sub	sp, #20
 8003368:	4617      	mov	r7, r2
 800336a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800336c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800336e:	ee18 2a90 	vmov	r2, s17
 8003372:	f025 0520 	bic.w	r5, r5, #32
 8003376:	2a00      	cmp	r2, #0
 8003378:	bfb6      	itet	lt
 800337a:	222d      	movlt	r2, #45	; 0x2d
 800337c:	2200      	movge	r2, #0
 800337e:	eeb1 8b40 	vneglt.f64	d8, d0
 8003382:	2d46      	cmp	r5, #70	; 0x46
 8003384:	460c      	mov	r4, r1
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	d004      	beq.n	8003394 <__cvt+0x38>
 800338a:	2d45      	cmp	r5, #69	; 0x45
 800338c:	d100      	bne.n	8003390 <__cvt+0x34>
 800338e:	3401      	adds	r4, #1
 8003390:	2102      	movs	r1, #2
 8003392:	e000      	b.n	8003396 <__cvt+0x3a>
 8003394:	2103      	movs	r1, #3
 8003396:	ab03      	add	r3, sp, #12
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	ab02      	add	r3, sp, #8
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4622      	mov	r2, r4
 80033a0:	4633      	mov	r3, r6
 80033a2:	eeb0 0b48 	vmov.f64	d0, d8
 80033a6:	f000 ff43 	bl	8004230 <_dtoa_r>
 80033aa:	2d47      	cmp	r5, #71	; 0x47
 80033ac:	d101      	bne.n	80033b2 <__cvt+0x56>
 80033ae:	07fb      	lsls	r3, r7, #31
 80033b0:	d51a      	bpl.n	80033e8 <__cvt+0x8c>
 80033b2:	2d46      	cmp	r5, #70	; 0x46
 80033b4:	eb00 0204 	add.w	r2, r0, r4
 80033b8:	d10c      	bne.n	80033d4 <__cvt+0x78>
 80033ba:	7803      	ldrb	r3, [r0, #0]
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d107      	bne.n	80033d0 <__cvt+0x74>
 80033c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80033c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c8:	bf1c      	itt	ne
 80033ca:	f1c4 0401 	rsbne	r4, r4, #1
 80033ce:	6034      	strne	r4, [r6, #0]
 80033d0:	6833      	ldr	r3, [r6, #0]
 80033d2:	441a      	add	r2, r3
 80033d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	bf08      	it	eq
 80033de:	9203      	streq	r2, [sp, #12]
 80033e0:	2130      	movs	r1, #48	; 0x30
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d307      	bcc.n	80033f8 <__cvt+0x9c>
 80033e8:	9b03      	ldr	r3, [sp, #12]
 80033ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ec:	1a1b      	subs	r3, r3, r0
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	b005      	add	sp, #20
 80033f2:	ecbd 8b02 	vpop	{d8}
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f8:	1c5c      	adds	r4, r3, #1
 80033fa:	9403      	str	r4, [sp, #12]
 80033fc:	7019      	strb	r1, [r3, #0]
 80033fe:	e7f0      	b.n	80033e2 <__cvt+0x86>

08003400 <__exponent>:
 8003400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003402:	4603      	mov	r3, r0
 8003404:	2900      	cmp	r1, #0
 8003406:	bfb8      	it	lt
 8003408:	4249      	neglt	r1, r1
 800340a:	f803 2b02 	strb.w	r2, [r3], #2
 800340e:	bfb4      	ite	lt
 8003410:	222d      	movlt	r2, #45	; 0x2d
 8003412:	222b      	movge	r2, #43	; 0x2b
 8003414:	2909      	cmp	r1, #9
 8003416:	7042      	strb	r2, [r0, #1]
 8003418:	dd2a      	ble.n	8003470 <__exponent+0x70>
 800341a:	f10d 0207 	add.w	r2, sp, #7
 800341e:	4617      	mov	r7, r2
 8003420:	260a      	movs	r6, #10
 8003422:	4694      	mov	ip, r2
 8003424:	fb91 f5f6 	sdiv	r5, r1, r6
 8003428:	fb06 1415 	mls	r4, r6, r5, r1
 800342c:	3430      	adds	r4, #48	; 0x30
 800342e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003432:	460c      	mov	r4, r1
 8003434:	2c63      	cmp	r4, #99	; 0x63
 8003436:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800343a:	4629      	mov	r1, r5
 800343c:	dcf1      	bgt.n	8003422 <__exponent+0x22>
 800343e:	3130      	adds	r1, #48	; 0x30
 8003440:	f1ac 0402 	sub.w	r4, ip, #2
 8003444:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003448:	1c41      	adds	r1, r0, #1
 800344a:	4622      	mov	r2, r4
 800344c:	42ba      	cmp	r2, r7
 800344e:	d30a      	bcc.n	8003466 <__exponent+0x66>
 8003450:	f10d 0209 	add.w	r2, sp, #9
 8003454:	eba2 020c 	sub.w	r2, r2, ip
 8003458:	42bc      	cmp	r4, r7
 800345a:	bf88      	it	hi
 800345c:	2200      	movhi	r2, #0
 800345e:	4413      	add	r3, r2
 8003460:	1a18      	subs	r0, r3, r0
 8003462:	b003      	add	sp, #12
 8003464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003466:	f812 5b01 	ldrb.w	r5, [r2], #1
 800346a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800346e:	e7ed      	b.n	800344c <__exponent+0x4c>
 8003470:	2330      	movs	r3, #48	; 0x30
 8003472:	3130      	adds	r1, #48	; 0x30
 8003474:	7083      	strb	r3, [r0, #2]
 8003476:	70c1      	strb	r1, [r0, #3]
 8003478:	1d03      	adds	r3, r0, #4
 800347a:	e7f1      	b.n	8003460 <__exponent+0x60>
 800347c:	0000      	movs	r0, r0
	...

08003480 <_printf_float>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	b08b      	sub	sp, #44	; 0x2c
 8003486:	460c      	mov	r4, r1
 8003488:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800348c:	4616      	mov	r6, r2
 800348e:	461f      	mov	r7, r3
 8003490:	4605      	mov	r5, r0
 8003492:	f000 fdaf 	bl	8003ff4 <_localeconv_r>
 8003496:	f8d0 b000 	ldr.w	fp, [r0]
 800349a:	4658      	mov	r0, fp
 800349c:	f7fc ff88 	bl	80003b0 <strlen>
 80034a0:	2300      	movs	r3, #0
 80034a2:	9308      	str	r3, [sp, #32]
 80034a4:	f8d8 3000 	ldr.w	r3, [r8]
 80034a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	3307      	adds	r3, #7
 80034b0:	f023 0307 	bic.w	r3, r3, #7
 80034b4:	f103 0108 	add.w	r1, r3, #8
 80034b8:	f8c8 1000 	str.w	r1, [r8]
 80034bc:	ed93 0b00 	vldr	d0, [r3]
 80034c0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003720 <_printf_float+0x2a0>
 80034c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80034c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80034d4:	4682      	mov	sl, r0
 80034d6:	dd24      	ble.n	8003522 <_printf_float+0xa2>
 80034d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d502      	bpl.n	80034e8 <_printf_float+0x68>
 80034e2:	232d      	movs	r3, #45	; 0x2d
 80034e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e8:	498f      	ldr	r1, [pc, #572]	; (8003728 <_printf_float+0x2a8>)
 80034ea:	4b90      	ldr	r3, [pc, #576]	; (800372c <_printf_float+0x2ac>)
 80034ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034f0:	bf94      	ite	ls
 80034f2:	4688      	movls	r8, r1
 80034f4:	4698      	movhi	r8, r3
 80034f6:	2303      	movs	r3, #3
 80034f8:	6123      	str	r3, [r4, #16]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	2300      	movs	r3, #0
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	9700      	str	r7, [sp, #0]
 8003506:	4633      	mov	r3, r6
 8003508:	aa09      	add	r2, sp, #36	; 0x24
 800350a:	4621      	mov	r1, r4
 800350c:	4628      	mov	r0, r5
 800350e:	f000 f9d1 	bl	80038b4 <_printf_common>
 8003512:	3001      	adds	r0, #1
 8003514:	f040 808a 	bne.w	800362c <_printf_float+0x1ac>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800351c:	b00b      	add	sp, #44	; 0x2c
 800351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003522:	eeb4 0b40 	vcmp.f64	d0, d0
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	d709      	bvc.n	8003540 <_printf_float+0xc0>
 800352c:	ee10 3a90 	vmov	r3, s1
 8003530:	2b00      	cmp	r3, #0
 8003532:	bfbc      	itt	lt
 8003534:	232d      	movlt	r3, #45	; 0x2d
 8003536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800353a:	497d      	ldr	r1, [pc, #500]	; (8003730 <_printf_float+0x2b0>)
 800353c:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <_printf_float+0x2b4>)
 800353e:	e7d5      	b.n	80034ec <_printf_float+0x6c>
 8003540:	6863      	ldr	r3, [r4, #4]
 8003542:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003546:	9104      	str	r1, [sp, #16]
 8003548:	1c59      	adds	r1, r3, #1
 800354a:	d13c      	bne.n	80035c6 <_printf_float+0x146>
 800354c:	2306      	movs	r3, #6
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	2300      	movs	r3, #0
 8003552:	9303      	str	r3, [sp, #12]
 8003554:	ab08      	add	r3, sp, #32
 8003556:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800355a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800355e:	ab07      	add	r3, sp, #28
 8003560:	6861      	ldr	r1, [r4, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	f10d 031b 	add.w	r3, sp, #27
 800356a:	4628      	mov	r0, r5
 800356c:	f7ff fef6 	bl	800335c <__cvt>
 8003570:	9b04      	ldr	r3, [sp, #16]
 8003572:	9907      	ldr	r1, [sp, #28]
 8003574:	2b47      	cmp	r3, #71	; 0x47
 8003576:	4680      	mov	r8, r0
 8003578:	d108      	bne.n	800358c <_printf_float+0x10c>
 800357a:	1cc8      	adds	r0, r1, #3
 800357c:	db02      	blt.n	8003584 <_printf_float+0x104>
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	4299      	cmp	r1, r3
 8003582:	dd41      	ble.n	8003608 <_printf_float+0x188>
 8003584:	f1a9 0902 	sub.w	r9, r9, #2
 8003588:	fa5f f989 	uxtb.w	r9, r9
 800358c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003590:	d820      	bhi.n	80035d4 <_printf_float+0x154>
 8003592:	3901      	subs	r1, #1
 8003594:	464a      	mov	r2, r9
 8003596:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800359a:	9107      	str	r1, [sp, #28]
 800359c:	f7ff ff30 	bl	8003400 <__exponent>
 80035a0:	9a08      	ldr	r2, [sp, #32]
 80035a2:	9004      	str	r0, [sp, #16]
 80035a4:	1813      	adds	r3, r2, r0
 80035a6:	2a01      	cmp	r2, #1
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	dc02      	bgt.n	80035b2 <_printf_float+0x132>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	07d2      	lsls	r2, r2, #31
 80035b0:	d501      	bpl.n	80035b6 <_printf_float+0x136>
 80035b2:	3301      	adds	r3, #1
 80035b4:	6123      	str	r3, [r4, #16]
 80035b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0a2      	beq.n	8003504 <_printf_float+0x84>
 80035be:	232d      	movs	r3, #45	; 0x2d
 80035c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c4:	e79e      	b.n	8003504 <_printf_float+0x84>
 80035c6:	9904      	ldr	r1, [sp, #16]
 80035c8:	2947      	cmp	r1, #71	; 0x47
 80035ca:	d1c1      	bne.n	8003550 <_printf_float+0xd0>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1bf      	bne.n	8003550 <_printf_float+0xd0>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e7bc      	b.n	800354e <_printf_float+0xce>
 80035d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035d8:	d118      	bne.n	800360c <_printf_float+0x18c>
 80035da:	2900      	cmp	r1, #0
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	dd0b      	ble.n	80035f8 <_printf_float+0x178>
 80035e0:	6121      	str	r1, [r4, #16]
 80035e2:	b913      	cbnz	r3, 80035ea <_printf_float+0x16a>
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	07d0      	lsls	r0, r2, #31
 80035e8:	d502      	bpl.n	80035f0 <_printf_float+0x170>
 80035ea:	3301      	adds	r3, #1
 80035ec:	440b      	add	r3, r1
 80035ee:	6123      	str	r3, [r4, #16]
 80035f0:	2300      	movs	r3, #0
 80035f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	e7de      	b.n	80035b6 <_printf_float+0x136>
 80035f8:	b913      	cbnz	r3, 8003600 <_printf_float+0x180>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	07d2      	lsls	r2, r2, #31
 80035fe:	d501      	bpl.n	8003604 <_printf_float+0x184>
 8003600:	3302      	adds	r3, #2
 8003602:	e7f4      	b.n	80035ee <_printf_float+0x16e>
 8003604:	2301      	movs	r3, #1
 8003606:	e7f2      	b.n	80035ee <_printf_float+0x16e>
 8003608:	f04f 0967 	mov.w	r9, #103	; 0x67
 800360c:	9b08      	ldr	r3, [sp, #32]
 800360e:	4299      	cmp	r1, r3
 8003610:	db05      	blt.n	800361e <_printf_float+0x19e>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	6121      	str	r1, [r4, #16]
 8003616:	07d8      	lsls	r0, r3, #31
 8003618:	d5ea      	bpl.n	80035f0 <_printf_float+0x170>
 800361a:	1c4b      	adds	r3, r1, #1
 800361c:	e7e7      	b.n	80035ee <_printf_float+0x16e>
 800361e:	2900      	cmp	r1, #0
 8003620:	bfd4      	ite	le
 8003622:	f1c1 0202 	rsble	r2, r1, #2
 8003626:	2201      	movgt	r2, #1
 8003628:	4413      	add	r3, r2
 800362a:	e7e0      	b.n	80035ee <_printf_float+0x16e>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	055a      	lsls	r2, r3, #21
 8003630:	d407      	bmi.n	8003642 <_printf_float+0x1c2>
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	4642      	mov	r2, r8
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d12a      	bne.n	8003696 <_printf_float+0x216>
 8003640:	e76a      	b.n	8003518 <_printf_float+0x98>
 8003642:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003646:	f240 80e0 	bls.w	800380a <_printf_float+0x38a>
 800364a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800364e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	d133      	bne.n	80036c0 <_printf_float+0x240>
 8003658:	4a37      	ldr	r2, [pc, #220]	; (8003738 <_printf_float+0x2b8>)
 800365a:	2301      	movs	r3, #1
 800365c:	4631      	mov	r1, r6
 800365e:	4628      	mov	r0, r5
 8003660:	47b8      	blx	r7
 8003662:	3001      	adds	r0, #1
 8003664:	f43f af58 	beq.w	8003518 <_printf_float+0x98>
 8003668:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800366c:	429a      	cmp	r2, r3
 800366e:	db02      	blt.n	8003676 <_printf_float+0x1f6>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	07d8      	lsls	r0, r3, #31
 8003674:	d50f      	bpl.n	8003696 <_printf_float+0x216>
 8003676:	4653      	mov	r3, sl
 8003678:	465a      	mov	r2, fp
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f af49 	beq.w	8003518 <_printf_float+0x98>
 8003686:	f04f 0800 	mov.w	r8, #0
 800368a:	f104 091a 	add.w	r9, r4, #26
 800368e:	9b08      	ldr	r3, [sp, #32]
 8003690:	3b01      	subs	r3, #1
 8003692:	4543      	cmp	r3, r8
 8003694:	dc09      	bgt.n	80036aa <_printf_float+0x22a>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	079b      	lsls	r3, r3, #30
 800369a:	f100 8106 	bmi.w	80038aa <_printf_float+0x42a>
 800369e:	68e0      	ldr	r0, [r4, #12]
 80036a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a2:	4298      	cmp	r0, r3
 80036a4:	bfb8      	it	lt
 80036a6:	4618      	movlt	r0, r3
 80036a8:	e738      	b.n	800351c <_printf_float+0x9c>
 80036aa:	2301      	movs	r3, #1
 80036ac:	464a      	mov	r2, r9
 80036ae:	4631      	mov	r1, r6
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b8      	blx	r7
 80036b4:	3001      	adds	r0, #1
 80036b6:	f43f af2f 	beq.w	8003518 <_printf_float+0x98>
 80036ba:	f108 0801 	add.w	r8, r8, #1
 80036be:	e7e6      	b.n	800368e <_printf_float+0x20e>
 80036c0:	9b07      	ldr	r3, [sp, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dc3a      	bgt.n	800373c <_printf_float+0x2bc>
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <_printf_float+0x2b8>)
 80036c8:	2301      	movs	r3, #1
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	f43f af21 	beq.w	8003518 <_printf_float+0x98>
 80036d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80036da:	4313      	orrs	r3, r2
 80036dc:	d102      	bne.n	80036e4 <_printf_float+0x264>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	07d9      	lsls	r1, r3, #31
 80036e2:	d5d8      	bpl.n	8003696 <_printf_float+0x216>
 80036e4:	4653      	mov	r3, sl
 80036e6:	465a      	mov	r2, fp
 80036e8:	4631      	mov	r1, r6
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b8      	blx	r7
 80036ee:	3001      	adds	r0, #1
 80036f0:	f43f af12 	beq.w	8003518 <_printf_float+0x98>
 80036f4:	f04f 0900 	mov.w	r9, #0
 80036f8:	f104 0a1a 	add.w	sl, r4, #26
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	425b      	negs	r3, r3
 8003700:	454b      	cmp	r3, r9
 8003702:	dc01      	bgt.n	8003708 <_printf_float+0x288>
 8003704:	9b08      	ldr	r3, [sp, #32]
 8003706:	e795      	b.n	8003634 <_printf_float+0x1b4>
 8003708:	2301      	movs	r3, #1
 800370a:	4652      	mov	r2, sl
 800370c:	4631      	mov	r1, r6
 800370e:	4628      	mov	r0, r5
 8003710:	47b8      	blx	r7
 8003712:	3001      	adds	r0, #1
 8003714:	f43f af00 	beq.w	8003518 <_printf_float+0x98>
 8003718:	f109 0901 	add.w	r9, r9, #1
 800371c:	e7ee      	b.n	80036fc <_printf_float+0x27c>
 800371e:	bf00      	nop
 8003720:	ffffffff 	.word	0xffffffff
 8003724:	7fefffff 	.word	0x7fefffff
 8003728:	08036e88 	.word	0x08036e88
 800372c:	08036e8c 	.word	0x08036e8c
 8003730:	08036e90 	.word	0x08036e90
 8003734:	08036e94 	.word	0x08036e94
 8003738:	08036e98 	.word	0x08036e98
 800373c:	9a08      	ldr	r2, [sp, #32]
 800373e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003740:	429a      	cmp	r2, r3
 8003742:	bfa8      	it	ge
 8003744:	461a      	movge	r2, r3
 8003746:	2a00      	cmp	r2, #0
 8003748:	4691      	mov	r9, r2
 800374a:	dc38      	bgt.n	80037be <_printf_float+0x33e>
 800374c:	2300      	movs	r3, #0
 800374e:	9305      	str	r3, [sp, #20]
 8003750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003754:	f104 021a 	add.w	r2, r4, #26
 8003758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800375a:	9905      	ldr	r1, [sp, #20]
 800375c:	9304      	str	r3, [sp, #16]
 800375e:	eba3 0309 	sub.w	r3, r3, r9
 8003762:	428b      	cmp	r3, r1
 8003764:	dc33      	bgt.n	80037ce <_printf_float+0x34e>
 8003766:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800376a:	429a      	cmp	r2, r3
 800376c:	db3c      	blt.n	80037e8 <_printf_float+0x368>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	07da      	lsls	r2, r3, #31
 8003772:	d439      	bmi.n	80037e8 <_printf_float+0x368>
 8003774:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8003778:	eba2 0903 	sub.w	r9, r2, r3
 800377c:	9b04      	ldr	r3, [sp, #16]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	4591      	cmp	r9, r2
 8003782:	bfa8      	it	ge
 8003784:	4691      	movge	r9, r2
 8003786:	f1b9 0f00 	cmp.w	r9, #0
 800378a:	dc35      	bgt.n	80037f8 <_printf_float+0x378>
 800378c:	f04f 0800 	mov.w	r8, #0
 8003790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003794:	f104 0a1a 	add.w	sl, r4, #26
 8003798:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	eba3 0309 	sub.w	r3, r3, r9
 80037a2:	4543      	cmp	r3, r8
 80037a4:	f77f af77 	ble.w	8003696 <_printf_float+0x216>
 80037a8:	2301      	movs	r3, #1
 80037aa:	4652      	mov	r2, sl
 80037ac:	4631      	mov	r1, r6
 80037ae:	4628      	mov	r0, r5
 80037b0:	47b8      	blx	r7
 80037b2:	3001      	adds	r0, #1
 80037b4:	f43f aeb0 	beq.w	8003518 <_printf_float+0x98>
 80037b8:	f108 0801 	add.w	r8, r8, #1
 80037bc:	e7ec      	b.n	8003798 <_printf_float+0x318>
 80037be:	4613      	mov	r3, r2
 80037c0:	4631      	mov	r1, r6
 80037c2:	4642      	mov	r2, r8
 80037c4:	4628      	mov	r0, r5
 80037c6:	47b8      	blx	r7
 80037c8:	3001      	adds	r0, #1
 80037ca:	d1bf      	bne.n	800374c <_printf_float+0x2cc>
 80037cc:	e6a4      	b.n	8003518 <_printf_float+0x98>
 80037ce:	2301      	movs	r3, #1
 80037d0:	4631      	mov	r1, r6
 80037d2:	4628      	mov	r0, r5
 80037d4:	9204      	str	r2, [sp, #16]
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	f43f ae9d 	beq.w	8003518 <_printf_float+0x98>
 80037de:	9b05      	ldr	r3, [sp, #20]
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	9305      	str	r3, [sp, #20]
 80037e6:	e7b7      	b.n	8003758 <_printf_float+0x2d8>
 80037e8:	4653      	mov	r3, sl
 80037ea:	465a      	mov	r2, fp
 80037ec:	4631      	mov	r1, r6
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	d1be      	bne.n	8003774 <_printf_float+0x2f4>
 80037f6:	e68f      	b.n	8003518 <_printf_float+0x98>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	464b      	mov	r3, r9
 80037fc:	4442      	add	r2, r8
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	d1c1      	bne.n	800378c <_printf_float+0x30c>
 8003808:	e686      	b.n	8003518 <_printf_float+0x98>
 800380a:	9a08      	ldr	r2, [sp, #32]
 800380c:	2a01      	cmp	r2, #1
 800380e:	dc01      	bgt.n	8003814 <_printf_float+0x394>
 8003810:	07db      	lsls	r3, r3, #31
 8003812:	d537      	bpl.n	8003884 <_printf_float+0x404>
 8003814:	2301      	movs	r3, #1
 8003816:	4642      	mov	r2, r8
 8003818:	4631      	mov	r1, r6
 800381a:	4628      	mov	r0, r5
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	f43f ae7a 	beq.w	8003518 <_printf_float+0x98>
 8003824:	4653      	mov	r3, sl
 8003826:	465a      	mov	r2, fp
 8003828:	4631      	mov	r1, r6
 800382a:	4628      	mov	r0, r5
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	f43f ae72 	beq.w	8003518 <_printf_float+0x98>
 8003834:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003838:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003840:	9b08      	ldr	r3, [sp, #32]
 8003842:	d01a      	beq.n	800387a <_printf_float+0x3fa>
 8003844:	3b01      	subs	r3, #1
 8003846:	f108 0201 	add.w	r2, r8, #1
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	d10e      	bne.n	8003872 <_printf_float+0x3f2>
 8003854:	e660      	b.n	8003518 <_printf_float+0x98>
 8003856:	2301      	movs	r3, #1
 8003858:	464a      	mov	r2, r9
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	47b8      	blx	r7
 8003860:	3001      	adds	r0, #1
 8003862:	f43f ae59 	beq.w	8003518 <_printf_float+0x98>
 8003866:	f108 0801 	add.w	r8, r8, #1
 800386a:	9b08      	ldr	r3, [sp, #32]
 800386c:	3b01      	subs	r3, #1
 800386e:	4543      	cmp	r3, r8
 8003870:	dcf1      	bgt.n	8003856 <_printf_float+0x3d6>
 8003872:	9b04      	ldr	r3, [sp, #16]
 8003874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003878:	e6dd      	b.n	8003636 <_printf_float+0x1b6>
 800387a:	f04f 0800 	mov.w	r8, #0
 800387e:	f104 091a 	add.w	r9, r4, #26
 8003882:	e7f2      	b.n	800386a <_printf_float+0x3ea>
 8003884:	2301      	movs	r3, #1
 8003886:	4642      	mov	r2, r8
 8003888:	e7df      	b.n	800384a <_printf_float+0x3ca>
 800388a:	2301      	movs	r3, #1
 800388c:	464a      	mov	r2, r9
 800388e:	4631      	mov	r1, r6
 8003890:	4628      	mov	r0, r5
 8003892:	47b8      	blx	r7
 8003894:	3001      	adds	r0, #1
 8003896:	f43f ae3f 	beq.w	8003518 <_printf_float+0x98>
 800389a:	f108 0801 	add.w	r8, r8, #1
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	4543      	cmp	r3, r8
 80038a6:	dcf0      	bgt.n	800388a <_printf_float+0x40a>
 80038a8:	e6f9      	b.n	800369e <_printf_float+0x21e>
 80038aa:	f04f 0800 	mov.w	r8, #0
 80038ae:	f104 0919 	add.w	r9, r4, #25
 80038b2:	e7f4      	b.n	800389e <_printf_float+0x41e>

080038b4 <_printf_common>:
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	4616      	mov	r6, r2
 80038ba:	4699      	mov	r9, r3
 80038bc:	688a      	ldr	r2, [r1, #8]
 80038be:	690b      	ldr	r3, [r1, #16]
 80038c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bfb8      	it	lt
 80038c8:	4613      	movlt	r3, r2
 80038ca:	6033      	str	r3, [r6, #0]
 80038cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038d0:	4607      	mov	r7, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	b10a      	cbz	r2, 80038da <_printf_common+0x26>
 80038d6:	3301      	adds	r3, #1
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	0699      	lsls	r1, r3, #26
 80038de:	bf42      	ittt	mi
 80038e0:	6833      	ldrmi	r3, [r6, #0]
 80038e2:	3302      	addmi	r3, #2
 80038e4:	6033      	strmi	r3, [r6, #0]
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	f015 0506 	ands.w	r5, r5, #6
 80038ec:	d106      	bne.n	80038fc <_printf_common+0x48>
 80038ee:	f104 0a19 	add.w	sl, r4, #25
 80038f2:	68e3      	ldr	r3, [r4, #12]
 80038f4:	6832      	ldr	r2, [r6, #0]
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	42ab      	cmp	r3, r5
 80038fa:	dc26      	bgt.n	800394a <_printf_common+0x96>
 80038fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003900:	1e13      	subs	r3, r2, #0
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	bf18      	it	ne
 8003906:	2301      	movne	r3, #1
 8003908:	0692      	lsls	r2, r2, #26
 800390a:	d42b      	bmi.n	8003964 <_printf_common+0xb0>
 800390c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003910:	4649      	mov	r1, r9
 8003912:	4638      	mov	r0, r7
 8003914:	47c0      	blx	r8
 8003916:	3001      	adds	r0, #1
 8003918:	d01e      	beq.n	8003958 <_printf_common+0xa4>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	6922      	ldr	r2, [r4, #16]
 800391e:	f003 0306 	and.w	r3, r3, #6
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf02      	ittt	eq
 8003926:	68e5      	ldreq	r5, [r4, #12]
 8003928:	6833      	ldreq	r3, [r6, #0]
 800392a:	1aed      	subeq	r5, r5, r3
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	bf0c      	ite	eq
 8003930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003934:	2500      	movne	r5, #0
 8003936:	4293      	cmp	r3, r2
 8003938:	bfc4      	itt	gt
 800393a:	1a9b      	subgt	r3, r3, r2
 800393c:	18ed      	addgt	r5, r5, r3
 800393e:	2600      	movs	r6, #0
 8003940:	341a      	adds	r4, #26
 8003942:	42b5      	cmp	r5, r6
 8003944:	d11a      	bne.n	800397c <_printf_common+0xc8>
 8003946:	2000      	movs	r0, #0
 8003948:	e008      	b.n	800395c <_printf_common+0xa8>
 800394a:	2301      	movs	r3, #1
 800394c:	4652      	mov	r2, sl
 800394e:	4649      	mov	r1, r9
 8003950:	4638      	mov	r0, r7
 8003952:	47c0      	blx	r8
 8003954:	3001      	adds	r0, #1
 8003956:	d103      	bne.n	8003960 <_printf_common+0xac>
 8003958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003960:	3501      	adds	r5, #1
 8003962:	e7c6      	b.n	80038f2 <_printf_common+0x3e>
 8003964:	18e1      	adds	r1, r4, r3
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	2030      	movs	r0, #48	; 0x30
 800396a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800396e:	4422      	add	r2, r4
 8003970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003978:	3302      	adds	r3, #2
 800397a:	e7c7      	b.n	800390c <_printf_common+0x58>
 800397c:	2301      	movs	r3, #1
 800397e:	4622      	mov	r2, r4
 8003980:	4649      	mov	r1, r9
 8003982:	4638      	mov	r0, r7
 8003984:	47c0      	blx	r8
 8003986:	3001      	adds	r0, #1
 8003988:	d0e6      	beq.n	8003958 <_printf_common+0xa4>
 800398a:	3601      	adds	r6, #1
 800398c:	e7d9      	b.n	8003942 <_printf_common+0x8e>
	...

08003990 <_printf_i>:
 8003990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	7e0f      	ldrb	r7, [r1, #24]
 8003996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003998:	2f78      	cmp	r7, #120	; 0x78
 800399a:	4691      	mov	r9, r2
 800399c:	4680      	mov	r8, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	469a      	mov	sl, r3
 80039a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039a6:	d807      	bhi.n	80039b8 <_printf_i+0x28>
 80039a8:	2f62      	cmp	r7, #98	; 0x62
 80039aa:	d80a      	bhi.n	80039c2 <_printf_i+0x32>
 80039ac:	2f00      	cmp	r7, #0
 80039ae:	f000 80d4 	beq.w	8003b5a <_printf_i+0x1ca>
 80039b2:	2f58      	cmp	r7, #88	; 0x58
 80039b4:	f000 80c0 	beq.w	8003b38 <_printf_i+0x1a8>
 80039b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039c0:	e03a      	b.n	8003a38 <_printf_i+0xa8>
 80039c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039c6:	2b15      	cmp	r3, #21
 80039c8:	d8f6      	bhi.n	80039b8 <_printf_i+0x28>
 80039ca:	a101      	add	r1, pc, #4	; (adr r1, 80039d0 <_printf_i+0x40>)
 80039cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d0:	08003a29 	.word	0x08003a29
 80039d4:	08003a3d 	.word	0x08003a3d
 80039d8:	080039b9 	.word	0x080039b9
 80039dc:	080039b9 	.word	0x080039b9
 80039e0:	080039b9 	.word	0x080039b9
 80039e4:	080039b9 	.word	0x080039b9
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	080039b9 	.word	0x080039b9
 80039f0:	080039b9 	.word	0x080039b9
 80039f4:	080039b9 	.word	0x080039b9
 80039f8:	080039b9 	.word	0x080039b9
 80039fc:	08003b41 	.word	0x08003b41
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	08003afb 	.word	0x08003afb
 8003a08:	080039b9 	.word	0x080039b9
 8003a0c:	080039b9 	.word	0x080039b9
 8003a10:	08003b63 	.word	0x08003b63
 8003a14:	080039b9 	.word	0x080039b9
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	080039b9 	.word	0x080039b9
 8003a20:	080039b9 	.word	0x080039b9
 8003a24:	08003b03 	.word	0x08003b03
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	1d1a      	adds	r2, r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	602a      	str	r2, [r5, #0]
 8003a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e09f      	b.n	8003b7c <_printf_i+0x1ec>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	0607      	lsls	r7, r0, #24
 8003a42:	f103 0104 	add.w	r1, r3, #4
 8003a46:	6029      	str	r1, [r5, #0]
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0xbe>
 8003a4a:	681e      	ldr	r6, [r3, #0]
 8003a4c:	e003      	b.n	8003a56 <_printf_i+0xc6>
 8003a4e:	0646      	lsls	r6, r0, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0xba>
 8003a52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	da03      	bge.n	8003a62 <_printf_i+0xd2>
 8003a5a:	232d      	movs	r3, #45	; 0x2d
 8003a5c:	4276      	negs	r6, r6
 8003a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a62:	485a      	ldr	r0, [pc, #360]	; (8003bcc <_printf_i+0x23c>)
 8003a64:	230a      	movs	r3, #10
 8003a66:	e012      	b.n	8003a8e <_printf_i+0xfe>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	6029      	str	r1, [r5, #0]
 8003a70:	0605      	lsls	r5, r0, #24
 8003a72:	d501      	bpl.n	8003a78 <_printf_i+0xe8>
 8003a74:	681e      	ldr	r6, [r3, #0]
 8003a76:	e002      	b.n	8003a7e <_printf_i+0xee>
 8003a78:	0641      	lsls	r1, r0, #25
 8003a7a:	d5fb      	bpl.n	8003a74 <_printf_i+0xe4>
 8003a7c:	881e      	ldrh	r6, [r3, #0]
 8003a7e:	4853      	ldr	r0, [pc, #332]	; (8003bcc <_printf_i+0x23c>)
 8003a80:	2f6f      	cmp	r7, #111	; 0x6f
 8003a82:	bf0c      	ite	eq
 8003a84:	2308      	moveq	r3, #8
 8003a86:	230a      	movne	r3, #10
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a8e:	6865      	ldr	r5, [r4, #4]
 8003a90:	60a5      	str	r5, [r4, #8]
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	bfa2      	ittt	ge
 8003a96:	6821      	ldrge	r1, [r4, #0]
 8003a98:	f021 0104 	bicge.w	r1, r1, #4
 8003a9c:	6021      	strge	r1, [r4, #0]
 8003a9e:	b90e      	cbnz	r6, 8003aa4 <_printf_i+0x114>
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	d04b      	beq.n	8003b3c <_printf_i+0x1ac>
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8003aae:	5dc7      	ldrb	r7, [r0, r7]
 8003ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ab4:	4637      	mov	r7, r6
 8003ab6:	42bb      	cmp	r3, r7
 8003ab8:	460e      	mov	r6, r1
 8003aba:	d9f4      	bls.n	8003aa6 <_printf_i+0x116>
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d10b      	bne.n	8003ad8 <_printf_i+0x148>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	07de      	lsls	r6, r3, #31
 8003ac4:	d508      	bpl.n	8003ad8 <_printf_i+0x148>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	6861      	ldr	r1, [r4, #4]
 8003aca:	4299      	cmp	r1, r3
 8003acc:	bfde      	ittt	le
 8003ace:	2330      	movle	r3, #48	; 0x30
 8003ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ad4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ad8:	1b52      	subs	r2, r2, r5
 8003ada:	6122      	str	r2, [r4, #16]
 8003adc:	f8cd a000 	str.w	sl, [sp]
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	aa03      	add	r2, sp, #12
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7ff fee4 	bl	80038b4 <_printf_common>
 8003aec:	3001      	adds	r0, #1
 8003aee:	d14a      	bne.n	8003b86 <_printf_i+0x1f6>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af4:	b004      	add	sp, #16
 8003af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	f043 0320 	orr.w	r3, r3, #32
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	4833      	ldr	r0, [pc, #204]	; (8003bd0 <_printf_i+0x240>)
 8003b04:	2778      	movs	r7, #120	; 0x78
 8003b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	6829      	ldr	r1, [r5, #0]
 8003b0e:	061f      	lsls	r7, r3, #24
 8003b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b14:	d402      	bmi.n	8003b1c <_printf_i+0x18c>
 8003b16:	065f      	lsls	r7, r3, #25
 8003b18:	bf48      	it	mi
 8003b1a:	b2b6      	uxthmi	r6, r6
 8003b1c:	07df      	lsls	r7, r3, #31
 8003b1e:	bf48      	it	mi
 8003b20:	f043 0320 	orrmi.w	r3, r3, #32
 8003b24:	6029      	str	r1, [r5, #0]
 8003b26:	bf48      	it	mi
 8003b28:	6023      	strmi	r3, [r4, #0]
 8003b2a:	b91e      	cbnz	r6, 8003b34 <_printf_i+0x1a4>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f023 0320 	bic.w	r3, r3, #32
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	2310      	movs	r3, #16
 8003b36:	e7a7      	b.n	8003a88 <_printf_i+0xf8>
 8003b38:	4824      	ldr	r0, [pc, #144]	; (8003bcc <_printf_i+0x23c>)
 8003b3a:	e7e4      	b.n	8003b06 <_printf_i+0x176>
 8003b3c:	4615      	mov	r5, r2
 8003b3e:	e7bd      	b.n	8003abc <_printf_i+0x12c>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	6826      	ldr	r6, [r4, #0]
 8003b44:	6961      	ldr	r1, [r4, #20]
 8003b46:	1d18      	adds	r0, r3, #4
 8003b48:	6028      	str	r0, [r5, #0]
 8003b4a:	0635      	lsls	r5, r6, #24
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	d501      	bpl.n	8003b54 <_printf_i+0x1c4>
 8003b50:	6019      	str	r1, [r3, #0]
 8003b52:	e002      	b.n	8003b5a <_printf_i+0x1ca>
 8003b54:	0670      	lsls	r0, r6, #25
 8003b56:	d5fb      	bpl.n	8003b50 <_printf_i+0x1c0>
 8003b58:	8019      	strh	r1, [r3, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	4615      	mov	r5, r2
 8003b60:	e7bc      	b.n	8003adc <_printf_i+0x14c>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	1d1a      	adds	r2, r3, #4
 8003b66:	602a      	str	r2, [r5, #0]
 8003b68:	681d      	ldr	r5, [r3, #0]
 8003b6a:	6862      	ldr	r2, [r4, #4]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fc fbce 	bl	8000310 <memchr>
 8003b74:	b108      	cbz	r0, 8003b7a <_printf_i+0x1ea>
 8003b76:	1b40      	subs	r0, r0, r5
 8003b78:	6060      	str	r0, [r4, #4]
 8003b7a:	6863      	ldr	r3, [r4, #4]
 8003b7c:	6123      	str	r3, [r4, #16]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b84:	e7aa      	b.n	8003adc <_printf_i+0x14c>
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	4640      	mov	r0, r8
 8003b8e:	47d0      	blx	sl
 8003b90:	3001      	adds	r0, #1
 8003b92:	d0ad      	beq.n	8003af0 <_printf_i+0x160>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	079b      	lsls	r3, r3, #30
 8003b98:	d413      	bmi.n	8003bc2 <_printf_i+0x232>
 8003b9a:	68e0      	ldr	r0, [r4, #12]
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	4298      	cmp	r0, r3
 8003ba0:	bfb8      	it	lt
 8003ba2:	4618      	movlt	r0, r3
 8003ba4:	e7a6      	b.n	8003af4 <_printf_i+0x164>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	4632      	mov	r2, r6
 8003baa:	4649      	mov	r1, r9
 8003bac:	4640      	mov	r0, r8
 8003bae:	47d0      	blx	sl
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d09d      	beq.n	8003af0 <_printf_i+0x160>
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	68e3      	ldr	r3, [r4, #12]
 8003bb8:	9903      	ldr	r1, [sp, #12]
 8003bba:	1a5b      	subs	r3, r3, r1
 8003bbc:	42ab      	cmp	r3, r5
 8003bbe:	dcf2      	bgt.n	8003ba6 <_printf_i+0x216>
 8003bc0:	e7eb      	b.n	8003b9a <_printf_i+0x20a>
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	f104 0619 	add.w	r6, r4, #25
 8003bc8:	e7f5      	b.n	8003bb6 <_printf_i+0x226>
 8003bca:	bf00      	nop
 8003bcc:	08036e9a 	.word	0x08036e9a
 8003bd0:	08036eab 	.word	0x08036eab

08003bd4 <std>:
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	e9c0 3300 	strd	r3, r3, [r0]
 8003bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003be2:	6083      	str	r3, [r0, #8]
 8003be4:	8181      	strh	r1, [r0, #12]
 8003be6:	6643      	str	r3, [r0, #100]	; 0x64
 8003be8:	81c2      	strh	r2, [r0, #14]
 8003bea:	6183      	str	r3, [r0, #24]
 8003bec:	4619      	mov	r1, r3
 8003bee:	2208      	movs	r2, #8
 8003bf0:	305c      	adds	r0, #92	; 0x5c
 8003bf2:	f000 f9f7 	bl	8003fe4 <memset>
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <std+0x58>)
 8003bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <std+0x5c>)
 8003bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <std+0x60>)
 8003c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <std+0x64>)
 8003c04:	6323      	str	r3, [r4, #48]	; 0x30
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <std+0x68>)
 8003c08:	6224      	str	r4, [r4, #32]
 8003c0a:	429c      	cmp	r4, r3
 8003c0c:	d006      	beq.n	8003c1c <std+0x48>
 8003c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c12:	4294      	cmp	r4, r2
 8003c14:	d002      	beq.n	8003c1c <std+0x48>
 8003c16:	33d0      	adds	r3, #208	; 0xd0
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	d105      	bne.n	8003c28 <std+0x54>
 8003c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c24:	f000 ba6a 	b.w	80040fc <__retarget_lock_init_recursive>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08003e35 	.word	0x08003e35
 8003c30:	08003e57 	.word	0x08003e57
 8003c34:	08003e8f 	.word	0x08003e8f
 8003c38:	08003eb3 	.word	0x08003eb3
 8003c3c:	240015ac 	.word	0x240015ac

08003c40 <stdio_exit_handler>:
 8003c40:	4a02      	ldr	r2, [pc, #8]	; (8003c4c <stdio_exit_handler+0xc>)
 8003c42:	4903      	ldr	r1, [pc, #12]	; (8003c50 <stdio_exit_handler+0x10>)
 8003c44:	4803      	ldr	r0, [pc, #12]	; (8003c54 <stdio_exit_handler+0x14>)
 8003c46:	f000 b869 	b.w	8003d1c <_fwalk_sglue>
 8003c4a:	bf00      	nop
 8003c4c:	24000aa0 	.word	0x24000aa0
 8003c50:	0800582d 	.word	0x0800582d
 8003c54:	24000aac 	.word	0x24000aac

08003c58 <cleanup_stdio>:
 8003c58:	6841      	ldr	r1, [r0, #4]
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <cleanup_stdio+0x34>)
 8003c5c:	4299      	cmp	r1, r3
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	4604      	mov	r4, r0
 8003c62:	d001      	beq.n	8003c68 <cleanup_stdio+0x10>
 8003c64:	f001 fde2 	bl	800582c <_fflush_r>
 8003c68:	68a1      	ldr	r1, [r4, #8]
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <cleanup_stdio+0x38>)
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	d002      	beq.n	8003c76 <cleanup_stdio+0x1e>
 8003c70:	4620      	mov	r0, r4
 8003c72:	f001 fddb 	bl	800582c <_fflush_r>
 8003c76:	68e1      	ldr	r1, [r4, #12]
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <cleanup_stdio+0x3c>)
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	d004      	beq.n	8003c88 <cleanup_stdio+0x30>
 8003c7e:	4620      	mov	r0, r4
 8003c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c84:	f001 bdd2 	b.w	800582c <_fflush_r>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	bf00      	nop
 8003c8c:	240015ac 	.word	0x240015ac
 8003c90:	24001614 	.word	0x24001614
 8003c94:	2400167c 	.word	0x2400167c

08003c98 <global_stdio_init.part.0>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <global_stdio_init.part.0+0x30>)
 8003c9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ccc <global_stdio_init.part.0+0x34>)
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <global_stdio_init.part.0+0x38>)
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	f7ff ff94 	bl	8003bd4 <std>
 8003cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2109      	movs	r1, #9
 8003cb4:	f7ff ff8e 	bl	8003bd4 <std>
 8003cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc2:	2112      	movs	r1, #18
 8003cc4:	f7ff bf86 	b.w	8003bd4 <std>
 8003cc8:	240016e4 	.word	0x240016e4
 8003ccc:	240015ac 	.word	0x240015ac
 8003cd0:	08003c41 	.word	0x08003c41

08003cd4 <__sfp_lock_acquire>:
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <__sfp_lock_acquire+0x8>)
 8003cd6:	f000 ba12 	b.w	80040fe <__retarget_lock_acquire_recursive>
 8003cda:	bf00      	nop
 8003cdc:	240016ed 	.word	0x240016ed

08003ce0 <__sfp_lock_release>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__sfp_lock_release+0x8>)
 8003ce2:	f000 ba0d 	b.w	8004100 <__retarget_lock_release_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	240016ed 	.word	0x240016ed

08003cec <__sinit>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4604      	mov	r4, r0
 8003cf0:	f7ff fff0 	bl	8003cd4 <__sfp_lock_acquire>
 8003cf4:	6a23      	ldr	r3, [r4, #32]
 8003cf6:	b11b      	cbz	r3, 8003d00 <__sinit+0x14>
 8003cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfc:	f7ff bff0 	b.w	8003ce0 <__sfp_lock_release>
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__sinit+0x28>)
 8003d02:	6223      	str	r3, [r4, #32]
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <__sinit+0x2c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f5      	bne.n	8003cf8 <__sinit+0xc>
 8003d0c:	f7ff ffc4 	bl	8003c98 <global_stdio_init.part.0>
 8003d10:	e7f2      	b.n	8003cf8 <__sinit+0xc>
 8003d12:	bf00      	nop
 8003d14:	08003c59 	.word	0x08003c59
 8003d18:	240016e4 	.word	0x240016e4

08003d1c <_fwalk_sglue>:
 8003d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d20:	4607      	mov	r7, r0
 8003d22:	4688      	mov	r8, r1
 8003d24:	4614      	mov	r4, r2
 8003d26:	2600      	movs	r6, #0
 8003d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d30:	d505      	bpl.n	8003d3e <_fwalk_sglue+0x22>
 8003d32:	6824      	ldr	r4, [r4, #0]
 8003d34:	2c00      	cmp	r4, #0
 8003d36:	d1f7      	bne.n	8003d28 <_fwalk_sglue+0xc>
 8003d38:	4630      	mov	r0, r6
 8003d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d3e:	89ab      	ldrh	r3, [r5, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d907      	bls.n	8003d54 <_fwalk_sglue+0x38>
 8003d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	d003      	beq.n	8003d54 <_fwalk_sglue+0x38>
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4638      	mov	r0, r7
 8003d50:	47c0      	blx	r8
 8003d52:	4306      	orrs	r6, r0
 8003d54:	3568      	adds	r5, #104	; 0x68
 8003d56:	e7e9      	b.n	8003d2c <_fwalk_sglue+0x10>

08003d58 <iprintf>:
 8003d58:	b40f      	push	{r0, r1, r2, r3}
 8003d5a:	b507      	push	{r0, r1, r2, lr}
 8003d5c:	4906      	ldr	r1, [pc, #24]	; (8003d78 <iprintf+0x20>)
 8003d5e:	ab04      	add	r3, sp, #16
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d66:	6881      	ldr	r1, [r0, #8]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	f001 fbbf 	bl	80054ec <_vfiprintf_r>
 8003d6e:	b003      	add	sp, #12
 8003d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d74:	b004      	add	sp, #16
 8003d76:	4770      	bx	lr
 8003d78:	24000af8 	.word	0x24000af8

08003d7c <_puts_r>:
 8003d7c:	6a03      	ldr	r3, [r0, #32]
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	6884      	ldr	r4, [r0, #8]
 8003d82:	4605      	mov	r5, r0
 8003d84:	460e      	mov	r6, r1
 8003d86:	b90b      	cbnz	r3, 8003d8c <_puts_r+0x10>
 8003d88:	f7ff ffb0 	bl	8003cec <__sinit>
 8003d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8e:	07db      	lsls	r3, r3, #31
 8003d90:	d405      	bmi.n	8003d9e <_puts_r+0x22>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	0598      	lsls	r0, r3, #22
 8003d96:	d402      	bmi.n	8003d9e <_puts_r+0x22>
 8003d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d9a:	f000 f9b0 	bl	80040fe <__retarget_lock_acquire_recursive>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	0719      	lsls	r1, r3, #28
 8003da2:	d513      	bpl.n	8003dcc <_puts_r+0x50>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	b18b      	cbz	r3, 8003dcc <_puts_r+0x50>
 8003da8:	3e01      	subs	r6, #1
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003db0:	3b01      	subs	r3, #1
 8003db2:	60a3      	str	r3, [r4, #8]
 8003db4:	b9e9      	cbnz	r1, 8003df2 <_puts_r+0x76>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da2e      	bge.n	8003e18 <_puts_r+0x9c>
 8003dba:	4622      	mov	r2, r4
 8003dbc:	210a      	movs	r1, #10
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 f87b 	bl	8003eba <__swbuf_r>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d007      	beq.n	8003dd8 <_puts_r+0x5c>
 8003dc8:	250a      	movs	r5, #10
 8003dca:	e007      	b.n	8003ddc <_puts_r+0x60>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f000 f8b0 	bl	8003f34 <__swsetup_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d0e7      	beq.n	8003da8 <_puts_r+0x2c>
 8003dd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dde:	07da      	lsls	r2, r3, #31
 8003de0:	d405      	bmi.n	8003dee <_puts_r+0x72>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	059b      	lsls	r3, r3, #22
 8003de6:	d402      	bmi.n	8003dee <_puts_r+0x72>
 8003de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dea:	f000 f989 	bl	8004100 <__retarget_lock_release_recursive>
 8003dee:	4628      	mov	r0, r5
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da04      	bge.n	8003e00 <_puts_r+0x84>
 8003df6:	69a2      	ldr	r2, [r4, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dc06      	bgt.n	8003e0a <_puts_r+0x8e>
 8003dfc:	290a      	cmp	r1, #10
 8003dfe:	d004      	beq.n	8003e0a <_puts_r+0x8e>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	6022      	str	r2, [r4, #0]
 8003e06:	7019      	strb	r1, [r3, #0]
 8003e08:	e7cf      	b.n	8003daa <_puts_r+0x2e>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f854 	bl	8003eba <__swbuf_r>
 8003e12:	3001      	adds	r0, #1
 8003e14:	d1c9      	bne.n	8003daa <_puts_r+0x2e>
 8003e16:	e7df      	b.n	8003dd8 <_puts_r+0x5c>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	250a      	movs	r5, #10
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	6022      	str	r2, [r4, #0]
 8003e20:	701d      	strb	r5, [r3, #0]
 8003e22:	e7db      	b.n	8003ddc <_puts_r+0x60>

08003e24 <puts>:
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <puts+0xc>)
 8003e26:	4601      	mov	r1, r0
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f7ff bfa7 	b.w	8003d7c <_puts_r>
 8003e2e:	bf00      	nop
 8003e30:	24000af8 	.word	0x24000af8

08003e34 <__sread>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	460c      	mov	r4, r1
 8003e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3c:	f000 f900 	bl	8004040 <_read_r>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	bfab      	itete	ge
 8003e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e46:	89a3      	ldrhlt	r3, [r4, #12]
 8003e48:	181b      	addge	r3, r3, r0
 8003e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e4e:	bfac      	ite	ge
 8003e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e52:	81a3      	strhlt	r3, [r4, #12]
 8003e54:	bd10      	pop	{r4, pc}

08003e56 <__swrite>:
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	461f      	mov	r7, r3
 8003e5c:	898b      	ldrh	r3, [r1, #12]
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	4605      	mov	r5, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	4616      	mov	r6, r2
 8003e66:	d505      	bpl.n	8003e74 <__swrite+0x1e>
 8003e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f000 f8d4 	bl	800401c <_lseek_r>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	4632      	mov	r2, r6
 8003e82:	463b      	mov	r3, r7
 8003e84:	4628      	mov	r0, r5
 8003e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	f000 b8fb 	b.w	8004084 <_write_r>

08003e8e <__sseek>:
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	460c      	mov	r4, r1
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 f8c1 	bl	800401c <_lseek_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	bf15      	itete	ne
 8003ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eaa:	81a3      	strheq	r3, [r4, #12]
 8003eac:	bf18      	it	ne
 8003eae:	81a3      	strhne	r3, [r4, #12]
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <__sclose>:
 8003eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb6:	f000 b8a1 	b.w	8003ffc <_close_r>

08003eba <__swbuf_r>:
 8003eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebc:	460e      	mov	r6, r1
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	b118      	cbz	r0, 8003ecc <__swbuf_r+0x12>
 8003ec4:	6a03      	ldr	r3, [r0, #32]
 8003ec6:	b90b      	cbnz	r3, 8003ecc <__swbuf_r+0x12>
 8003ec8:	f7ff ff10 	bl	8003cec <__sinit>
 8003ecc:	69a3      	ldr	r3, [r4, #24]
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	071a      	lsls	r2, r3, #28
 8003ed4:	d525      	bpl.n	8003f22 <__swbuf_r+0x68>
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	b31b      	cbz	r3, 8003f22 <__swbuf_r+0x68>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	1a98      	subs	r0, r3, r2
 8003ee0:	6963      	ldr	r3, [r4, #20]
 8003ee2:	b2f6      	uxtb	r6, r6
 8003ee4:	4283      	cmp	r3, r0
 8003ee6:	4637      	mov	r7, r6
 8003ee8:	dc04      	bgt.n	8003ef4 <__swbuf_r+0x3a>
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f001 fc9d 	bl	800582c <_fflush_r>
 8003ef2:	b9e0      	cbnz	r0, 8003f2e <__swbuf_r+0x74>
 8003ef4:	68a3      	ldr	r3, [r4, #8]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	701e      	strb	r6, [r3, #0]
 8003f02:	6962      	ldr	r2, [r4, #20]
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d004      	beq.n	8003f14 <__swbuf_r+0x5a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	07db      	lsls	r3, r3, #31
 8003f0e:	d506      	bpl.n	8003f1e <__swbuf_r+0x64>
 8003f10:	2e0a      	cmp	r6, #10
 8003f12:	d104      	bne.n	8003f1e <__swbuf_r+0x64>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f001 fc88 	bl	800582c <_fflush_r>
 8003f1c:	b938      	cbnz	r0, 8003f2e <__swbuf_r+0x74>
 8003f1e:	4638      	mov	r0, r7
 8003f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f22:	4621      	mov	r1, r4
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 f805 	bl	8003f34 <__swsetup_r>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0d5      	beq.n	8003eda <__swbuf_r+0x20>
 8003f2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f32:	e7f4      	b.n	8003f1e <__swbuf_r+0x64>

08003f34 <__swsetup_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <__swsetup_r+0xac>)
 8003f38:	4605      	mov	r5, r0
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	b118      	cbz	r0, 8003f48 <__swsetup_r+0x14>
 8003f40:	6a03      	ldr	r3, [r0, #32]
 8003f42:	b90b      	cbnz	r3, 8003f48 <__swsetup_r+0x14>
 8003f44:	f7ff fed2 	bl	8003cec <__sinit>
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f4e:	0718      	lsls	r0, r3, #28
 8003f50:	d422      	bmi.n	8003f98 <__swsetup_r+0x64>
 8003f52:	06d9      	lsls	r1, r3, #27
 8003f54:	d407      	bmi.n	8003f66 <__swsetup_r+0x32>
 8003f56:	2309      	movs	r3, #9
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f64:	e034      	b.n	8003fd0 <__swsetup_r+0x9c>
 8003f66:	0758      	lsls	r0, r3, #29
 8003f68:	d512      	bpl.n	8003f90 <__swsetup_r+0x5c>
 8003f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f6c:	b141      	cbz	r1, 8003f80 <__swsetup_r+0x4c>
 8003f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f72:	4299      	cmp	r1, r3
 8003f74:	d002      	beq.n	8003f7c <__swsetup_r+0x48>
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 fec6 	bl	8004d08 <_free_r>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6063      	str	r3, [r4, #4]
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	b94b      	cbnz	r3, 8003fb0 <__swsetup_r+0x7c>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa6:	d003      	beq.n	8003fb0 <__swsetup_r+0x7c>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4628      	mov	r0, r5
 8003fac:	f001 fc8c 	bl	80058c8 <__smakebuf_r>
 8003fb0:	89a0      	ldrh	r0, [r4, #12]
 8003fb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fb6:	f010 0301 	ands.w	r3, r0, #1
 8003fba:	d00a      	beq.n	8003fd2 <__swsetup_r+0x9e>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60a3      	str	r3, [r4, #8]
 8003fc0:	6963      	ldr	r3, [r4, #20]
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	61a3      	str	r3, [r4, #24]
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	b943      	cbnz	r3, 8003fdc <__swsetup_r+0xa8>
 8003fca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fce:	d1c4      	bne.n	8003f5a <__swsetup_r+0x26>
 8003fd0:	bd38      	pop	{r3, r4, r5, pc}
 8003fd2:	0781      	lsls	r1, r0, #30
 8003fd4:	bf58      	it	pl
 8003fd6:	6963      	ldrpl	r3, [r4, #20]
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	e7f4      	b.n	8003fc6 <__swsetup_r+0x92>
 8003fdc:	2000      	movs	r0, #0
 8003fde:	e7f7      	b.n	8003fd0 <__swsetup_r+0x9c>
 8003fe0:	24000af8 	.word	0x24000af8

08003fe4 <memset>:
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <_localeconv_r>:
 8003ff4:	4800      	ldr	r0, [pc, #0]	; (8003ff8 <_localeconv_r+0x4>)
 8003ff6:	4770      	bx	lr
 8003ff8:	24000bec 	.word	0x24000bec

08003ffc <_close_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4d06      	ldr	r5, [pc, #24]	; (8004018 <_close_r+0x1c>)
 8004000:	2300      	movs	r3, #0
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	f001 fd6e 	bl	8005ae8 <_close>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_close_r+0x1a>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_close_r+0x1a>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	240016e8 	.word	0x240016e8

0800401c <_lseek_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d07      	ldr	r5, [pc, #28]	; (800403c <_lseek_r+0x20>)
 8004020:	4604      	mov	r4, r0
 8004022:	4608      	mov	r0, r1
 8004024:	4611      	mov	r1, r2
 8004026:	2200      	movs	r2, #0
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f001 fd84 	bl	8005b38 <_lseek>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_lseek_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_lseek_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	240016e8 	.word	0x240016e8

08004040 <_read_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d07      	ldr	r5, [pc, #28]	; (8004060 <_read_r+0x20>)
 8004044:	4604      	mov	r4, r0
 8004046:	4608      	mov	r0, r1
 8004048:	4611      	mov	r1, r2
 800404a:	2200      	movs	r2, #0
 800404c:	602a      	str	r2, [r5, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f001 fd7a 	bl	8005b48 <_read>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_read_r+0x1e>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_read_r+0x1e>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	240016e8 	.word	0x240016e8

08004064 <_sbrk_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d06      	ldr	r5, [pc, #24]	; (8004080 <_sbrk_r+0x1c>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fc fabc 	bl	80005ec <_sbrk>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_sbrk_r+0x1a>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_sbrk_r+0x1a>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	240016e8 	.word	0x240016e8

08004084 <_write_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d07      	ldr	r5, [pc, #28]	; (80040a4 <_write_r+0x20>)
 8004088:	4604      	mov	r4, r0
 800408a:	4608      	mov	r0, r1
 800408c:	4611      	mov	r1, r2
 800408e:	2200      	movs	r2, #0
 8004090:	602a      	str	r2, [r5, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f001 fd60 	bl	8005b58 <_write>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_write_r+0x1e>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_write_r+0x1e>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	240016e8 	.word	0x240016e8

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	; (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	24000af8 	.word	0x24000af8

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f001 fd50 	bl	8005b6c <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	080371fc 	.word	0x080371fc
 80040f0:	080371fc 	.word	0x080371fc
 80040f4:	080371fc 	.word	0x080371fc
 80040f8:	08037200 	.word	0x08037200

080040fc <__retarget_lock_init_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_acquire_recursive>:
 80040fe:	4770      	bx	lr

08004100 <__retarget_lock_release_recursive>:
 8004100:	4770      	bx	lr

08004102 <memcpy>:
 8004102:	440a      	add	r2, r1
 8004104:	4291      	cmp	r1, r2
 8004106:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800410a:	d100      	bne.n	800410e <memcpy+0xc>
 800410c:	4770      	bx	lr
 800410e:	b510      	push	{r4, lr}
 8004110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004118:	4291      	cmp	r1, r2
 800411a:	d1f9      	bne.n	8004110 <memcpy+0xe>
 800411c:	bd10      	pop	{r4, pc}

0800411e <quorem>:
 800411e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004122:	6903      	ldr	r3, [r0, #16]
 8004124:	690c      	ldr	r4, [r1, #16]
 8004126:	42a3      	cmp	r3, r4
 8004128:	4607      	mov	r7, r0
 800412a:	db7e      	blt.n	800422a <quorem+0x10c>
 800412c:	3c01      	subs	r4, #1
 800412e:	f101 0814 	add.w	r8, r1, #20
 8004132:	f100 0514 	add.w	r5, r0, #20
 8004136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004144:	3301      	adds	r3, #1
 8004146:	429a      	cmp	r2, r3
 8004148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800414c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004150:	fbb2 f6f3 	udiv	r6, r2, r3
 8004154:	d331      	bcc.n	80041ba <quorem+0x9c>
 8004156:	f04f 0e00 	mov.w	lr, #0
 800415a:	4640      	mov	r0, r8
 800415c:	46ac      	mov	ip, r5
 800415e:	46f2      	mov	sl, lr
 8004160:	f850 2b04 	ldr.w	r2, [r0], #4
 8004164:	b293      	uxth	r3, r2
 8004166:	fb06 e303 	mla	r3, r6, r3, lr
 800416a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800416e:	0c1a      	lsrs	r2, r3, #16
 8004170:	b29b      	uxth	r3, r3
 8004172:	ebaa 0303 	sub.w	r3, sl, r3
 8004176:	f8dc a000 	ldr.w	sl, [ip]
 800417a:	fa13 f38a 	uxtah	r3, r3, sl
 800417e:	fb06 220e 	mla	r2, r6, lr, r2
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	9b00      	ldr	r3, [sp, #0]
 8004186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800418a:	b292      	uxth	r2, r2
 800418c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004194:	f8bd 3000 	ldrh.w	r3, [sp]
 8004198:	4581      	cmp	r9, r0
 800419a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800419e:	f84c 3b04 	str.w	r3, [ip], #4
 80041a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041a6:	d2db      	bcs.n	8004160 <quorem+0x42>
 80041a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80041ac:	b92b      	cbnz	r3, 80041ba <quorem+0x9c>
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	429d      	cmp	r5, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	d32c      	bcc.n	8004212 <quorem+0xf4>
 80041b8:	613c      	str	r4, [r7, #16]
 80041ba:	4638      	mov	r0, r7
 80041bc:	f001 f86c 	bl	8005298 <__mcmp>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	db22      	blt.n	800420a <quorem+0xec>
 80041c4:	3601      	adds	r6, #1
 80041c6:	4629      	mov	r1, r5
 80041c8:	2000      	movs	r0, #0
 80041ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80041ce:	f8d1 c000 	ldr.w	ip, [r1]
 80041d2:	b293      	uxth	r3, r2
 80041d4:	1ac3      	subs	r3, r0, r3
 80041d6:	0c12      	lsrs	r2, r2, #16
 80041d8:	fa13 f38c 	uxtah	r3, r3, ip
 80041dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80041e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ea:	45c1      	cmp	r9, r8
 80041ec:	f841 3b04 	str.w	r3, [r1], #4
 80041f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041f4:	d2e9      	bcs.n	80041ca <quorem+0xac>
 80041f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041fe:	b922      	cbnz	r2, 800420a <quorem+0xec>
 8004200:	3b04      	subs	r3, #4
 8004202:	429d      	cmp	r5, r3
 8004204:	461a      	mov	r2, r3
 8004206:	d30a      	bcc.n	800421e <quorem+0x100>
 8004208:	613c      	str	r4, [r7, #16]
 800420a:	4630      	mov	r0, r6
 800420c:	b003      	add	sp, #12
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	3b04      	subs	r3, #4
 8004216:	2a00      	cmp	r2, #0
 8004218:	d1ce      	bne.n	80041b8 <quorem+0x9a>
 800421a:	3c01      	subs	r4, #1
 800421c:	e7c9      	b.n	80041b2 <quorem+0x94>
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	3b04      	subs	r3, #4
 8004222:	2a00      	cmp	r2, #0
 8004224:	d1f0      	bne.n	8004208 <quorem+0xea>
 8004226:	3c01      	subs	r4, #1
 8004228:	e7eb      	b.n	8004202 <quorem+0xe4>
 800422a:	2000      	movs	r0, #0
 800422c:	e7ee      	b.n	800420c <quorem+0xee>
	...

08004230 <_dtoa_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	ed2d 8b02 	vpush	{d8}
 8004238:	69c5      	ldr	r5, [r0, #28]
 800423a:	b091      	sub	sp, #68	; 0x44
 800423c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004240:	ec59 8b10 	vmov	r8, r9, d0
 8004244:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004246:	9106      	str	r1, [sp, #24]
 8004248:	4606      	mov	r6, r0
 800424a:	9208      	str	r2, [sp, #32]
 800424c:	930c      	str	r3, [sp, #48]	; 0x30
 800424e:	b975      	cbnz	r5, 800426e <_dtoa_r+0x3e>
 8004250:	2010      	movs	r0, #16
 8004252:	f7fe ffcf 	bl	80031f4 <malloc>
 8004256:	4602      	mov	r2, r0
 8004258:	61f0      	str	r0, [r6, #28]
 800425a:	b920      	cbnz	r0, 8004266 <_dtoa_r+0x36>
 800425c:	4ba6      	ldr	r3, [pc, #664]	; (80044f8 <_dtoa_r+0x2c8>)
 800425e:	21ef      	movs	r1, #239	; 0xef
 8004260:	48a6      	ldr	r0, [pc, #664]	; (80044fc <_dtoa_r+0x2cc>)
 8004262:	f001 fb8f 	bl	8005984 <__assert_func>
 8004266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800426a:	6005      	str	r5, [r0, #0]
 800426c:	60c5      	str	r5, [r0, #12]
 800426e:	69f3      	ldr	r3, [r6, #28]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	b151      	cbz	r1, 800428a <_dtoa_r+0x5a>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	604a      	str	r2, [r1, #4]
 8004278:	2301      	movs	r3, #1
 800427a:	4093      	lsls	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
 800427e:	4630      	mov	r0, r6
 8004280:	f000 fdce 	bl	8004e20 <_Bfree>
 8004284:	69f3      	ldr	r3, [r6, #28]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f1b9 0300 	subs.w	r3, r9, #0
 800428e:	bfbb      	ittet	lt
 8004290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004294:	9303      	strlt	r3, [sp, #12]
 8004296:	2300      	movge	r3, #0
 8004298:	2201      	movlt	r2, #1
 800429a:	bfac      	ite	ge
 800429c:	6023      	strge	r3, [r4, #0]
 800429e:	6022      	strlt	r2, [r4, #0]
 80042a0:	4b97      	ldr	r3, [pc, #604]	; (8004500 <_dtoa_r+0x2d0>)
 80042a2:	9c03      	ldr	r4, [sp, #12]
 80042a4:	43a3      	bics	r3, r4
 80042a6:	d11c      	bne.n	80042e2 <_dtoa_r+0xb2>
 80042a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80042b4:	ea53 0308 	orrs.w	r3, r3, r8
 80042b8:	f000 84fb 	beq.w	8004cb2 <_dtoa_r+0xa82>
 80042bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80042be:	b963      	cbnz	r3, 80042da <_dtoa_r+0xaa>
 80042c0:	4b90      	ldr	r3, [pc, #576]	; (8004504 <_dtoa_r+0x2d4>)
 80042c2:	e020      	b.n	8004306 <_dtoa_r+0xd6>
 80042c4:	4b90      	ldr	r3, [pc, #576]	; (8004508 <_dtoa_r+0x2d8>)
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	3308      	adds	r3, #8
 80042ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	9801      	ldr	r0, [sp, #4]
 80042d0:	b011      	add	sp, #68	; 0x44
 80042d2:	ecbd 8b02 	vpop	{d8}
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <_dtoa_r+0x2d4>)
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	3303      	adds	r3, #3
 80042e0:	e7f3      	b.n	80042ca <_dtoa_r+0x9a>
 80042e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80042e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80042ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ee:	d10c      	bne.n	800430a <_dtoa_r+0xda>
 80042f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042f2:	2301      	movs	r3, #1
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 84d7 	beq.w	8004cac <_dtoa_r+0xa7c>
 80042fe:	4b83      	ldr	r3, [pc, #524]	; (800450c <_dtoa_r+0x2dc>)
 8004300:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	3b01      	subs	r3, #1
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	e7e1      	b.n	80042ce <_dtoa_r+0x9e>
 800430a:	aa0e      	add	r2, sp, #56	; 0x38
 800430c:	a90f      	add	r1, sp, #60	; 0x3c
 800430e:	4630      	mov	r0, r6
 8004310:	eeb0 0b48 	vmov.f64	d0, d8
 8004314:	f001 f866 	bl	80053e4 <__d2b>
 8004318:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800431c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800431e:	4605      	mov	r5, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d046      	beq.n	80043b2 <_dtoa_r+0x182>
 8004324:	eeb0 7b48 	vmov.f64	d7, d8
 8004328:	ee18 1a90 	vmov	r1, s17
 800432c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004330:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004334:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004338:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800433c:	2000      	movs	r0, #0
 800433e:	ee07 1a90 	vmov	s15, r1
 8004342:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004346:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80044e0 <_dtoa_r+0x2b0>
 800434a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800434e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80044e8 <_dtoa_r+0x2b8>
 8004352:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004356:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80044f0 <_dtoa_r+0x2c0>
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004362:	eeb0 7b46 	vmov.f64	d7, d6
 8004366:	eea4 7b05 	vfma.f64	d7, d4, d5
 800436a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800436e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	ee16 ba90 	vmov	fp, s13
 800437a:	9009      	str	r0, [sp, #36]	; 0x24
 800437c:	d508      	bpl.n	8004390 <_dtoa_r+0x160>
 800437e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004382:	eeb4 6b47 	vcmp.f64	d6, d7
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	bf18      	it	ne
 800438c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8004390:	f1bb 0f16 	cmp.w	fp, #22
 8004394:	d82b      	bhi.n	80043ee <_dtoa_r+0x1be>
 8004396:	495e      	ldr	r1, [pc, #376]	; (8004510 <_dtoa_r+0x2e0>)
 8004398:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800439c:	ed91 7b00 	vldr	d7, [r1]
 80043a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	d501      	bpl.n	80043ae <_dtoa_r+0x17e>
 80043aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043ae:	2100      	movs	r1, #0
 80043b0:	e01e      	b.n	80043f0 <_dtoa_r+0x1c0>
 80043b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043b4:	4413      	add	r3, r2
 80043b6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80043ba:	2920      	cmp	r1, #32
 80043bc:	bfc1      	itttt	gt
 80043be:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80043c2:	408c      	lslgt	r4, r1
 80043c4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80043c8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80043cc:	bfd6      	itet	le
 80043ce:	f1c1 0120 	rsble	r1, r1, #32
 80043d2:	4321      	orrgt	r1, r4
 80043d4:	fa08 f101 	lslle.w	r1, r8, r1
 80043d8:	ee07 1a90 	vmov	s15, r1
 80043dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80043e0:	3b01      	subs	r3, #1
 80043e2:	ee17 1a90 	vmov	r1, s15
 80043e6:	2001      	movs	r0, #1
 80043e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043ec:	e7a7      	b.n	800433e <_dtoa_r+0x10e>
 80043ee:	2101      	movs	r1, #1
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	1e53      	subs	r3, r2, #1
 80043f4:	9305      	str	r3, [sp, #20]
 80043f6:	bf45      	ittet	mi
 80043f8:	f1c2 0301 	rsbmi	r3, r2, #1
 80043fc:	9304      	strmi	r3, [sp, #16]
 80043fe:	2300      	movpl	r3, #0
 8004400:	2300      	movmi	r3, #0
 8004402:	bf4c      	ite	mi
 8004404:	9305      	strmi	r3, [sp, #20]
 8004406:	9304      	strpl	r3, [sp, #16]
 8004408:	f1bb 0f00 	cmp.w	fp, #0
 800440c:	910b      	str	r1, [sp, #44]	; 0x2c
 800440e:	db18      	blt.n	8004442 <_dtoa_r+0x212>
 8004410:	9b05      	ldr	r3, [sp, #20]
 8004412:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004416:	445b      	add	r3, fp
 8004418:	9305      	str	r3, [sp, #20]
 800441a:	2300      	movs	r3, #0
 800441c:	9a06      	ldr	r2, [sp, #24]
 800441e:	2a09      	cmp	r2, #9
 8004420:	d848      	bhi.n	80044b4 <_dtoa_r+0x284>
 8004422:	2a05      	cmp	r2, #5
 8004424:	bfc4      	itt	gt
 8004426:	3a04      	subgt	r2, #4
 8004428:	9206      	strgt	r2, [sp, #24]
 800442a:	9a06      	ldr	r2, [sp, #24]
 800442c:	f1a2 0202 	sub.w	r2, r2, #2
 8004430:	bfcc      	ite	gt
 8004432:	2400      	movgt	r4, #0
 8004434:	2401      	movle	r4, #1
 8004436:	2a03      	cmp	r2, #3
 8004438:	d847      	bhi.n	80044ca <_dtoa_r+0x29a>
 800443a:	e8df f002 	tbb	[pc, r2]
 800443e:	2d0b      	.short	0x2d0b
 8004440:	392b      	.short	0x392b
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	2200      	movs	r2, #0
 8004446:	eba3 030b 	sub.w	r3, r3, fp
 800444a:	9304      	str	r3, [sp, #16]
 800444c:	920a      	str	r2, [sp, #40]	; 0x28
 800444e:	f1cb 0300 	rsb	r3, fp, #0
 8004452:	e7e3      	b.n	800441c <_dtoa_r+0x1ec>
 8004454:	2200      	movs	r2, #0
 8004456:	9207      	str	r2, [sp, #28]
 8004458:	9a08      	ldr	r2, [sp, #32]
 800445a:	2a00      	cmp	r2, #0
 800445c:	dc38      	bgt.n	80044d0 <_dtoa_r+0x2a0>
 800445e:	f04f 0a01 	mov.w	sl, #1
 8004462:	46d1      	mov	r9, sl
 8004464:	4652      	mov	r2, sl
 8004466:	f8cd a020 	str.w	sl, [sp, #32]
 800446a:	69f7      	ldr	r7, [r6, #28]
 800446c:	2100      	movs	r1, #0
 800446e:	2004      	movs	r0, #4
 8004470:	f100 0c14 	add.w	ip, r0, #20
 8004474:	4594      	cmp	ip, r2
 8004476:	d930      	bls.n	80044da <_dtoa_r+0x2aa>
 8004478:	6079      	str	r1, [r7, #4]
 800447a:	4630      	mov	r0, r6
 800447c:	930d      	str	r3, [sp, #52]	; 0x34
 800447e:	f000 fc8f 	bl	8004da0 <_Balloc>
 8004482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004484:	9001      	str	r0, [sp, #4]
 8004486:	4602      	mov	r2, r0
 8004488:	2800      	cmp	r0, #0
 800448a:	d145      	bne.n	8004518 <_dtoa_r+0x2e8>
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <_dtoa_r+0x2e4>)
 800448e:	f240 11af 	movw	r1, #431	; 0x1af
 8004492:	e6e5      	b.n	8004260 <_dtoa_r+0x30>
 8004494:	2201      	movs	r2, #1
 8004496:	e7de      	b.n	8004456 <_dtoa_r+0x226>
 8004498:	2200      	movs	r2, #0
 800449a:	9207      	str	r2, [sp, #28]
 800449c:	9a08      	ldr	r2, [sp, #32]
 800449e:	eb0b 0a02 	add.w	sl, fp, r2
 80044a2:	f10a 0901 	add.w	r9, sl, #1
 80044a6:	464a      	mov	r2, r9
 80044a8:	2a01      	cmp	r2, #1
 80044aa:	bfb8      	it	lt
 80044ac:	2201      	movlt	r2, #1
 80044ae:	e7dc      	b.n	800446a <_dtoa_r+0x23a>
 80044b0:	2201      	movs	r2, #1
 80044b2:	e7f2      	b.n	800449a <_dtoa_r+0x26a>
 80044b4:	2401      	movs	r4, #1
 80044b6:	2200      	movs	r2, #0
 80044b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80044bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80044c0:	2100      	movs	r1, #0
 80044c2:	46d1      	mov	r9, sl
 80044c4:	2212      	movs	r2, #18
 80044c6:	9108      	str	r1, [sp, #32]
 80044c8:	e7cf      	b.n	800446a <_dtoa_r+0x23a>
 80044ca:	2201      	movs	r2, #1
 80044cc:	9207      	str	r2, [sp, #28]
 80044ce:	e7f5      	b.n	80044bc <_dtoa_r+0x28c>
 80044d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80044d4:	46d1      	mov	r9, sl
 80044d6:	4652      	mov	r2, sl
 80044d8:	e7c7      	b.n	800446a <_dtoa_r+0x23a>
 80044da:	3101      	adds	r1, #1
 80044dc:	0040      	lsls	r0, r0, #1
 80044de:	e7c7      	b.n	8004470 <_dtoa_r+0x240>
 80044e0:	636f4361 	.word	0x636f4361
 80044e4:	3fd287a7 	.word	0x3fd287a7
 80044e8:	8b60c8b3 	.word	0x8b60c8b3
 80044ec:	3fc68a28 	.word	0x3fc68a28
 80044f0:	509f79fb 	.word	0x509f79fb
 80044f4:	3fd34413 	.word	0x3fd34413
 80044f8:	08036ec9 	.word	0x08036ec9
 80044fc:	08036ee0 	.word	0x08036ee0
 8004500:	7ff00000 	.word	0x7ff00000
 8004504:	08036ec5 	.word	0x08036ec5
 8004508:	08036ebc 	.word	0x08036ebc
 800450c:	08036e99 	.word	0x08036e99
 8004510:	08036fd0 	.word	0x08036fd0
 8004514:	08036f38 	.word	0x08036f38
 8004518:	69f2      	ldr	r2, [r6, #28]
 800451a:	9901      	ldr	r1, [sp, #4]
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	f1b9 0f0e 	cmp.w	r9, #14
 8004522:	d86c      	bhi.n	80045fe <_dtoa_r+0x3ce>
 8004524:	2c00      	cmp	r4, #0
 8004526:	d06a      	beq.n	80045fe <_dtoa_r+0x3ce>
 8004528:	f1bb 0f00 	cmp.w	fp, #0
 800452c:	f340 80a0 	ble.w	8004670 <_dtoa_r+0x440>
 8004530:	4ac1      	ldr	r2, [pc, #772]	; (8004838 <_dtoa_r+0x608>)
 8004532:	f00b 010f 	and.w	r1, fp, #15
 8004536:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800453a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800453e:	ed92 7b00 	vldr	d7, [r2]
 8004542:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004546:	f000 8087 	beq.w	8004658 <_dtoa_r+0x428>
 800454a:	49bc      	ldr	r1, [pc, #752]	; (800483c <_dtoa_r+0x60c>)
 800454c:	ed91 6b08 	vldr	d6, [r1, #32]
 8004550:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004554:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004558:	f002 020f 	and.w	r2, r2, #15
 800455c:	2103      	movs	r1, #3
 800455e:	48b7      	ldr	r0, [pc, #732]	; (800483c <_dtoa_r+0x60c>)
 8004560:	2a00      	cmp	r2, #0
 8004562:	d17b      	bne.n	800465c <_dtoa_r+0x42c>
 8004564:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004568:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800456c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004576:	2a00      	cmp	r2, #0
 8004578:	f000 80a0 	beq.w	80046bc <_dtoa_r+0x48c>
 800457c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004580:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	f140 8098 	bpl.w	80046bc <_dtoa_r+0x48c>
 800458c:	f1b9 0f00 	cmp.w	r9, #0
 8004590:	f000 8094 	beq.w	80046bc <_dtoa_r+0x48c>
 8004594:	f1ba 0f00 	cmp.w	sl, #0
 8004598:	dd2f      	ble.n	80045fa <_dtoa_r+0x3ca>
 800459a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800459e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045a6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80045aa:	3101      	adds	r1, #1
 80045ac:	4654      	mov	r4, sl
 80045ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80045b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80045b6:	ee07 1a90 	vmov	s15, r1
 80045ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80045be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80045c2:	ee15 7a90 	vmov	r7, s11
 80045c6:	ec51 0b15 	vmov	r0, r1, d5
 80045ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d177      	bne.n	80046c2 <_dtoa_r+0x492>
 80045d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80045d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80045da:	ec41 0b17 	vmov	d7, r0, r1
 80045de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	f300 826a 	bgt.w	8004abe <_dtoa_r+0x88e>
 80045ea:	eeb1 7b47 	vneg.f64	d7, d7
 80045ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	f100 8260 	bmi.w	8004aba <_dtoa_r+0x88a>
 80045fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80045fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004600:	2a00      	cmp	r2, #0
 8004602:	f2c0 811d 	blt.w	8004840 <_dtoa_r+0x610>
 8004606:	f1bb 0f0e 	cmp.w	fp, #14
 800460a:	f300 8119 	bgt.w	8004840 <_dtoa_r+0x610>
 800460e:	4b8a      	ldr	r3, [pc, #552]	; (8004838 <_dtoa_r+0x608>)
 8004610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004614:	ed93 6b00 	vldr	d6, [r3]
 8004618:	9b08      	ldr	r3, [sp, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f280 80b7 	bge.w	800478e <_dtoa_r+0x55e>
 8004620:	f1b9 0f00 	cmp.w	r9, #0
 8004624:	f300 80b3 	bgt.w	800478e <_dtoa_r+0x55e>
 8004628:	f040 8246 	bne.w	8004ab8 <_dtoa_r+0x888>
 800462c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004630:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004634:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004638:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004640:	464c      	mov	r4, r9
 8004642:	464f      	mov	r7, r9
 8004644:	f280 821c 	bge.w	8004a80 <_dtoa_r+0x850>
 8004648:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800464c:	2331      	movs	r3, #49	; 0x31
 800464e:	f808 3b01 	strb.w	r3, [r8], #1
 8004652:	f10b 0b01 	add.w	fp, fp, #1
 8004656:	e218      	b.n	8004a8a <_dtoa_r+0x85a>
 8004658:	2102      	movs	r1, #2
 800465a:	e780      	b.n	800455e <_dtoa_r+0x32e>
 800465c:	07d4      	lsls	r4, r2, #31
 800465e:	d504      	bpl.n	800466a <_dtoa_r+0x43a>
 8004660:	ed90 6b00 	vldr	d6, [r0]
 8004664:	3101      	adds	r1, #1
 8004666:	ee27 7b06 	vmul.f64	d7, d7, d6
 800466a:	1052      	asrs	r2, r2, #1
 800466c:	3008      	adds	r0, #8
 800466e:	e777      	b.n	8004560 <_dtoa_r+0x330>
 8004670:	d022      	beq.n	80046b8 <_dtoa_r+0x488>
 8004672:	f1cb 0200 	rsb	r2, fp, #0
 8004676:	4970      	ldr	r1, [pc, #448]	; (8004838 <_dtoa_r+0x608>)
 8004678:	f002 000f 	and.w	r0, r2, #15
 800467c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004680:	ed91 7b00 	vldr	d7, [r1]
 8004684:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800468c:	486b      	ldr	r0, [pc, #428]	; (800483c <_dtoa_r+0x60c>)
 800468e:	1112      	asrs	r2, r2, #4
 8004690:	2400      	movs	r4, #0
 8004692:	2102      	movs	r1, #2
 8004694:	b92a      	cbnz	r2, 80046a2 <_dtoa_r+0x472>
 8004696:	2c00      	cmp	r4, #0
 8004698:	f43f af6a 	beq.w	8004570 <_dtoa_r+0x340>
 800469c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80046a0:	e766      	b.n	8004570 <_dtoa_r+0x340>
 80046a2:	07d7      	lsls	r7, r2, #31
 80046a4:	d505      	bpl.n	80046b2 <_dtoa_r+0x482>
 80046a6:	ed90 6b00 	vldr	d6, [r0]
 80046aa:	3101      	adds	r1, #1
 80046ac:	2401      	movs	r4, #1
 80046ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046b2:	1052      	asrs	r2, r2, #1
 80046b4:	3008      	adds	r0, #8
 80046b6:	e7ed      	b.n	8004694 <_dtoa_r+0x464>
 80046b8:	2102      	movs	r1, #2
 80046ba:	e759      	b.n	8004570 <_dtoa_r+0x340>
 80046bc:	465a      	mov	r2, fp
 80046be:	464c      	mov	r4, r9
 80046c0:	e775      	b.n	80045ae <_dtoa_r+0x37e>
 80046c2:	ec41 0b17 	vmov	d7, r0, r1
 80046c6:	495c      	ldr	r1, [pc, #368]	; (8004838 <_dtoa_r+0x608>)
 80046c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80046cc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80046d0:	9901      	ldr	r1, [sp, #4]
 80046d2:	440c      	add	r4, r1
 80046d4:	9907      	ldr	r1, [sp, #28]
 80046d6:	b351      	cbz	r1, 800472e <_dtoa_r+0x4fe>
 80046d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80046dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80046e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80046e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80046ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80046f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80046f4:	ee14 1a90 	vmov	r1, s9
 80046f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80046fc:	3130      	adds	r1, #48	; 0x30
 80046fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004702:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	f808 1b01 	strb.w	r1, [r8], #1
 800470e:	d439      	bmi.n	8004784 <_dtoa_r+0x554>
 8004710:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004714:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d472      	bmi.n	8004804 <_dtoa_r+0x5d4>
 800471e:	45a0      	cmp	r8, r4
 8004720:	f43f af6b 	beq.w	80045fa <_dtoa_r+0x3ca>
 8004724:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004728:	ee26 6b03 	vmul.f64	d6, d6, d3
 800472c:	e7e0      	b.n	80046f0 <_dtoa_r+0x4c0>
 800472e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004732:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004736:	4620      	mov	r0, r4
 8004738:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800473c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004740:	ee14 1a90 	vmov	r1, s9
 8004744:	3130      	adds	r1, #48	; 0x30
 8004746:	f808 1b01 	strb.w	r1, [r8], #1
 800474a:	45a0      	cmp	r8, r4
 800474c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004750:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004754:	d118      	bne.n	8004788 <_dtoa_r+0x558>
 8004756:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800475a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800475e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	dc4d      	bgt.n	8004804 <_dtoa_r+0x5d4>
 8004768:	ee35 5b47 	vsub.f64	d5, d5, d7
 800476c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	f57f af41 	bpl.w	80045fa <_dtoa_r+0x3ca>
 8004778:	4680      	mov	r8, r0
 800477a:	3801      	subs	r0, #1
 800477c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d0f9      	beq.n	8004778 <_dtoa_r+0x548>
 8004784:	4693      	mov	fp, r2
 8004786:	e02a      	b.n	80047de <_dtoa_r+0x5ae>
 8004788:	ee26 6b03 	vmul.f64	d6, d6, d3
 800478c:	e7d6      	b.n	800473c <_dtoa_r+0x50c>
 800478e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004792:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004796:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800479a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800479e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80047a2:	ee15 3a10 	vmov	r3, s10
 80047a6:	3330      	adds	r3, #48	; 0x30
 80047a8:	f808 3b01 	strb.w	r3, [r8], #1
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	eba8 0303 	sub.w	r3, r8, r3
 80047b2:	4599      	cmp	r9, r3
 80047b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80047b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80047bc:	d133      	bne.n	8004826 <_dtoa_r+0x5f6>
 80047be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80047c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80047c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ca:	dc1a      	bgt.n	8004802 <_dtoa_r+0x5d2>
 80047cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	d103      	bne.n	80047de <_dtoa_r+0x5ae>
 80047d6:	ee15 3a10 	vmov	r3, s10
 80047da:	07d9      	lsls	r1, r3, #31
 80047dc:	d411      	bmi.n	8004802 <_dtoa_r+0x5d2>
 80047de:	4629      	mov	r1, r5
 80047e0:	4630      	mov	r0, r6
 80047e2:	f000 fb1d 	bl	8004e20 <_Bfree>
 80047e6:	2300      	movs	r3, #0
 80047e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ea:	f888 3000 	strb.w	r3, [r8]
 80047ee:	f10b 0301 	add.w	r3, fp, #1
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f43f ad69 	beq.w	80042ce <_dtoa_r+0x9e>
 80047fc:	f8c3 8000 	str.w	r8, [r3]
 8004800:	e565      	b.n	80042ce <_dtoa_r+0x9e>
 8004802:	465a      	mov	r2, fp
 8004804:	4643      	mov	r3, r8
 8004806:	4698      	mov	r8, r3
 8004808:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800480c:	2939      	cmp	r1, #57	; 0x39
 800480e:	d106      	bne.n	800481e <_dtoa_r+0x5ee>
 8004810:	9901      	ldr	r1, [sp, #4]
 8004812:	4299      	cmp	r1, r3
 8004814:	d1f7      	bne.n	8004806 <_dtoa_r+0x5d6>
 8004816:	9801      	ldr	r0, [sp, #4]
 8004818:	2130      	movs	r1, #48	; 0x30
 800481a:	3201      	adds	r2, #1
 800481c:	7001      	strb	r1, [r0, #0]
 800481e:	7819      	ldrb	r1, [r3, #0]
 8004820:	3101      	adds	r1, #1
 8004822:	7019      	strb	r1, [r3, #0]
 8004824:	e7ae      	b.n	8004784 <_dtoa_r+0x554>
 8004826:	ee27 7b04 	vmul.f64	d7, d7, d4
 800482a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d1b2      	bne.n	800479a <_dtoa_r+0x56a>
 8004834:	e7d3      	b.n	80047de <_dtoa_r+0x5ae>
 8004836:	bf00      	nop
 8004838:	08036fd0 	.word	0x08036fd0
 800483c:	08036fa8 	.word	0x08036fa8
 8004840:	9907      	ldr	r1, [sp, #28]
 8004842:	2900      	cmp	r1, #0
 8004844:	f000 80d0 	beq.w	80049e8 <_dtoa_r+0x7b8>
 8004848:	9906      	ldr	r1, [sp, #24]
 800484a:	2901      	cmp	r1, #1
 800484c:	f300 80b4 	bgt.w	80049b8 <_dtoa_r+0x788>
 8004850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004852:	2900      	cmp	r1, #0
 8004854:	f000 80ac 	beq.w	80049b0 <_dtoa_r+0x780>
 8004858:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800485c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004860:	461c      	mov	r4, r3
 8004862:	9309      	str	r3, [sp, #36]	; 0x24
 8004864:	9b04      	ldr	r3, [sp, #16]
 8004866:	4413      	add	r3, r2
 8004868:	9304      	str	r3, [sp, #16]
 800486a:	9b05      	ldr	r3, [sp, #20]
 800486c:	2101      	movs	r1, #1
 800486e:	4413      	add	r3, r2
 8004870:	4630      	mov	r0, r6
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f000 fb8a 	bl	8004f8c <__i2b>
 8004878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487a:	4607      	mov	r7, r0
 800487c:	f1b8 0f00 	cmp.w	r8, #0
 8004880:	d00d      	beq.n	800489e <_dtoa_r+0x66e>
 8004882:	9a05      	ldr	r2, [sp, #20]
 8004884:	2a00      	cmp	r2, #0
 8004886:	dd0a      	ble.n	800489e <_dtoa_r+0x66e>
 8004888:	4542      	cmp	r2, r8
 800488a:	9904      	ldr	r1, [sp, #16]
 800488c:	bfa8      	it	ge
 800488e:	4642      	movge	r2, r8
 8004890:	1a89      	subs	r1, r1, r2
 8004892:	9104      	str	r1, [sp, #16]
 8004894:	9905      	ldr	r1, [sp, #20]
 8004896:	eba8 0802 	sub.w	r8, r8, r2
 800489a:	1a8a      	subs	r2, r1, r2
 800489c:	9205      	str	r2, [sp, #20]
 800489e:	b303      	cbz	r3, 80048e2 <_dtoa_r+0x6b2>
 80048a0:	9a07      	ldr	r2, [sp, #28]
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	f000 80a5 	beq.w	80049f2 <_dtoa_r+0x7c2>
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	dd13      	ble.n	80048d4 <_dtoa_r+0x6a4>
 80048ac:	4639      	mov	r1, r7
 80048ae:	4622      	mov	r2, r4
 80048b0:	4630      	mov	r0, r6
 80048b2:	930d      	str	r3, [sp, #52]	; 0x34
 80048b4:	f000 fc2a 	bl	800510c <__pow5mult>
 80048b8:	462a      	mov	r2, r5
 80048ba:	4601      	mov	r1, r0
 80048bc:	4607      	mov	r7, r0
 80048be:	4630      	mov	r0, r6
 80048c0:	f000 fb7a 	bl	8004fb8 <__multiply>
 80048c4:	4629      	mov	r1, r5
 80048c6:	9009      	str	r0, [sp, #36]	; 0x24
 80048c8:	4630      	mov	r0, r6
 80048ca:	f000 faa9 	bl	8004e20 <_Bfree>
 80048ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048d2:	4615      	mov	r5, r2
 80048d4:	1b1a      	subs	r2, r3, r4
 80048d6:	d004      	beq.n	80048e2 <_dtoa_r+0x6b2>
 80048d8:	4629      	mov	r1, r5
 80048da:	4630      	mov	r0, r6
 80048dc:	f000 fc16 	bl	800510c <__pow5mult>
 80048e0:	4605      	mov	r5, r0
 80048e2:	2101      	movs	r1, #1
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 fb51 	bl	8004f8c <__i2b>
 80048ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	f340 8081 	ble.w	80049f6 <_dtoa_r+0x7c6>
 80048f4:	461a      	mov	r2, r3
 80048f6:	4601      	mov	r1, r0
 80048f8:	4630      	mov	r0, r6
 80048fa:	f000 fc07 	bl	800510c <__pow5mult>
 80048fe:	9b06      	ldr	r3, [sp, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	4604      	mov	r4, r0
 8004904:	dd7a      	ble.n	80049fc <_dtoa_r+0x7cc>
 8004906:	2300      	movs	r3, #0
 8004908:	9309      	str	r3, [sp, #36]	; 0x24
 800490a:	6922      	ldr	r2, [r4, #16]
 800490c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004910:	6910      	ldr	r0, [r2, #16]
 8004912:	f000 faed 	bl	8004ef0 <__hi0bits>
 8004916:	f1c0 0020 	rsb	r0, r0, #32
 800491a:	9b05      	ldr	r3, [sp, #20]
 800491c:	4418      	add	r0, r3
 800491e:	f010 001f 	ands.w	r0, r0, #31
 8004922:	f000 8093 	beq.w	8004a4c <_dtoa_r+0x81c>
 8004926:	f1c0 0220 	rsb	r2, r0, #32
 800492a:	2a04      	cmp	r2, #4
 800492c:	f340 8085 	ble.w	8004a3a <_dtoa_r+0x80a>
 8004930:	9b04      	ldr	r3, [sp, #16]
 8004932:	f1c0 001c 	rsb	r0, r0, #28
 8004936:	4403      	add	r3, r0
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	9b05      	ldr	r3, [sp, #20]
 800493c:	4480      	add	r8, r0
 800493e:	4403      	add	r3, r0
 8004940:	9305      	str	r3, [sp, #20]
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	dd05      	ble.n	8004954 <_dtoa_r+0x724>
 8004948:	4629      	mov	r1, r5
 800494a:	461a      	mov	r2, r3
 800494c:	4630      	mov	r0, r6
 800494e:	f000 fc37 	bl	80051c0 <__lshift>
 8004952:	4605      	mov	r5, r0
 8004954:	9b05      	ldr	r3, [sp, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	dd05      	ble.n	8004966 <_dtoa_r+0x736>
 800495a:	4621      	mov	r1, r4
 800495c:	461a      	mov	r2, r3
 800495e:	4630      	mov	r0, r6
 8004960:	f000 fc2e 	bl	80051c0 <__lshift>
 8004964:	4604      	mov	r4, r0
 8004966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d071      	beq.n	8004a50 <_dtoa_r+0x820>
 800496c:	4621      	mov	r1, r4
 800496e:	4628      	mov	r0, r5
 8004970:	f000 fc92 	bl	8005298 <__mcmp>
 8004974:	2800      	cmp	r0, #0
 8004976:	da6b      	bge.n	8004a50 <_dtoa_r+0x820>
 8004978:	2300      	movs	r3, #0
 800497a:	4629      	mov	r1, r5
 800497c:	220a      	movs	r2, #10
 800497e:	4630      	mov	r0, r6
 8004980:	f000 fa70 	bl	8004e64 <__multadd>
 8004984:	9b07      	ldr	r3, [sp, #28]
 8004986:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800498a:	4605      	mov	r5, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8197 	beq.w	8004cc0 <_dtoa_r+0xa90>
 8004992:	4639      	mov	r1, r7
 8004994:	2300      	movs	r3, #0
 8004996:	220a      	movs	r2, #10
 8004998:	4630      	mov	r0, r6
 800499a:	f000 fa63 	bl	8004e64 <__multadd>
 800499e:	f1ba 0f00 	cmp.w	sl, #0
 80049a2:	4607      	mov	r7, r0
 80049a4:	f300 8093 	bgt.w	8004ace <_dtoa_r+0x89e>
 80049a8:	9b06      	ldr	r3, [sp, #24]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	dc57      	bgt.n	8004a5e <_dtoa_r+0x82e>
 80049ae:	e08e      	b.n	8004ace <_dtoa_r+0x89e>
 80049b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80049b6:	e751      	b.n	800485c <_dtoa_r+0x62c>
 80049b8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80049bc:	42a3      	cmp	r3, r4
 80049be:	bfbf      	itttt	lt
 80049c0:	1ae2      	sublt	r2, r4, r3
 80049c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049c4:	189b      	addlt	r3, r3, r2
 80049c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049c8:	bfae      	itee	ge
 80049ca:	1b1c      	subge	r4, r3, r4
 80049cc:	4623      	movlt	r3, r4
 80049ce:	2400      	movlt	r4, #0
 80049d0:	f1b9 0f00 	cmp.w	r9, #0
 80049d4:	bfb5      	itete	lt
 80049d6:	9a04      	ldrlt	r2, [sp, #16]
 80049d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80049dc:	eba2 0809 	sublt.w	r8, r2, r9
 80049e0:	464a      	movge	r2, r9
 80049e2:	bfb8      	it	lt
 80049e4:	2200      	movlt	r2, #0
 80049e6:	e73c      	b.n	8004862 <_dtoa_r+0x632>
 80049e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80049ec:	9f07      	ldr	r7, [sp, #28]
 80049ee:	461c      	mov	r4, r3
 80049f0:	e744      	b.n	800487c <_dtoa_r+0x64c>
 80049f2:	461a      	mov	r2, r3
 80049f4:	e770      	b.n	80048d8 <_dtoa_r+0x6a8>
 80049f6:	9b06      	ldr	r3, [sp, #24]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	dc18      	bgt.n	8004a2e <_dtoa_r+0x7fe>
 80049fc:	9b02      	ldr	r3, [sp, #8]
 80049fe:	b9b3      	cbnz	r3, 8004a2e <_dtoa_r+0x7fe>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004a06:	b9a2      	cbnz	r2, 8004a32 <_dtoa_r+0x802>
 8004a08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a0c:	0d12      	lsrs	r2, r2, #20
 8004a0e:	0512      	lsls	r2, r2, #20
 8004a10:	b18a      	cbz	r2, 8004a36 <_dtoa_r+0x806>
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	3301      	adds	r3, #1
 8004a16:	9304      	str	r3, [sp, #16]
 8004a18:	9b05      	ldr	r3, [sp, #20]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	2301      	movs	r3, #1
 8004a20:	9309      	str	r3, [sp, #36]	; 0x24
 8004a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f47f af70 	bne.w	800490a <_dtoa_r+0x6da>
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	e775      	b.n	800491a <_dtoa_r+0x6ea>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e7f6      	b.n	8004a20 <_dtoa_r+0x7f0>
 8004a32:	9b02      	ldr	r3, [sp, #8]
 8004a34:	e7f4      	b.n	8004a20 <_dtoa_r+0x7f0>
 8004a36:	9209      	str	r2, [sp, #36]	; 0x24
 8004a38:	e7f3      	b.n	8004a22 <_dtoa_r+0x7f2>
 8004a3a:	d082      	beq.n	8004942 <_dtoa_r+0x712>
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	321c      	adds	r2, #28
 8004a40:	4413      	add	r3, r2
 8004a42:	9304      	str	r3, [sp, #16]
 8004a44:	9b05      	ldr	r3, [sp, #20]
 8004a46:	4490      	add	r8, r2
 8004a48:	4413      	add	r3, r2
 8004a4a:	e779      	b.n	8004940 <_dtoa_r+0x710>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	e7f5      	b.n	8004a3c <_dtoa_r+0x80c>
 8004a50:	f1b9 0f00 	cmp.w	r9, #0
 8004a54:	dc36      	bgt.n	8004ac4 <_dtoa_r+0x894>
 8004a56:	9b06      	ldr	r3, [sp, #24]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	dd33      	ble.n	8004ac4 <_dtoa_r+0x894>
 8004a5c:	46ca      	mov	sl, r9
 8004a5e:	f1ba 0f00 	cmp.w	sl, #0
 8004a62:	d10d      	bne.n	8004a80 <_dtoa_r+0x850>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4653      	mov	r3, sl
 8004a68:	2205      	movs	r2, #5
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f9fa 	bl	8004e64 <__multadd>
 8004a70:	4601      	mov	r1, r0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4628      	mov	r0, r5
 8004a76:	f000 fc0f 	bl	8005298 <__mcmp>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f73f ade4 	bgt.w	8004648 <_dtoa_r+0x418>
 8004a80:	9b08      	ldr	r3, [sp, #32]
 8004a82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a86:	ea6f 0b03 	mvn.w	fp, r3
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f9c5 	bl	8004e20 <_Bfree>
 8004a96:	2f00      	cmp	r7, #0
 8004a98:	f43f aea1 	beq.w	80047de <_dtoa_r+0x5ae>
 8004a9c:	f1b9 0f00 	cmp.w	r9, #0
 8004aa0:	d005      	beq.n	8004aae <_dtoa_r+0x87e>
 8004aa2:	45b9      	cmp	r9, r7
 8004aa4:	d003      	beq.n	8004aae <_dtoa_r+0x87e>
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f000 f9b9 	bl	8004e20 <_Bfree>
 8004aae:	4639      	mov	r1, r7
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f9b5 	bl	8004e20 <_Bfree>
 8004ab6:	e692      	b.n	80047de <_dtoa_r+0x5ae>
 8004ab8:	2400      	movs	r4, #0
 8004aba:	4627      	mov	r7, r4
 8004abc:	e7e0      	b.n	8004a80 <_dtoa_r+0x850>
 8004abe:	4693      	mov	fp, r2
 8004ac0:	4627      	mov	r7, r4
 8004ac2:	e5c1      	b.n	8004648 <_dtoa_r+0x418>
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	46ca      	mov	sl, r9
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8100 	beq.w	8004cce <_dtoa_r+0xa9e>
 8004ace:	f1b8 0f00 	cmp.w	r8, #0
 8004ad2:	dd05      	ble.n	8004ae0 <_dtoa_r+0x8b0>
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f000 fb71 	bl	80051c0 <__lshift>
 8004ade:	4607      	mov	r7, r0
 8004ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d05d      	beq.n	8004ba2 <_dtoa_r+0x972>
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f959 	bl	8004da0 <_Balloc>
 8004aee:	4680      	mov	r8, r0
 8004af0:	b928      	cbnz	r0, 8004afe <_dtoa_r+0x8ce>
 8004af2:	4b82      	ldr	r3, [pc, #520]	; (8004cfc <_dtoa_r+0xacc>)
 8004af4:	4602      	mov	r2, r0
 8004af6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004afa:	f7ff bbb1 	b.w	8004260 <_dtoa_r+0x30>
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	3202      	adds	r2, #2
 8004b02:	0092      	lsls	r2, r2, #2
 8004b04:	f107 010c 	add.w	r1, r7, #12
 8004b08:	300c      	adds	r0, #12
 8004b0a:	f7ff fafa 	bl	8004102 <memcpy>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4641      	mov	r1, r8
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 fb54 	bl	80051c0 <__lshift>
 8004b18:	9b01      	ldr	r3, [sp, #4]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	4453      	add	r3, sl
 8004b22:	9308      	str	r3, [sp, #32]
 8004b24:	9b02      	ldr	r3, [sp, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	46b9      	mov	r9, r7
 8004b2c:	9307      	str	r3, [sp, #28]
 8004b2e:	4607      	mov	r7, r0
 8004b30:	9b04      	ldr	r3, [sp, #16]
 8004b32:	4621      	mov	r1, r4
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4628      	mov	r0, r5
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	f7ff faf0 	bl	800411e <quorem>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	3330      	adds	r3, #48	; 0x30
 8004b42:	9005      	str	r0, [sp, #20]
 8004b44:	4649      	mov	r1, r9
 8004b46:	4628      	mov	r0, r5
 8004b48:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4a:	f000 fba5 	bl	8005298 <__mcmp>
 8004b4e:	463a      	mov	r2, r7
 8004b50:	4682      	mov	sl, r0
 8004b52:	4621      	mov	r1, r4
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fbbb 	bl	80052d0 <__mdiff>
 8004b5a:	68c2      	ldr	r2, [r0, #12]
 8004b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5e:	4680      	mov	r8, r0
 8004b60:	bb0a      	cbnz	r2, 8004ba6 <_dtoa_r+0x976>
 8004b62:	4601      	mov	r1, r0
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 fb97 	bl	8005298 <__mcmp>
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4641      	mov	r1, r8
 8004b70:	4630      	mov	r0, r6
 8004b72:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8004b76:	f000 f953 	bl	8004e20 <_Bfree>
 8004b7a:	9b06      	ldr	r3, [sp, #24]
 8004b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004b82:	ea43 0102 	orr.w	r1, r3, r2
 8004b86:	9b07      	ldr	r3, [sp, #28]
 8004b88:	4319      	orrs	r1, r3
 8004b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8c:	d10d      	bne.n	8004baa <_dtoa_r+0x97a>
 8004b8e:	2b39      	cmp	r3, #57	; 0x39
 8004b90:	d029      	beq.n	8004be6 <_dtoa_r+0x9b6>
 8004b92:	f1ba 0f00 	cmp.w	sl, #0
 8004b96:	dd01      	ble.n	8004b9c <_dtoa_r+0x96c>
 8004b98:	9b05      	ldr	r3, [sp, #20]
 8004b9a:	3331      	adds	r3, #49	; 0x31
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	7013      	strb	r3, [r2, #0]
 8004ba0:	e775      	b.n	8004a8e <_dtoa_r+0x85e>
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	e7b8      	b.n	8004b18 <_dtoa_r+0x8e8>
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	e7e1      	b.n	8004b6e <_dtoa_r+0x93e>
 8004baa:	f1ba 0f00 	cmp.w	sl, #0
 8004bae:	db06      	blt.n	8004bbe <_dtoa_r+0x98e>
 8004bb0:	9906      	ldr	r1, [sp, #24]
 8004bb2:	ea41 0a0a 	orr.w	sl, r1, sl
 8004bb6:	9907      	ldr	r1, [sp, #28]
 8004bb8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8004bbc:	d120      	bne.n	8004c00 <_dtoa_r+0x9d0>
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	ddec      	ble.n	8004b9c <_dtoa_r+0x96c>
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	f000 faf9 	bl	80051c0 <__lshift>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	f000 fb61 	bl	8005298 <__mcmp>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	dc02      	bgt.n	8004be2 <_dtoa_r+0x9b2>
 8004bdc:	d1de      	bne.n	8004b9c <_dtoa_r+0x96c>
 8004bde:	07da      	lsls	r2, r3, #31
 8004be0:	d5dc      	bpl.n	8004b9c <_dtoa_r+0x96c>
 8004be2:	2b39      	cmp	r3, #57	; 0x39
 8004be4:	d1d8      	bne.n	8004b98 <_dtoa_r+0x968>
 8004be6:	9a02      	ldr	r2, [sp, #8]
 8004be8:	2339      	movs	r3, #57	; 0x39
 8004bea:	7013      	strb	r3, [r2, #0]
 8004bec:	4643      	mov	r3, r8
 8004bee:	4698      	mov	r8, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004bf6:	2a39      	cmp	r2, #57	; 0x39
 8004bf8:	d051      	beq.n	8004c9e <_dtoa_r+0xa6e>
 8004bfa:	3201      	adds	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e746      	b.n	8004a8e <_dtoa_r+0x85e>
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	dd03      	ble.n	8004c0c <_dtoa_r+0x9dc>
 8004c04:	2b39      	cmp	r3, #57	; 0x39
 8004c06:	d0ee      	beq.n	8004be6 <_dtoa_r+0x9b6>
 8004c08:	3301      	adds	r3, #1
 8004c0a:	e7c7      	b.n	8004b9c <_dtoa_r+0x96c>
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	9908      	ldr	r1, [sp, #32]
 8004c10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c14:	428a      	cmp	r2, r1
 8004c16:	d02b      	beq.n	8004c70 <_dtoa_r+0xa40>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f000 f920 	bl	8004e64 <__multadd>
 8004c24:	45b9      	cmp	r9, r7
 8004c26:	4605      	mov	r5, r0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	f04f 020a 	mov.w	r2, #10
 8004c30:	4649      	mov	r1, r9
 8004c32:	4630      	mov	r0, r6
 8004c34:	d107      	bne.n	8004c46 <_dtoa_r+0xa16>
 8004c36:	f000 f915 	bl	8004e64 <__multadd>
 8004c3a:	4681      	mov	r9, r0
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	3301      	adds	r3, #1
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	e774      	b.n	8004b30 <_dtoa_r+0x900>
 8004c46:	f000 f90d 	bl	8004e64 <__multadd>
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	4681      	mov	r9, r0
 8004c4e:	2300      	movs	r3, #0
 8004c50:	220a      	movs	r2, #10
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 f906 	bl	8004e64 <__multadd>
 8004c58:	4607      	mov	r7, r0
 8004c5a:	e7f0      	b.n	8004c3e <_dtoa_r+0xa0e>
 8004c5c:	f1ba 0f00 	cmp.w	sl, #0
 8004c60:	9a01      	ldr	r2, [sp, #4]
 8004c62:	bfcc      	ite	gt
 8004c64:	46d0      	movgt	r8, sl
 8004c66:	f04f 0801 	movle.w	r8, #1
 8004c6a:	4490      	add	r8, r2
 8004c6c:	f04f 0900 	mov.w	r9, #0
 8004c70:	4629      	mov	r1, r5
 8004c72:	2201      	movs	r2, #1
 8004c74:	4630      	mov	r0, r6
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	f000 faa2 	bl	80051c0 <__lshift>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4605      	mov	r5, r0
 8004c80:	f000 fb0a 	bl	8005298 <__mcmp>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	dcb1      	bgt.n	8004bec <_dtoa_r+0x9bc>
 8004c88:	d102      	bne.n	8004c90 <_dtoa_r+0xa60>
 8004c8a:	9b02      	ldr	r3, [sp, #8]
 8004c8c:	07db      	lsls	r3, r3, #31
 8004c8e:	d4ad      	bmi.n	8004bec <_dtoa_r+0x9bc>
 8004c90:	4643      	mov	r3, r8
 8004c92:	4698      	mov	r8, r3
 8004c94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c98:	2a30      	cmp	r2, #48	; 0x30
 8004c9a:	d0fa      	beq.n	8004c92 <_dtoa_r+0xa62>
 8004c9c:	e6f7      	b.n	8004a8e <_dtoa_r+0x85e>
 8004c9e:	9a01      	ldr	r2, [sp, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1a4      	bne.n	8004bee <_dtoa_r+0x9be>
 8004ca4:	f10b 0b01 	add.w	fp, fp, #1
 8004ca8:	2331      	movs	r3, #49	; 0x31
 8004caa:	e778      	b.n	8004b9e <_dtoa_r+0x96e>
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <_dtoa_r+0xad0>)
 8004cae:	f7ff bb2a 	b.w	8004306 <_dtoa_r+0xd6>
 8004cb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f ab05 	bne.w	80042c4 <_dtoa_r+0x94>
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <_dtoa_r+0xad4>)
 8004cbc:	f7ff bb23 	b.w	8004306 <_dtoa_r+0xd6>
 8004cc0:	f1ba 0f00 	cmp.w	sl, #0
 8004cc4:	dc03      	bgt.n	8004cce <_dtoa_r+0xa9e>
 8004cc6:	9b06      	ldr	r3, [sp, #24]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	f73f aec8 	bgt.w	8004a5e <_dtoa_r+0x82e>
 8004cce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f7ff fa22 	bl	800411e <quorem>
 8004cda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004cde:	f808 3b01 	strb.w	r3, [r8], #1
 8004ce2:	9a01      	ldr	r2, [sp, #4]
 8004ce4:	eba8 0202 	sub.w	r2, r8, r2
 8004ce8:	4592      	cmp	sl, r2
 8004cea:	ddb7      	ble.n	8004c5c <_dtoa_r+0xa2c>
 8004cec:	4629      	mov	r1, r5
 8004cee:	2300      	movs	r3, #0
 8004cf0:	220a      	movs	r2, #10
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f8b6 	bl	8004e64 <__multadd>
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	e7ea      	b.n	8004cd2 <_dtoa_r+0xaa2>
 8004cfc:	08036f38 	.word	0x08036f38
 8004d00:	08036e98 	.word	0x08036e98
 8004d04:	08036ebc 	.word	0x08036ebc

08004d08 <_free_r>:
 8004d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	d044      	beq.n	8004d98 <_free_r+0x90>
 8004d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d12:	9001      	str	r0, [sp, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f1a1 0404 	sub.w	r4, r1, #4
 8004d1a:	bfb8      	it	lt
 8004d1c:	18e4      	addlt	r4, r4, r3
 8004d1e:	f7fe fb11 	bl	8003344 <__malloc_lock>
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <_free_r+0x94>)
 8004d24:	9801      	ldr	r0, [sp, #4]
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	b933      	cbnz	r3, 8004d38 <_free_r+0x30>
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	6014      	str	r4, [r2, #0]
 8004d2e:	b003      	add	sp, #12
 8004d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d34:	f7fe bb0c 	b.w	8003350 <__malloc_unlock>
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	d908      	bls.n	8004d4e <_free_r+0x46>
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf01      	itttt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	1949      	addeq	r1, r1, r5
 8004d4a:	6021      	streq	r1, [r4, #0]
 8004d4c:	e7ed      	b.n	8004d2a <_free_r+0x22>
 8004d4e:	461a      	mov	r2, r3
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b10b      	cbz	r3, 8004d58 <_free_r+0x50>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d9fa      	bls.n	8004d4e <_free_r+0x46>
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	1855      	adds	r5, r2, r1
 8004d5c:	42a5      	cmp	r5, r4
 8004d5e:	d10b      	bne.n	8004d78 <_free_r+0x70>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	4421      	add	r1, r4
 8004d64:	1854      	adds	r4, r2, r1
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	d1e0      	bne.n	8004d2e <_free_r+0x26>
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	6053      	str	r3, [r2, #4]
 8004d72:	440c      	add	r4, r1
 8004d74:	6014      	str	r4, [r2, #0]
 8004d76:	e7da      	b.n	8004d2e <_free_r+0x26>
 8004d78:	d902      	bls.n	8004d80 <_free_r+0x78>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e7d6      	b.n	8004d2e <_free_r+0x26>
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1961      	adds	r1, r4, r5
 8004d84:	428b      	cmp	r3, r1
 8004d86:	bf04      	itt	eq
 8004d88:	6819      	ldreq	r1, [r3, #0]
 8004d8a:	685b      	ldreq	r3, [r3, #4]
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	bf04      	itt	eq
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	6054      	str	r4, [r2, #4]
 8004d96:	e7ca      	b.n	8004d2e <_free_r+0x26>
 8004d98:	b003      	add	sp, #12
 8004d9a:	bd30      	pop	{r4, r5, pc}
 8004d9c:	240015a4 	.word	0x240015a4

08004da0 <_Balloc>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	69c6      	ldr	r6, [r0, #28]
 8004da4:	4604      	mov	r4, r0
 8004da6:	460d      	mov	r5, r1
 8004da8:	b976      	cbnz	r6, 8004dc8 <_Balloc+0x28>
 8004daa:	2010      	movs	r0, #16
 8004dac:	f7fe fa22 	bl	80031f4 <malloc>
 8004db0:	4602      	mov	r2, r0
 8004db2:	61e0      	str	r0, [r4, #28]
 8004db4:	b920      	cbnz	r0, 8004dc0 <_Balloc+0x20>
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <_Balloc+0x78>)
 8004db8:	4818      	ldr	r0, [pc, #96]	; (8004e1c <_Balloc+0x7c>)
 8004dba:	216b      	movs	r1, #107	; 0x6b
 8004dbc:	f000 fde2 	bl	8005984 <__assert_func>
 8004dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dc4:	6006      	str	r6, [r0, #0]
 8004dc6:	60c6      	str	r6, [r0, #12]
 8004dc8:	69e6      	ldr	r6, [r4, #28]
 8004dca:	68f3      	ldr	r3, [r6, #12]
 8004dcc:	b183      	cbz	r3, 8004df0 <_Balloc+0x50>
 8004dce:	69e3      	ldr	r3, [r4, #28]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dd6:	b9b8      	cbnz	r0, 8004e08 <_Balloc+0x68>
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f605 	lsl.w	r6, r1, r5
 8004dde:	1d72      	adds	r2, r6, #5
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 fdec 	bl	80059c0 <_calloc_r>
 8004de8:	b160      	cbz	r0, 8004e04 <_Balloc+0x64>
 8004dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dee:	e00e      	b.n	8004e0e <_Balloc+0x6e>
 8004df0:	2221      	movs	r2, #33	; 0x21
 8004df2:	2104      	movs	r1, #4
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 fde3 	bl	80059c0 <_calloc_r>
 8004dfa:	69e3      	ldr	r3, [r4, #28]
 8004dfc:	60f0      	str	r0, [r6, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e4      	bne.n	8004dce <_Balloc+0x2e>
 8004e04:	2000      	movs	r0, #0
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	6802      	ldr	r2, [r0, #0]
 8004e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e14:	e7f7      	b.n	8004e06 <_Balloc+0x66>
 8004e16:	bf00      	nop
 8004e18:	08036ec9 	.word	0x08036ec9
 8004e1c:	08036f49 	.word	0x08036f49

08004e20 <_Bfree>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	69c6      	ldr	r6, [r0, #28]
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	b976      	cbnz	r6, 8004e48 <_Bfree+0x28>
 8004e2a:	2010      	movs	r0, #16
 8004e2c:	f7fe f9e2 	bl	80031f4 <malloc>
 8004e30:	4602      	mov	r2, r0
 8004e32:	61e8      	str	r0, [r5, #28]
 8004e34:	b920      	cbnz	r0, 8004e40 <_Bfree+0x20>
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <_Bfree+0x3c>)
 8004e38:	4809      	ldr	r0, [pc, #36]	; (8004e60 <_Bfree+0x40>)
 8004e3a:	218f      	movs	r1, #143	; 0x8f
 8004e3c:	f000 fda2 	bl	8005984 <__assert_func>
 8004e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e44:	6006      	str	r6, [r0, #0]
 8004e46:	60c6      	str	r6, [r0, #12]
 8004e48:	b13c      	cbz	r4, 8004e5a <_Bfree+0x3a>
 8004e4a:	69eb      	ldr	r3, [r5, #28]
 8004e4c:	6862      	ldr	r2, [r4, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e54:	6021      	str	r1, [r4, #0]
 8004e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	08036ec9 	.word	0x08036ec9
 8004e60:	08036f49 	.word	0x08036f49

08004e64 <__multadd>:
 8004e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e68:	690d      	ldr	r5, [r1, #16]
 8004e6a:	4607      	mov	r7, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	461e      	mov	r6, r3
 8004e70:	f101 0c14 	add.w	ip, r1, #20
 8004e74:	2000      	movs	r0, #0
 8004e76:	f8dc 3000 	ldr.w	r3, [ip]
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e80:	0c1e      	lsrs	r6, r3, #16
 8004e82:	0c0b      	lsrs	r3, r1, #16
 8004e84:	fb02 3306 	mla	r3, r2, r6, r3
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e90:	4285      	cmp	r5, r0
 8004e92:	f84c 1b04 	str.w	r1, [ip], #4
 8004e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e9a:	dcec      	bgt.n	8004e76 <__multadd+0x12>
 8004e9c:	b30e      	cbz	r6, 8004ee2 <__multadd+0x7e>
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dc19      	bgt.n	8004ed8 <__multadd+0x74>
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	3101      	adds	r1, #1
 8004eaa:	f7ff ff79 	bl	8004da0 <_Balloc>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	b928      	cbnz	r0, 8004ebe <__multadd+0x5a>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <__multadd+0x84>)
 8004eb6:	480d      	ldr	r0, [pc, #52]	; (8004eec <__multadd+0x88>)
 8004eb8:	21ba      	movs	r1, #186	; 0xba
 8004eba:	f000 fd63 	bl	8005984 <__assert_func>
 8004ebe:	6922      	ldr	r2, [r4, #16]
 8004ec0:	3202      	adds	r2, #2
 8004ec2:	f104 010c 	add.w	r1, r4, #12
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	300c      	adds	r0, #12
 8004eca:	f7ff f91a 	bl	8004102 <memcpy>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ffa5 	bl	8004e20 <_Bfree>
 8004ed6:	4644      	mov	r4, r8
 8004ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004edc:	3501      	adds	r5, #1
 8004ede:	615e      	str	r6, [r3, #20]
 8004ee0:	6125      	str	r5, [r4, #16]
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee8:	08036f38 	.word	0x08036f38
 8004eec:	08036f49 	.word	0x08036f49

08004ef0 <__hi0bits>:
 8004ef0:	0c03      	lsrs	r3, r0, #16
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	b9d3      	cbnz	r3, 8004f2c <__hi0bits+0x3c>
 8004ef6:	0400      	lsls	r0, r0, #16
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004efe:	bf04      	itt	eq
 8004f00:	0200      	lsleq	r0, r0, #8
 8004f02:	3308      	addeq	r3, #8
 8004f04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f08:	bf04      	itt	eq
 8004f0a:	0100      	lsleq	r0, r0, #4
 8004f0c:	3304      	addeq	r3, #4
 8004f0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f12:	bf04      	itt	eq
 8004f14:	0080      	lsleq	r0, r0, #2
 8004f16:	3302      	addeq	r3, #2
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	db05      	blt.n	8004f28 <__hi0bits+0x38>
 8004f1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f20:	f103 0301 	add.w	r3, r3, #1
 8004f24:	bf08      	it	eq
 8004f26:	2320      	moveq	r3, #32
 8004f28:	4618      	mov	r0, r3
 8004f2a:	4770      	bx	lr
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e7e4      	b.n	8004efa <__hi0bits+0xa>

08004f30 <__lo0bits>:
 8004f30:	6803      	ldr	r3, [r0, #0]
 8004f32:	f013 0207 	ands.w	r2, r3, #7
 8004f36:	d00c      	beq.n	8004f52 <__lo0bits+0x22>
 8004f38:	07d9      	lsls	r1, r3, #31
 8004f3a:	d422      	bmi.n	8004f82 <__lo0bits+0x52>
 8004f3c:	079a      	lsls	r2, r3, #30
 8004f3e:	bf49      	itett	mi
 8004f40:	085b      	lsrmi	r3, r3, #1
 8004f42:	089b      	lsrpl	r3, r3, #2
 8004f44:	6003      	strmi	r3, [r0, #0]
 8004f46:	2201      	movmi	r2, #1
 8004f48:	bf5c      	itt	pl
 8004f4a:	6003      	strpl	r3, [r0, #0]
 8004f4c:	2202      	movpl	r2, #2
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4770      	bx	lr
 8004f52:	b299      	uxth	r1, r3
 8004f54:	b909      	cbnz	r1, 8004f5a <__lo0bits+0x2a>
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	2210      	movs	r2, #16
 8004f5a:	b2d9      	uxtb	r1, r3
 8004f5c:	b909      	cbnz	r1, 8004f62 <__lo0bits+0x32>
 8004f5e:	3208      	adds	r2, #8
 8004f60:	0a1b      	lsrs	r3, r3, #8
 8004f62:	0719      	lsls	r1, r3, #28
 8004f64:	bf04      	itt	eq
 8004f66:	091b      	lsreq	r3, r3, #4
 8004f68:	3204      	addeq	r2, #4
 8004f6a:	0799      	lsls	r1, r3, #30
 8004f6c:	bf04      	itt	eq
 8004f6e:	089b      	lsreq	r3, r3, #2
 8004f70:	3202      	addeq	r2, #2
 8004f72:	07d9      	lsls	r1, r3, #31
 8004f74:	d403      	bmi.n	8004f7e <__lo0bits+0x4e>
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f102 0201 	add.w	r2, r2, #1
 8004f7c:	d003      	beq.n	8004f86 <__lo0bits+0x56>
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	e7e5      	b.n	8004f4e <__lo0bits+0x1e>
 8004f82:	2200      	movs	r2, #0
 8004f84:	e7e3      	b.n	8004f4e <__lo0bits+0x1e>
 8004f86:	2220      	movs	r2, #32
 8004f88:	e7e1      	b.n	8004f4e <__lo0bits+0x1e>
	...

08004f8c <__i2b>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2101      	movs	r1, #1
 8004f92:	f7ff ff05 	bl	8004da0 <_Balloc>
 8004f96:	4602      	mov	r2, r0
 8004f98:	b928      	cbnz	r0, 8004fa6 <__i2b+0x1a>
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <__i2b+0x24>)
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <__i2b+0x28>)
 8004f9e:	f240 1145 	movw	r1, #325	; 0x145
 8004fa2:	f000 fcef 	bl	8005984 <__assert_func>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	6144      	str	r4, [r0, #20]
 8004faa:	6103      	str	r3, [r0, #16]
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	bf00      	nop
 8004fb0:	08036f38 	.word	0x08036f38
 8004fb4:	08036f49 	.word	0x08036f49

08004fb8 <__multiply>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4691      	mov	r9, r2
 8004fbe:	690a      	ldr	r2, [r1, #16]
 8004fc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bfb8      	it	lt
 8004fc8:	460b      	movlt	r3, r1
 8004fca:	460c      	mov	r4, r1
 8004fcc:	bfbc      	itt	lt
 8004fce:	464c      	movlt	r4, r9
 8004fd0:	4699      	movlt	r9, r3
 8004fd2:	6927      	ldr	r7, [r4, #16]
 8004fd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fd8:	68a3      	ldr	r3, [r4, #8]
 8004fda:	6861      	ldr	r1, [r4, #4]
 8004fdc:	eb07 060a 	add.w	r6, r7, sl
 8004fe0:	42b3      	cmp	r3, r6
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	bfb8      	it	lt
 8004fe6:	3101      	addlt	r1, #1
 8004fe8:	f7ff feda 	bl	8004da0 <_Balloc>
 8004fec:	b930      	cbnz	r0, 8004ffc <__multiply+0x44>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b44      	ldr	r3, [pc, #272]	; (8005104 <__multiply+0x14c>)
 8004ff2:	4845      	ldr	r0, [pc, #276]	; (8005108 <__multiply+0x150>)
 8004ff4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004ff8:	f000 fcc4 	bl	8005984 <__assert_func>
 8004ffc:	f100 0514 	add.w	r5, r0, #20
 8005000:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005004:	462b      	mov	r3, r5
 8005006:	2200      	movs	r2, #0
 8005008:	4543      	cmp	r3, r8
 800500a:	d321      	bcc.n	8005050 <__multiply+0x98>
 800500c:	f104 0314 	add.w	r3, r4, #20
 8005010:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005014:	f109 0314 	add.w	r3, r9, #20
 8005018:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800501c:	9202      	str	r2, [sp, #8]
 800501e:	1b3a      	subs	r2, r7, r4
 8005020:	3a15      	subs	r2, #21
 8005022:	f022 0203 	bic.w	r2, r2, #3
 8005026:	3204      	adds	r2, #4
 8005028:	f104 0115 	add.w	r1, r4, #21
 800502c:	428f      	cmp	r7, r1
 800502e:	bf38      	it	cc
 8005030:	2204      	movcc	r2, #4
 8005032:	9201      	str	r2, [sp, #4]
 8005034:	9a02      	ldr	r2, [sp, #8]
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d80c      	bhi.n	8005056 <__multiply+0x9e>
 800503c:	2e00      	cmp	r6, #0
 800503e:	dd03      	ble.n	8005048 <__multiply+0x90>
 8005040:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05b      	beq.n	8005100 <__multiply+0x148>
 8005048:	6106      	str	r6, [r0, #16]
 800504a:	b005      	add	sp, #20
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	f843 2b04 	str.w	r2, [r3], #4
 8005054:	e7d8      	b.n	8005008 <__multiply+0x50>
 8005056:	f8b3 a000 	ldrh.w	sl, [r3]
 800505a:	f1ba 0f00 	cmp.w	sl, #0
 800505e:	d024      	beq.n	80050aa <__multiply+0xf2>
 8005060:	f104 0e14 	add.w	lr, r4, #20
 8005064:	46a9      	mov	r9, r5
 8005066:	f04f 0c00 	mov.w	ip, #0
 800506a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800506e:	f8d9 1000 	ldr.w	r1, [r9]
 8005072:	fa1f fb82 	uxth.w	fp, r2
 8005076:	b289      	uxth	r1, r1
 8005078:	fb0a 110b 	mla	r1, sl, fp, r1
 800507c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005080:	f8d9 2000 	ldr.w	r2, [r9]
 8005084:	4461      	add	r1, ip
 8005086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800508a:	fb0a c20b 	mla	r2, sl, fp, ip
 800508e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005092:	b289      	uxth	r1, r1
 8005094:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005098:	4577      	cmp	r7, lr
 800509a:	f849 1b04 	str.w	r1, [r9], #4
 800509e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050a2:	d8e2      	bhi.n	800506a <__multiply+0xb2>
 80050a4:	9a01      	ldr	r2, [sp, #4]
 80050a6:	f845 c002 	str.w	ip, [r5, r2]
 80050aa:	9a03      	ldr	r2, [sp, #12]
 80050ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050b0:	3304      	adds	r3, #4
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	d021      	beq.n	80050fc <__multiply+0x144>
 80050b8:	6829      	ldr	r1, [r5, #0]
 80050ba:	f104 0c14 	add.w	ip, r4, #20
 80050be:	46ae      	mov	lr, r5
 80050c0:	f04f 0a00 	mov.w	sl, #0
 80050c4:	f8bc b000 	ldrh.w	fp, [ip]
 80050c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050cc:	fb09 220b 	mla	r2, r9, fp, r2
 80050d0:	4452      	add	r2, sl
 80050d2:	b289      	uxth	r1, r1
 80050d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050d8:	f84e 1b04 	str.w	r1, [lr], #4
 80050dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80050e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050e4:	f8be 1000 	ldrh.w	r1, [lr]
 80050e8:	fb09 110a 	mla	r1, r9, sl, r1
 80050ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80050f0:	4567      	cmp	r7, ip
 80050f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050f6:	d8e5      	bhi.n	80050c4 <__multiply+0x10c>
 80050f8:	9a01      	ldr	r2, [sp, #4]
 80050fa:	50a9      	str	r1, [r5, r2]
 80050fc:	3504      	adds	r5, #4
 80050fe:	e799      	b.n	8005034 <__multiply+0x7c>
 8005100:	3e01      	subs	r6, #1
 8005102:	e79b      	b.n	800503c <__multiply+0x84>
 8005104:	08036f38 	.word	0x08036f38
 8005108:	08036f49 	.word	0x08036f49

0800510c <__pow5mult>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	4615      	mov	r5, r2
 8005112:	f012 0203 	ands.w	r2, r2, #3
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	d007      	beq.n	800512c <__pow5mult+0x20>
 800511c:	4c25      	ldr	r4, [pc, #148]	; (80051b4 <__pow5mult+0xa8>)
 800511e:	3a01      	subs	r2, #1
 8005120:	2300      	movs	r3, #0
 8005122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005126:	f7ff fe9d 	bl	8004e64 <__multadd>
 800512a:	4607      	mov	r7, r0
 800512c:	10ad      	asrs	r5, r5, #2
 800512e:	d03d      	beq.n	80051ac <__pow5mult+0xa0>
 8005130:	69f4      	ldr	r4, [r6, #28]
 8005132:	b97c      	cbnz	r4, 8005154 <__pow5mult+0x48>
 8005134:	2010      	movs	r0, #16
 8005136:	f7fe f85d 	bl	80031f4 <malloc>
 800513a:	4602      	mov	r2, r0
 800513c:	61f0      	str	r0, [r6, #28]
 800513e:	b928      	cbnz	r0, 800514c <__pow5mult+0x40>
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <__pow5mult+0xac>)
 8005142:	481e      	ldr	r0, [pc, #120]	; (80051bc <__pow5mult+0xb0>)
 8005144:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005148:	f000 fc1c 	bl	8005984 <__assert_func>
 800514c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005150:	6004      	str	r4, [r0, #0]
 8005152:	60c4      	str	r4, [r0, #12]
 8005154:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800515c:	b94c      	cbnz	r4, 8005172 <__pow5mult+0x66>
 800515e:	f240 2171 	movw	r1, #625	; 0x271
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff ff12 	bl	8004f8c <__i2b>
 8005168:	2300      	movs	r3, #0
 800516a:	f8c8 0008 	str.w	r0, [r8, #8]
 800516e:	4604      	mov	r4, r0
 8005170:	6003      	str	r3, [r0, #0]
 8005172:	f04f 0900 	mov.w	r9, #0
 8005176:	07eb      	lsls	r3, r5, #31
 8005178:	d50a      	bpl.n	8005190 <__pow5mult+0x84>
 800517a:	4639      	mov	r1, r7
 800517c:	4622      	mov	r2, r4
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ff1a 	bl	8004fb8 <__multiply>
 8005184:	4639      	mov	r1, r7
 8005186:	4680      	mov	r8, r0
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff fe49 	bl	8004e20 <_Bfree>
 800518e:	4647      	mov	r7, r8
 8005190:	106d      	asrs	r5, r5, #1
 8005192:	d00b      	beq.n	80051ac <__pow5mult+0xa0>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	b938      	cbnz	r0, 80051a8 <__pow5mult+0x9c>
 8005198:	4622      	mov	r2, r4
 800519a:	4621      	mov	r1, r4
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff ff0b 	bl	8004fb8 <__multiply>
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	f8c0 9000 	str.w	r9, [r0]
 80051a8:	4604      	mov	r4, r0
 80051aa:	e7e4      	b.n	8005176 <__pow5mult+0x6a>
 80051ac:	4638      	mov	r0, r7
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	bf00      	nop
 80051b4:	08037098 	.word	0x08037098
 80051b8:	08036ec9 	.word	0x08036ec9
 80051bc:	08036f49 	.word	0x08036f49

080051c0 <__lshift>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	460c      	mov	r4, r1
 80051c6:	6849      	ldr	r1, [r1, #4]
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	4607      	mov	r7, r0
 80051d2:	4691      	mov	r9, r2
 80051d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051d8:	f108 0601 	add.w	r6, r8, #1
 80051dc:	42b3      	cmp	r3, r6
 80051de:	db0b      	blt.n	80051f8 <__lshift+0x38>
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff fddd 	bl	8004da0 <_Balloc>
 80051e6:	4605      	mov	r5, r0
 80051e8:	b948      	cbnz	r0, 80051fe <__lshift+0x3e>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b28      	ldr	r3, [pc, #160]	; (8005290 <__lshift+0xd0>)
 80051ee:	4829      	ldr	r0, [pc, #164]	; (8005294 <__lshift+0xd4>)
 80051f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80051f4:	f000 fbc6 	bl	8005984 <__assert_func>
 80051f8:	3101      	adds	r1, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	e7ee      	b.n	80051dc <__lshift+0x1c>
 80051fe:	2300      	movs	r3, #0
 8005200:	f100 0114 	add.w	r1, r0, #20
 8005204:	f100 0210 	add.w	r2, r0, #16
 8005208:	4618      	mov	r0, r3
 800520a:	4553      	cmp	r3, sl
 800520c:	db33      	blt.n	8005276 <__lshift+0xb6>
 800520e:	6920      	ldr	r0, [r4, #16]
 8005210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005214:	f104 0314 	add.w	r3, r4, #20
 8005218:	f019 091f 	ands.w	r9, r9, #31
 800521c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005224:	d02b      	beq.n	800527e <__lshift+0xbe>
 8005226:	f1c9 0e20 	rsb	lr, r9, #32
 800522a:	468a      	mov	sl, r1
 800522c:	2200      	movs	r2, #0
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	fa00 f009 	lsl.w	r0, r0, r9
 8005234:	4310      	orrs	r0, r2
 8005236:	f84a 0b04 	str.w	r0, [sl], #4
 800523a:	f853 2b04 	ldr.w	r2, [r3], #4
 800523e:	459c      	cmp	ip, r3
 8005240:	fa22 f20e 	lsr.w	r2, r2, lr
 8005244:	d8f3      	bhi.n	800522e <__lshift+0x6e>
 8005246:	ebac 0304 	sub.w	r3, ip, r4
 800524a:	3b15      	subs	r3, #21
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	3304      	adds	r3, #4
 8005252:	f104 0015 	add.w	r0, r4, #21
 8005256:	4584      	cmp	ip, r0
 8005258:	bf38      	it	cc
 800525a:	2304      	movcc	r3, #4
 800525c:	50ca      	str	r2, [r1, r3]
 800525e:	b10a      	cbz	r2, 8005264 <__lshift+0xa4>
 8005260:	f108 0602 	add.w	r6, r8, #2
 8005264:	3e01      	subs	r6, #1
 8005266:	4638      	mov	r0, r7
 8005268:	612e      	str	r6, [r5, #16]
 800526a:	4621      	mov	r1, r4
 800526c:	f7ff fdd8 	bl	8004e20 <_Bfree>
 8005270:	4628      	mov	r0, r5
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	f842 0f04 	str.w	r0, [r2, #4]!
 800527a:	3301      	adds	r3, #1
 800527c:	e7c5      	b.n	800520a <__lshift+0x4a>
 800527e:	3904      	subs	r1, #4
 8005280:	f853 2b04 	ldr.w	r2, [r3], #4
 8005284:	f841 2f04 	str.w	r2, [r1, #4]!
 8005288:	459c      	cmp	ip, r3
 800528a:	d8f9      	bhi.n	8005280 <__lshift+0xc0>
 800528c:	e7ea      	b.n	8005264 <__lshift+0xa4>
 800528e:	bf00      	nop
 8005290:	08036f38 	.word	0x08036f38
 8005294:	08036f49 	.word	0x08036f49

08005298 <__mcmp>:
 8005298:	b530      	push	{r4, r5, lr}
 800529a:	6902      	ldr	r2, [r0, #16]
 800529c:	690c      	ldr	r4, [r1, #16]
 800529e:	1b12      	subs	r2, r2, r4
 80052a0:	d10e      	bne.n	80052c0 <__mcmp+0x28>
 80052a2:	f100 0314 	add.w	r3, r0, #20
 80052a6:	3114      	adds	r1, #20
 80052a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052b8:	42a5      	cmp	r5, r4
 80052ba:	d003      	beq.n	80052c4 <__mcmp+0x2c>
 80052bc:	d305      	bcc.n	80052ca <__mcmp+0x32>
 80052be:	2201      	movs	r2, #1
 80052c0:	4610      	mov	r0, r2
 80052c2:	bd30      	pop	{r4, r5, pc}
 80052c4:	4283      	cmp	r3, r0
 80052c6:	d3f3      	bcc.n	80052b0 <__mcmp+0x18>
 80052c8:	e7fa      	b.n	80052c0 <__mcmp+0x28>
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ce:	e7f7      	b.n	80052c0 <__mcmp+0x28>

080052d0 <__mdiff>:
 80052d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	4606      	mov	r6, r0
 80052d8:	4611      	mov	r1, r2
 80052da:	4620      	mov	r0, r4
 80052dc:	4690      	mov	r8, r2
 80052de:	f7ff ffdb 	bl	8005298 <__mcmp>
 80052e2:	1e05      	subs	r5, r0, #0
 80052e4:	d110      	bne.n	8005308 <__mdiff+0x38>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff fd59 	bl	8004da0 <_Balloc>
 80052ee:	b930      	cbnz	r0, 80052fe <__mdiff+0x2e>
 80052f0:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <__mdiff+0x10c>)
 80052f2:	4602      	mov	r2, r0
 80052f4:	f240 2137 	movw	r1, #567	; 0x237
 80052f8:	4839      	ldr	r0, [pc, #228]	; (80053e0 <__mdiff+0x110>)
 80052fa:	f000 fb43 	bl	8005984 <__assert_func>
 80052fe:	2301      	movs	r3, #1
 8005300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005308:	bfa4      	itt	ge
 800530a:	4643      	movge	r3, r8
 800530c:	46a0      	movge	r8, r4
 800530e:	4630      	mov	r0, r6
 8005310:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005314:	bfa6      	itte	ge
 8005316:	461c      	movge	r4, r3
 8005318:	2500      	movge	r5, #0
 800531a:	2501      	movlt	r5, #1
 800531c:	f7ff fd40 	bl	8004da0 <_Balloc>
 8005320:	b920      	cbnz	r0, 800532c <__mdiff+0x5c>
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <__mdiff+0x10c>)
 8005324:	4602      	mov	r2, r0
 8005326:	f240 2145 	movw	r1, #581	; 0x245
 800532a:	e7e5      	b.n	80052f8 <__mdiff+0x28>
 800532c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005330:	6926      	ldr	r6, [r4, #16]
 8005332:	60c5      	str	r5, [r0, #12]
 8005334:	f104 0914 	add.w	r9, r4, #20
 8005338:	f108 0514 	add.w	r5, r8, #20
 800533c:	f100 0e14 	add.w	lr, r0, #20
 8005340:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005344:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005348:	f108 0210 	add.w	r2, r8, #16
 800534c:	46f2      	mov	sl, lr
 800534e:	2100      	movs	r1, #0
 8005350:	f859 3b04 	ldr.w	r3, [r9], #4
 8005354:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005358:	fa11 f88b 	uxtah	r8, r1, fp
 800535c:	b299      	uxth	r1, r3
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	eba8 0801 	sub.w	r8, r8, r1
 8005364:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005368:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800536c:	fa1f f888 	uxth.w	r8, r8
 8005370:	1419      	asrs	r1, r3, #16
 8005372:	454e      	cmp	r6, r9
 8005374:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005378:	f84a 3b04 	str.w	r3, [sl], #4
 800537c:	d8e8      	bhi.n	8005350 <__mdiff+0x80>
 800537e:	1b33      	subs	r3, r6, r4
 8005380:	3b15      	subs	r3, #21
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	3304      	adds	r3, #4
 8005388:	3415      	adds	r4, #21
 800538a:	42a6      	cmp	r6, r4
 800538c:	bf38      	it	cc
 800538e:	2304      	movcc	r3, #4
 8005390:	441d      	add	r5, r3
 8005392:	4473      	add	r3, lr
 8005394:	469e      	mov	lr, r3
 8005396:	462e      	mov	r6, r5
 8005398:	4566      	cmp	r6, ip
 800539a:	d30e      	bcc.n	80053ba <__mdiff+0xea>
 800539c:	f10c 0203 	add.w	r2, ip, #3
 80053a0:	1b52      	subs	r2, r2, r5
 80053a2:	f022 0203 	bic.w	r2, r2, #3
 80053a6:	3d03      	subs	r5, #3
 80053a8:	45ac      	cmp	ip, r5
 80053aa:	bf38      	it	cc
 80053ac:	2200      	movcc	r2, #0
 80053ae:	4413      	add	r3, r2
 80053b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80053b4:	b17a      	cbz	r2, 80053d6 <__mdiff+0x106>
 80053b6:	6107      	str	r7, [r0, #16]
 80053b8:	e7a4      	b.n	8005304 <__mdiff+0x34>
 80053ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80053be:	fa11 f288 	uxtah	r2, r1, r8
 80053c2:	1414      	asrs	r4, r2, #16
 80053c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053c8:	b292      	uxth	r2, r2
 80053ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053ce:	f84e 2b04 	str.w	r2, [lr], #4
 80053d2:	1421      	asrs	r1, r4, #16
 80053d4:	e7e0      	b.n	8005398 <__mdiff+0xc8>
 80053d6:	3f01      	subs	r7, #1
 80053d8:	e7ea      	b.n	80053b0 <__mdiff+0xe0>
 80053da:	bf00      	nop
 80053dc:	08036f38 	.word	0x08036f38
 80053e0:	08036f49 	.word	0x08036f49

080053e4 <__d2b>:
 80053e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053e8:	460f      	mov	r7, r1
 80053ea:	2101      	movs	r1, #1
 80053ec:	ec59 8b10 	vmov	r8, r9, d0
 80053f0:	4616      	mov	r6, r2
 80053f2:	f7ff fcd5 	bl	8004da0 <_Balloc>
 80053f6:	4604      	mov	r4, r0
 80053f8:	b930      	cbnz	r0, 8005408 <__d2b+0x24>
 80053fa:	4602      	mov	r2, r0
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <__d2b+0xac>)
 80053fe:	4825      	ldr	r0, [pc, #148]	; (8005494 <__d2b+0xb0>)
 8005400:	f240 310f 	movw	r1, #783	; 0x30f
 8005404:	f000 fabe 	bl	8005984 <__assert_func>
 8005408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800540c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005410:	bb2d      	cbnz	r5, 800545e <__d2b+0x7a>
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	f1b8 0300 	subs.w	r3, r8, #0
 8005418:	d026      	beq.n	8005468 <__d2b+0x84>
 800541a:	4668      	mov	r0, sp
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	f7ff fd87 	bl	8004f30 <__lo0bits>
 8005422:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005426:	b1e8      	cbz	r0, 8005464 <__d2b+0x80>
 8005428:	f1c0 0320 	rsb	r3, r0, #32
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	430b      	orrs	r3, r1
 8005432:	40c2      	lsrs	r2, r0
 8005434:	6163      	str	r3, [r4, #20]
 8005436:	9201      	str	r2, [sp, #4]
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	61a3      	str	r3, [r4, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf14      	ite	ne
 8005440:	2202      	movne	r2, #2
 8005442:	2201      	moveq	r2, #1
 8005444:	6122      	str	r2, [r4, #16]
 8005446:	b1bd      	cbz	r5, 8005478 <__d2b+0x94>
 8005448:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800544c:	4405      	add	r5, r0
 800544e:	603d      	str	r5, [r7, #0]
 8005450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005454:	6030      	str	r0, [r6, #0]
 8005456:	4620      	mov	r0, r4
 8005458:	b003      	add	sp, #12
 800545a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005462:	e7d6      	b.n	8005412 <__d2b+0x2e>
 8005464:	6161      	str	r1, [r4, #20]
 8005466:	e7e7      	b.n	8005438 <__d2b+0x54>
 8005468:	a801      	add	r0, sp, #4
 800546a:	f7ff fd61 	bl	8004f30 <__lo0bits>
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	3020      	adds	r0, #32
 8005474:	2201      	movs	r2, #1
 8005476:	e7e5      	b.n	8005444 <__d2b+0x60>
 8005478:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800547c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005480:	6038      	str	r0, [r7, #0]
 8005482:	6918      	ldr	r0, [r3, #16]
 8005484:	f7ff fd34 	bl	8004ef0 <__hi0bits>
 8005488:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800548c:	e7e2      	b.n	8005454 <__d2b+0x70>
 800548e:	bf00      	nop
 8005490:	08036f38 	.word	0x08036f38
 8005494:	08036f49 	.word	0x08036f49

08005498 <__sfputc_r>:
 8005498:	6893      	ldr	r3, [r2, #8]
 800549a:	3b01      	subs	r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	b410      	push	{r4}
 80054a0:	6093      	str	r3, [r2, #8]
 80054a2:	da08      	bge.n	80054b6 <__sfputc_r+0x1e>
 80054a4:	6994      	ldr	r4, [r2, #24]
 80054a6:	42a3      	cmp	r3, r4
 80054a8:	db01      	blt.n	80054ae <__sfputc_r+0x16>
 80054aa:	290a      	cmp	r1, #10
 80054ac:	d103      	bne.n	80054b6 <__sfputc_r+0x1e>
 80054ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054b2:	f7fe bd02 	b.w	8003eba <__swbuf_r>
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	1c58      	adds	r0, r3, #1
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	7019      	strb	r1, [r3, #0]
 80054be:	4608      	mov	r0, r1
 80054c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <__sfputs_r>:
 80054c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c8:	4606      	mov	r6, r0
 80054ca:	460f      	mov	r7, r1
 80054cc:	4614      	mov	r4, r2
 80054ce:	18d5      	adds	r5, r2, r3
 80054d0:	42ac      	cmp	r4, r5
 80054d2:	d101      	bne.n	80054d8 <__sfputs_r+0x12>
 80054d4:	2000      	movs	r0, #0
 80054d6:	e007      	b.n	80054e8 <__sfputs_r+0x22>
 80054d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054dc:	463a      	mov	r2, r7
 80054de:	4630      	mov	r0, r6
 80054e0:	f7ff ffda 	bl	8005498 <__sfputc_r>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d1f3      	bne.n	80054d0 <__sfputs_r+0xa>
 80054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054ec <_vfiprintf_r>:
 80054ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	460d      	mov	r5, r1
 80054f2:	b09d      	sub	sp, #116	; 0x74
 80054f4:	4614      	mov	r4, r2
 80054f6:	4698      	mov	r8, r3
 80054f8:	4606      	mov	r6, r0
 80054fa:	b118      	cbz	r0, 8005504 <_vfiprintf_r+0x18>
 80054fc:	6a03      	ldr	r3, [r0, #32]
 80054fe:	b90b      	cbnz	r3, 8005504 <_vfiprintf_r+0x18>
 8005500:	f7fe fbf4 	bl	8003cec <__sinit>
 8005504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005506:	07d9      	lsls	r1, r3, #31
 8005508:	d405      	bmi.n	8005516 <_vfiprintf_r+0x2a>
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	059a      	lsls	r2, r3, #22
 800550e:	d402      	bmi.n	8005516 <_vfiprintf_r+0x2a>
 8005510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005512:	f7fe fdf4 	bl	80040fe <__retarget_lock_acquire_recursive>
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	071b      	lsls	r3, r3, #28
 800551a:	d501      	bpl.n	8005520 <_vfiprintf_r+0x34>
 800551c:	692b      	ldr	r3, [r5, #16]
 800551e:	b99b      	cbnz	r3, 8005548 <_vfiprintf_r+0x5c>
 8005520:	4629      	mov	r1, r5
 8005522:	4630      	mov	r0, r6
 8005524:	f7fe fd06 	bl	8003f34 <__swsetup_r>
 8005528:	b170      	cbz	r0, 8005548 <_vfiprintf_r+0x5c>
 800552a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800552c:	07dc      	lsls	r4, r3, #31
 800552e:	d504      	bpl.n	800553a <_vfiprintf_r+0x4e>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005534:	b01d      	add	sp, #116	; 0x74
 8005536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	0598      	lsls	r0, r3, #22
 800553e:	d4f7      	bmi.n	8005530 <_vfiprintf_r+0x44>
 8005540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005542:	f7fe fddd 	bl	8004100 <__retarget_lock_release_recursive>
 8005546:	e7f3      	b.n	8005530 <_vfiprintf_r+0x44>
 8005548:	2300      	movs	r3, #0
 800554a:	9309      	str	r3, [sp, #36]	; 0x24
 800554c:	2320      	movs	r3, #32
 800554e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005552:	f8cd 800c 	str.w	r8, [sp, #12]
 8005556:	2330      	movs	r3, #48	; 0x30
 8005558:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800570c <_vfiprintf_r+0x220>
 800555c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005560:	f04f 0901 	mov.w	r9, #1
 8005564:	4623      	mov	r3, r4
 8005566:	469a      	mov	sl, r3
 8005568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800556c:	b10a      	cbz	r2, 8005572 <_vfiprintf_r+0x86>
 800556e:	2a25      	cmp	r2, #37	; 0x25
 8005570:	d1f9      	bne.n	8005566 <_vfiprintf_r+0x7a>
 8005572:	ebba 0b04 	subs.w	fp, sl, r4
 8005576:	d00b      	beq.n	8005590 <_vfiprintf_r+0xa4>
 8005578:	465b      	mov	r3, fp
 800557a:	4622      	mov	r2, r4
 800557c:	4629      	mov	r1, r5
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff ffa1 	bl	80054c6 <__sfputs_r>
 8005584:	3001      	adds	r0, #1
 8005586:	f000 80a9 	beq.w	80056dc <_vfiprintf_r+0x1f0>
 800558a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800558c:	445a      	add	r2, fp
 800558e:	9209      	str	r2, [sp, #36]	; 0x24
 8005590:	f89a 3000 	ldrb.w	r3, [sl]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a1 	beq.w	80056dc <_vfiprintf_r+0x1f0>
 800559a:	2300      	movs	r3, #0
 800559c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055a4:	f10a 0a01 	add.w	sl, sl, #1
 80055a8:	9304      	str	r3, [sp, #16]
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055b0:	931a      	str	r3, [sp, #104]	; 0x68
 80055b2:	4654      	mov	r4, sl
 80055b4:	2205      	movs	r2, #5
 80055b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ba:	4854      	ldr	r0, [pc, #336]	; (800570c <_vfiprintf_r+0x220>)
 80055bc:	f7fa fea8 	bl	8000310 <memchr>
 80055c0:	9a04      	ldr	r2, [sp, #16]
 80055c2:	b9d8      	cbnz	r0, 80055fc <_vfiprintf_r+0x110>
 80055c4:	06d1      	lsls	r1, r2, #27
 80055c6:	bf44      	itt	mi
 80055c8:	2320      	movmi	r3, #32
 80055ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ce:	0713      	lsls	r3, r2, #28
 80055d0:	bf44      	itt	mi
 80055d2:	232b      	movmi	r3, #43	; 0x2b
 80055d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d8:	f89a 3000 	ldrb.w	r3, [sl]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d015      	beq.n	800560c <_vfiprintf_r+0x120>
 80055e0:	9a07      	ldr	r2, [sp, #28]
 80055e2:	4654      	mov	r4, sl
 80055e4:	2000      	movs	r0, #0
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055f0:	3b30      	subs	r3, #48	; 0x30
 80055f2:	2b09      	cmp	r3, #9
 80055f4:	d94d      	bls.n	8005692 <_vfiprintf_r+0x1a6>
 80055f6:	b1b0      	cbz	r0, 8005626 <_vfiprintf_r+0x13a>
 80055f8:	9207      	str	r2, [sp, #28]
 80055fa:	e014      	b.n	8005626 <_vfiprintf_r+0x13a>
 80055fc:	eba0 0308 	sub.w	r3, r0, r8
 8005600:	fa09 f303 	lsl.w	r3, r9, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	46a2      	mov	sl, r4
 800560a:	e7d2      	b.n	80055b2 <_vfiprintf_r+0xc6>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	1d19      	adds	r1, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	9103      	str	r1, [sp, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfbb      	ittet	lt
 8005618:	425b      	neglt	r3, r3
 800561a:	f042 0202 	orrlt.w	r2, r2, #2
 800561e:	9307      	strge	r3, [sp, #28]
 8005620:	9307      	strlt	r3, [sp, #28]
 8005622:	bfb8      	it	lt
 8005624:	9204      	strlt	r2, [sp, #16]
 8005626:	7823      	ldrb	r3, [r4, #0]
 8005628:	2b2e      	cmp	r3, #46	; 0x2e
 800562a:	d10c      	bne.n	8005646 <_vfiprintf_r+0x15a>
 800562c:	7863      	ldrb	r3, [r4, #1]
 800562e:	2b2a      	cmp	r3, #42	; 0x2a
 8005630:	d134      	bne.n	800569c <_vfiprintf_r+0x1b0>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	1d1a      	adds	r2, r3, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	9203      	str	r2, [sp, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfb8      	it	lt
 800563e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005642:	3402      	adds	r4, #2
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800571c <_vfiprintf_r+0x230>
 800564a:	7821      	ldrb	r1, [r4, #0]
 800564c:	2203      	movs	r2, #3
 800564e:	4650      	mov	r0, sl
 8005650:	f7fa fe5e 	bl	8000310 <memchr>
 8005654:	b138      	cbz	r0, 8005666 <_vfiprintf_r+0x17a>
 8005656:	9b04      	ldr	r3, [sp, #16]
 8005658:	eba0 000a 	sub.w	r0, r0, sl
 800565c:	2240      	movs	r2, #64	; 0x40
 800565e:	4082      	lsls	r2, r0
 8005660:	4313      	orrs	r3, r2
 8005662:	3401      	adds	r4, #1
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566a:	4829      	ldr	r0, [pc, #164]	; (8005710 <_vfiprintf_r+0x224>)
 800566c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005670:	2206      	movs	r2, #6
 8005672:	f7fa fe4d 	bl	8000310 <memchr>
 8005676:	2800      	cmp	r0, #0
 8005678:	d03f      	beq.n	80056fa <_vfiprintf_r+0x20e>
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <_vfiprintf_r+0x228>)
 800567c:	bb1b      	cbnz	r3, 80056c6 <_vfiprintf_r+0x1da>
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	3307      	adds	r3, #7
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	3308      	adds	r3, #8
 8005688:	9303      	str	r3, [sp, #12]
 800568a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568c:	443b      	add	r3, r7
 800568e:	9309      	str	r3, [sp, #36]	; 0x24
 8005690:	e768      	b.n	8005564 <_vfiprintf_r+0x78>
 8005692:	fb0c 3202 	mla	r2, ip, r2, r3
 8005696:	460c      	mov	r4, r1
 8005698:	2001      	movs	r0, #1
 800569a:	e7a6      	b.n	80055ea <_vfiprintf_r+0xfe>
 800569c:	2300      	movs	r3, #0
 800569e:	3401      	adds	r4, #1
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	4619      	mov	r1, r3
 80056a4:	f04f 0c0a 	mov.w	ip, #10
 80056a8:	4620      	mov	r0, r4
 80056aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ae:	3a30      	subs	r2, #48	; 0x30
 80056b0:	2a09      	cmp	r2, #9
 80056b2:	d903      	bls.n	80056bc <_vfiprintf_r+0x1d0>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0c6      	beq.n	8005646 <_vfiprintf_r+0x15a>
 80056b8:	9105      	str	r1, [sp, #20]
 80056ba:	e7c4      	b.n	8005646 <_vfiprintf_r+0x15a>
 80056bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80056c0:	4604      	mov	r4, r0
 80056c2:	2301      	movs	r3, #1
 80056c4:	e7f0      	b.n	80056a8 <_vfiprintf_r+0x1bc>
 80056c6:	ab03      	add	r3, sp, #12
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	462a      	mov	r2, r5
 80056cc:	4b12      	ldr	r3, [pc, #72]	; (8005718 <_vfiprintf_r+0x22c>)
 80056ce:	a904      	add	r1, sp, #16
 80056d0:	4630      	mov	r0, r6
 80056d2:	f7fd fed5 	bl	8003480 <_printf_float>
 80056d6:	4607      	mov	r7, r0
 80056d8:	1c78      	adds	r0, r7, #1
 80056da:	d1d6      	bne.n	800568a <_vfiprintf_r+0x19e>
 80056dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056de:	07d9      	lsls	r1, r3, #31
 80056e0:	d405      	bmi.n	80056ee <_vfiprintf_r+0x202>
 80056e2:	89ab      	ldrh	r3, [r5, #12]
 80056e4:	059a      	lsls	r2, r3, #22
 80056e6:	d402      	bmi.n	80056ee <_vfiprintf_r+0x202>
 80056e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ea:	f7fe fd09 	bl	8004100 <__retarget_lock_release_recursive>
 80056ee:	89ab      	ldrh	r3, [r5, #12]
 80056f0:	065b      	lsls	r3, r3, #25
 80056f2:	f53f af1d 	bmi.w	8005530 <_vfiprintf_r+0x44>
 80056f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f8:	e71c      	b.n	8005534 <_vfiprintf_r+0x48>
 80056fa:	ab03      	add	r3, sp, #12
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	462a      	mov	r2, r5
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <_vfiprintf_r+0x22c>)
 8005702:	a904      	add	r1, sp, #16
 8005704:	4630      	mov	r0, r6
 8005706:	f7fe f943 	bl	8003990 <_printf_i>
 800570a:	e7e4      	b.n	80056d6 <_vfiprintf_r+0x1ea>
 800570c:	080370a4 	.word	0x080370a4
 8005710:	080370ae 	.word	0x080370ae
 8005714:	08003481 	.word	0x08003481
 8005718:	080054c7 	.word	0x080054c7
 800571c:	080370aa 	.word	0x080370aa

08005720 <__sflush_r>:
 8005720:	898a      	ldrh	r2, [r1, #12]
 8005722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	4605      	mov	r5, r0
 8005728:	0710      	lsls	r0, r2, #28
 800572a:	460c      	mov	r4, r1
 800572c:	d458      	bmi.n	80057e0 <__sflush_r+0xc0>
 800572e:	684b      	ldr	r3, [r1, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc05      	bgt.n	8005740 <__sflush_r+0x20>
 8005734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	dc02      	bgt.n	8005740 <__sflush_r+0x20>
 800573a:	2000      	movs	r0, #0
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005742:	2e00      	cmp	r6, #0
 8005744:	d0f9      	beq.n	800573a <__sflush_r+0x1a>
 8005746:	2300      	movs	r3, #0
 8005748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800574c:	682f      	ldr	r7, [r5, #0]
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	d032      	beq.n	80057ba <__sflush_r+0x9a>
 8005754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	075a      	lsls	r2, r3, #29
 800575a:	d505      	bpl.n	8005768 <__sflush_r+0x48>
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	1ac0      	subs	r0, r0, r3
 8005760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005762:	b10b      	cbz	r3, 8005768 <__sflush_r+0x48>
 8005764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005766:	1ac0      	subs	r0, r0, r3
 8005768:	2300      	movs	r3, #0
 800576a:	4602      	mov	r2, r0
 800576c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800576e:	6a21      	ldr	r1, [r4, #32]
 8005770:	4628      	mov	r0, r5
 8005772:	47b0      	blx	r6
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	d106      	bne.n	8005788 <__sflush_r+0x68>
 800577a:	6829      	ldr	r1, [r5, #0]
 800577c:	291d      	cmp	r1, #29
 800577e:	d82b      	bhi.n	80057d8 <__sflush_r+0xb8>
 8005780:	4a29      	ldr	r2, [pc, #164]	; (8005828 <__sflush_r+0x108>)
 8005782:	410a      	asrs	r2, r1
 8005784:	07d6      	lsls	r6, r2, #31
 8005786:	d427      	bmi.n	80057d8 <__sflush_r+0xb8>
 8005788:	2200      	movs	r2, #0
 800578a:	6062      	str	r2, [r4, #4]
 800578c:	04d9      	lsls	r1, r3, #19
 800578e:	6922      	ldr	r2, [r4, #16]
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	d504      	bpl.n	800579e <__sflush_r+0x7e>
 8005794:	1c42      	adds	r2, r0, #1
 8005796:	d101      	bne.n	800579c <__sflush_r+0x7c>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b903      	cbnz	r3, 800579e <__sflush_r+0x7e>
 800579c:	6560      	str	r0, [r4, #84]	; 0x54
 800579e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a0:	602f      	str	r7, [r5, #0]
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d0c9      	beq.n	800573a <__sflush_r+0x1a>
 80057a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057aa:	4299      	cmp	r1, r3
 80057ac:	d002      	beq.n	80057b4 <__sflush_r+0x94>
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff faaa 	bl	8004d08 <_free_r>
 80057b4:	2000      	movs	r0, #0
 80057b6:	6360      	str	r0, [r4, #52]	; 0x34
 80057b8:	e7c0      	b.n	800573c <__sflush_r+0x1c>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	1c41      	adds	r1, r0, #1
 80057c2:	d1c8      	bne.n	8005756 <__sflush_r+0x36>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c5      	beq.n	8005756 <__sflush_r+0x36>
 80057ca:	2b1d      	cmp	r3, #29
 80057cc:	d001      	beq.n	80057d2 <__sflush_r+0xb2>
 80057ce:	2b16      	cmp	r3, #22
 80057d0:	d101      	bne.n	80057d6 <__sflush_r+0xb6>
 80057d2:	602f      	str	r7, [r5, #0]
 80057d4:	e7b1      	b.n	800573a <__sflush_r+0x1a>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	e7ad      	b.n	800573c <__sflush_r+0x1c>
 80057e0:	690f      	ldr	r7, [r1, #16]
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d0a9      	beq.n	800573a <__sflush_r+0x1a>
 80057e6:	0793      	lsls	r3, r2, #30
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	bf08      	it	eq
 80057ec:	694b      	ldreq	r3, [r1, #20]
 80057ee:	600f      	str	r7, [r1, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2300      	movne	r3, #0
 80057f4:	eba6 0807 	sub.w	r8, r6, r7
 80057f8:	608b      	str	r3, [r1, #8]
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	dd9c      	ble.n	800573a <__sflush_r+0x1a>
 8005800:	6a21      	ldr	r1, [r4, #32]
 8005802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005804:	4643      	mov	r3, r8
 8005806:	463a      	mov	r2, r7
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	2800      	cmp	r0, #0
 800580e:	dc06      	bgt.n	800581e <__sflush_r+0xfe>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800581c:	e78e      	b.n	800573c <__sflush_r+0x1c>
 800581e:	4407      	add	r7, r0
 8005820:	eba8 0800 	sub.w	r8, r8, r0
 8005824:	e7e9      	b.n	80057fa <__sflush_r+0xda>
 8005826:	bf00      	nop
 8005828:	dfbffffe 	.word	0xdfbffffe

0800582c <_fflush_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	b913      	cbnz	r3, 800583c <_fflush_r+0x10>
 8005836:	2500      	movs	r5, #0
 8005838:	4628      	mov	r0, r5
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	b118      	cbz	r0, 8005846 <_fflush_r+0x1a>
 800583e:	6a03      	ldr	r3, [r0, #32]
 8005840:	b90b      	cbnz	r3, 8005846 <_fflush_r+0x1a>
 8005842:	f7fe fa53 	bl	8003cec <__sinit>
 8005846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f3      	beq.n	8005836 <_fflush_r+0xa>
 800584e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005850:	07d0      	lsls	r0, r2, #31
 8005852:	d404      	bmi.n	800585e <_fflush_r+0x32>
 8005854:	0599      	lsls	r1, r3, #22
 8005856:	d402      	bmi.n	800585e <_fflush_r+0x32>
 8005858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585a:	f7fe fc50 	bl	80040fe <__retarget_lock_acquire_recursive>
 800585e:	4628      	mov	r0, r5
 8005860:	4621      	mov	r1, r4
 8005862:	f7ff ff5d 	bl	8005720 <__sflush_r>
 8005866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005868:	07da      	lsls	r2, r3, #31
 800586a:	4605      	mov	r5, r0
 800586c:	d4e4      	bmi.n	8005838 <_fflush_r+0xc>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	d4e1      	bmi.n	8005838 <_fflush_r+0xc>
 8005874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005876:	f7fe fc43 	bl	8004100 <__retarget_lock_release_recursive>
 800587a:	e7dd      	b.n	8005838 <_fflush_r+0xc>

0800587c <__swhatbuf_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2900      	cmp	r1, #0
 8005886:	b096      	sub	sp, #88	; 0x58
 8005888:	4615      	mov	r5, r2
 800588a:	461e      	mov	r6, r3
 800588c:	da0d      	bge.n	80058aa <__swhatbuf_r+0x2e>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	bf0c      	ite	eq
 800589a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800589e:	2340      	movne	r3, #64	; 0x40
 80058a0:	2000      	movs	r0, #0
 80058a2:	6031      	str	r1, [r6, #0]
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	b016      	add	sp, #88	; 0x58
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	466a      	mov	r2, sp
 80058ac:	f000 f848 	bl	8005940 <_fstat_r>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dbec      	blt.n	800588e <__swhatbuf_r+0x12>
 80058b4:	9901      	ldr	r1, [sp, #4]
 80058b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058be:	4259      	negs	r1, r3
 80058c0:	4159      	adcs	r1, r3
 80058c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c6:	e7eb      	b.n	80058a0 <__swhatbuf_r+0x24>

080058c8 <__smakebuf_r>:
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058cc:	079d      	lsls	r5, r3, #30
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	d507      	bpl.n	80058e4 <__smakebuf_r+0x1c>
 80058d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2301      	movs	r3, #1
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	b002      	add	sp, #8
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	ab01      	add	r3, sp, #4
 80058e6:	466a      	mov	r2, sp
 80058e8:	f7ff ffc8 	bl	800587c <__swhatbuf_r>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	4605      	mov	r5, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7fd fca7 	bl	8003244 <_malloc_r>
 80058f6:	b948      	cbnz	r0, 800590c <__smakebuf_r+0x44>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d4ef      	bmi.n	80058e0 <__smakebuf_r+0x18>
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7e3      	b.n	80058d4 <__smakebuf_r+0xc>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	6020      	str	r0, [r4, #0]
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	9b00      	ldr	r3, [sp, #0]
 8005918:	6163      	str	r3, [r4, #20]
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	6120      	str	r0, [r4, #16]
 800591e:	b15b      	cbz	r3, 8005938 <__smakebuf_r+0x70>
 8005920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005924:	4630      	mov	r0, r6
 8005926:	f000 f81d 	bl	8005964 <_isatty_r>
 800592a:	b128      	cbz	r0, 8005938 <__smakebuf_r+0x70>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	431d      	orrs	r5, r3
 800593c:	81a5      	strh	r5, [r4, #12]
 800593e:	e7cf      	b.n	80058e0 <__smakebuf_r+0x18>

08005940 <_fstat_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d07      	ldr	r5, [pc, #28]	; (8005960 <_fstat_r+0x20>)
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	f000 f8d3 	bl	8005af8 <_fstat>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	d102      	bne.n	800595c <_fstat_r+0x1c>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	b103      	cbz	r3, 800595c <_fstat_r+0x1c>
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	240016e8 	.word	0x240016e8

08005964 <_isatty_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d06      	ldr	r5, [pc, #24]	; (8005980 <_isatty_r+0x1c>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f000 f8d2 	bl	8005b18 <_isatty>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_isatty_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_isatty_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	240016e8 	.word	0x240016e8

08005984 <__assert_func>:
 8005984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005986:	4614      	mov	r4, r2
 8005988:	461a      	mov	r2, r3
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <__assert_func+0x2c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4605      	mov	r5, r0
 8005990:	68d8      	ldr	r0, [r3, #12]
 8005992:	b14c      	cbz	r4, 80059a8 <__assert_func+0x24>
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <__assert_func+0x30>)
 8005996:	9100      	str	r1, [sp, #0]
 8005998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <__assert_func+0x34>)
 800599e:	462b      	mov	r3, r5
 80059a0:	f000 f844 	bl	8005a2c <fiprintf>
 80059a4:	f000 f854 	bl	8005a50 <abort>
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <__assert_func+0x38>)
 80059aa:	461c      	mov	r4, r3
 80059ac:	e7f3      	b.n	8005996 <__assert_func+0x12>
 80059ae:	bf00      	nop
 80059b0:	24000af8 	.word	0x24000af8
 80059b4:	080370bf 	.word	0x080370bf
 80059b8:	080370cc 	.word	0x080370cc
 80059bc:	080370fa 	.word	0x080370fa

080059c0 <_calloc_r>:
 80059c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059c2:	fba1 2402 	umull	r2, r4, r1, r2
 80059c6:	b94c      	cbnz	r4, 80059dc <_calloc_r+0x1c>
 80059c8:	4611      	mov	r1, r2
 80059ca:	9201      	str	r2, [sp, #4]
 80059cc:	f7fd fc3a 	bl	8003244 <_malloc_r>
 80059d0:	9a01      	ldr	r2, [sp, #4]
 80059d2:	4605      	mov	r5, r0
 80059d4:	b930      	cbnz	r0, 80059e4 <_calloc_r+0x24>
 80059d6:	4628      	mov	r0, r5
 80059d8:	b003      	add	sp, #12
 80059da:	bd30      	pop	{r4, r5, pc}
 80059dc:	220c      	movs	r2, #12
 80059de:	6002      	str	r2, [r0, #0]
 80059e0:	2500      	movs	r5, #0
 80059e2:	e7f8      	b.n	80059d6 <_calloc_r+0x16>
 80059e4:	4621      	mov	r1, r4
 80059e6:	f7fe fafd 	bl	8003fe4 <memset>
 80059ea:	e7f4      	b.n	80059d6 <_calloc_r+0x16>

080059ec <__ascii_mbtowc>:
 80059ec:	b082      	sub	sp, #8
 80059ee:	b901      	cbnz	r1, 80059f2 <__ascii_mbtowc+0x6>
 80059f0:	a901      	add	r1, sp, #4
 80059f2:	b142      	cbz	r2, 8005a06 <__ascii_mbtowc+0x1a>
 80059f4:	b14b      	cbz	r3, 8005a0a <__ascii_mbtowc+0x1e>
 80059f6:	7813      	ldrb	r3, [r2, #0]
 80059f8:	600b      	str	r3, [r1, #0]
 80059fa:	7812      	ldrb	r2, [r2, #0]
 80059fc:	1e10      	subs	r0, r2, #0
 80059fe:	bf18      	it	ne
 8005a00:	2001      	movne	r0, #1
 8005a02:	b002      	add	sp, #8
 8005a04:	4770      	bx	lr
 8005a06:	4610      	mov	r0, r2
 8005a08:	e7fb      	b.n	8005a02 <__ascii_mbtowc+0x16>
 8005a0a:	f06f 0001 	mvn.w	r0, #1
 8005a0e:	e7f8      	b.n	8005a02 <__ascii_mbtowc+0x16>

08005a10 <__ascii_wctomb>:
 8005a10:	b149      	cbz	r1, 8005a26 <__ascii_wctomb+0x16>
 8005a12:	2aff      	cmp	r2, #255	; 0xff
 8005a14:	bf85      	ittet	hi
 8005a16:	238a      	movhi	r3, #138	; 0x8a
 8005a18:	6003      	strhi	r3, [r0, #0]
 8005a1a:	700a      	strbls	r2, [r1, #0]
 8005a1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a20:	bf98      	it	ls
 8005a22:	2001      	movls	r0, #1
 8005a24:	4770      	bx	lr
 8005a26:	4608      	mov	r0, r1
 8005a28:	4770      	bx	lr
	...

08005a2c <fiprintf>:
 8005a2c:	b40e      	push	{r1, r2, r3}
 8005a2e:	b503      	push	{r0, r1, lr}
 8005a30:	4601      	mov	r1, r0
 8005a32:	ab03      	add	r3, sp, #12
 8005a34:	4805      	ldr	r0, [pc, #20]	; (8005a4c <fiprintf+0x20>)
 8005a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	f7ff fd55 	bl	80054ec <_vfiprintf_r>
 8005a42:	b002      	add	sp, #8
 8005a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a48:	b003      	add	sp, #12
 8005a4a:	4770      	bx	lr
 8005a4c:	24000af8 	.word	0x24000af8

08005a50 <abort>:
 8005a50:	b508      	push	{r3, lr}
 8005a52:	2006      	movs	r0, #6
 8005a54:	f000 f82c 	bl	8005ab0 <raise>
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f000 f885 	bl	8005b68 <_exit>

08005a5e <_raise_r>:
 8005a5e:	291f      	cmp	r1, #31
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	d904      	bls.n	8005a72 <_raise_r+0x14>
 8005a68:	2316      	movs	r3, #22
 8005a6a:	6003      	str	r3, [r0, #0]
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a70:	bd38      	pop	{r3, r4, r5, pc}
 8005a72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a74:	b112      	cbz	r2, 8005a7c <_raise_r+0x1e>
 8005a76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a7a:	b94b      	cbnz	r3, 8005a90 <_raise_r+0x32>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f831 	bl	8005ae4 <_getpid_r>
 8005a82:	462a      	mov	r2, r5
 8005a84:	4601      	mov	r1, r0
 8005a86:	4620      	mov	r0, r4
 8005a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8c:	f000 b818 	b.w	8005ac0 <_kill_r>
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d00a      	beq.n	8005aaa <_raise_r+0x4c>
 8005a94:	1c59      	adds	r1, r3, #1
 8005a96:	d103      	bne.n	8005aa0 <_raise_r+0x42>
 8005a98:	2316      	movs	r3, #22
 8005a9a:	6003      	str	r3, [r0, #0]
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7e7      	b.n	8005a70 <_raise_r+0x12>
 8005aa0:	2400      	movs	r4, #0
 8005aa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	4798      	blx	r3
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e7e0      	b.n	8005a70 <_raise_r+0x12>
	...

08005ab0 <raise>:
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <raise+0xc>)
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f7ff bfd2 	b.w	8005a5e <_raise_r>
 8005aba:	bf00      	nop
 8005abc:	24000af8 	.word	0x24000af8

08005ac0 <_kill_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	; (8005ae0 <_kill_r+0x20>)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	f000 f82b 	bl	8005b28 <_kill>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d102      	bne.n	8005adc <_kill_r+0x1c>
 8005ad6:	682b      	ldr	r3, [r5, #0]
 8005ad8:	b103      	cbz	r3, 8005adc <_kill_r+0x1c>
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	bd38      	pop	{r3, r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	240016e8 	.word	0x240016e8

08005ae4 <_getpid_r>:
 8005ae4:	f000 b810 	b.w	8005b08 <_getpid>

08005ae8 <_close>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <_close+0xc>)
 8005aea:	2258      	movs	r2, #88	; 0x58
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af2:	4770      	bx	lr
 8005af4:	240016e8 	.word	0x240016e8

08005af8 <_fstat>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <_fstat+0xc>)
 8005afa:	2258      	movs	r2, #88	; 0x58
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b02:	4770      	bx	lr
 8005b04:	240016e8 	.word	0x240016e8

08005b08 <_getpid>:
 8005b08:	4b02      	ldr	r3, [pc, #8]	; (8005b14 <_getpid+0xc>)
 8005b0a:	2258      	movs	r2, #88	; 0x58
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b12:	4770      	bx	lr
 8005b14:	240016e8 	.word	0x240016e8

08005b18 <_isatty>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <_isatty+0xc>)
 8005b1a:	2258      	movs	r2, #88	; 0x58
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	2000      	movs	r0, #0
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	240016e8 	.word	0x240016e8

08005b28 <_kill>:
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <_kill+0xc>)
 8005b2a:	2258      	movs	r2, #88	; 0x58
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b32:	4770      	bx	lr
 8005b34:	240016e8 	.word	0x240016e8

08005b38 <_lseek>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <_lseek+0xc>)
 8005b3a:	2258      	movs	r2, #88	; 0x58
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b42:	4770      	bx	lr
 8005b44:	240016e8 	.word	0x240016e8

08005b48 <_read>:
 8005b48:	4b02      	ldr	r3, [pc, #8]	; (8005b54 <_read+0xc>)
 8005b4a:	2258      	movs	r2, #88	; 0x58
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b52:	4770      	bx	lr
 8005b54:	240016e8 	.word	0x240016e8

08005b58 <_write>:
 8005b58:	4b02      	ldr	r3, [pc, #8]	; (8005b64 <_write+0xc>)
 8005b5a:	2258      	movs	r2, #88	; 0x58
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b62:	4770      	bx	lr
 8005b64:	240016e8 	.word	0x240016e8

08005b68 <_exit>:
 8005b68:	e7fe      	b.n	8005b68 <_exit>
	...

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
