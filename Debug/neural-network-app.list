
neural-network-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003169c  08005b80  08005b80  00015b80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0803721c  0803721c  0004721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08037220  08037220  00047220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000c68  24000000  08037224  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000630  24000c80  08037e8c  00050c80  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00060000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00050c68  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00050c96  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009d37  00000000  00000000  00050cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d2a  00000000  00000000  0005aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00001a4b  00000000  00000000  0005c73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000638  00000000  00000000  0005e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000065b  00000000  00000000  0005e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003269e  00000000  00000000  0005ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000980f  00000000  00000000  000914b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00143574  00000000  00000000  0009acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001df4  00000000  00000000  001de23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001e0030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000c80 	.word	0x24000c80
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005b4c 	.word	0x08005b4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000c84 	.word	0x24000c84
 800030c:	08005b4c 	.word	0x08005b4c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b510      	push	{r4, lr}
 80003c2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c4:	224c      	movs	r2, #76	; 0x4c
 80003c6:	2100      	movs	r1, #0
 80003c8:	a80a      	add	r0, sp, #40	; 0x28
 80003ca:	f003 fdfb 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ce:	2220      	movs	r2, #32
 80003d0:	2100      	movs	r1, #0
 80003d2:	a802      	add	r0, sp, #8
 80003d4:	f003 fdf6 	bl	8003fc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 fa39 	bl	8000850 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003de:	4a20      	ldr	r2, [pc, #128]	; (8000460 <SystemClock_Config+0xa0>)
 80003e0:	2300      	movs	r3, #0
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	6993      	ldr	r3, [r2, #24]
 80003e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	6993      	ldr	r3, [r2, #24]
 80003ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f6:	6993      	ldr	r3, [r2, #24]
 80003f8:	049b      	lsls	r3, r3, #18
 80003fa:	d5fc      	bpl.n	80003f6 <SystemClock_Config+0x36>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003fc:	2001      	movs	r0, #1
 80003fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000402:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2202      	movs	r2, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 800040a:	f240 1113 	movw	r1, #275	; 0x113
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000410:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000414:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000418:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800041e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000420:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000422:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000426:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f000 fa36 	bl	8000898 <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	b108      	cbz	r0, 8000434 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	243f      	movs	r4, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000438:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000440:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000446:	2408      	movs	r4, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000448:	e9cd 2206 	strd	r2, r2, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800044c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800044e:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000452:	f000 fd6d 	bl	8000f30 <HAL_RCC_ClockConfig>
 8000456:	b108      	cbz	r0, 800045c <SystemClock_Config+0x9c>
 8000458:	b672      	cpsid	i
  while (1)
 800045a:	e7fe      	b.n	800045a <SystemClock_Config+0x9a>
}
 800045c:	b01e      	add	sp, #120	; 0x78
 800045e:	bd10      	pop	{r4, pc}
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000464:	4a2d      	ldr	r2, [pc, #180]	; (800051c <main+0xb8>)
 8000466:	6953      	ldr	r3, [r2, #20]
 8000468:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 800046c:	b500      	push	{lr}
 800046e:	b083      	sub	sp, #12
 8000470:	d111      	bne.n	8000496 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000476:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800047a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800047e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000482:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000486:	6953      	ldr	r3, [r2, #20]
 8000488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800048e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000492:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000496:	4821      	ldr	r0, [pc, #132]	; (800051c <main+0xb8>)
 8000498:	6943      	ldr	r3, [r0, #20]
 800049a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800049e:	d126      	bne.n	80004ee <main+0x8a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004a8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ac:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004b0:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004b4:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 80004b8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004bc:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004c0:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004c6:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c8:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	d1f8      	bne.n	80004c2 <main+0x5e>
    } while(sets-- != 0U);
 80004d0:	f1ac 0c20 	sub.w	ip, ip, #32
 80004d4:	f11c 0f20 	cmn.w	ip, #32
 80004d8:	d1f0      	bne.n	80004bc <main+0x58>
 80004da:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004de:	6943      	ldr	r3, [r0, #20]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	6143      	str	r3, [r0, #20]
 80004e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004ea:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80004ee:	f000 f907 	bl	8000700 <HAL_Init>
  SystemClock_Config();
 80004f2:	f7ff ff65 	bl	80003c0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <main+0xbc>)
 80004f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000500:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	9b01      	ldr	r3, [sp, #4]
  MX_X_CUBE_AI_Init();
 8000510:	f000 fe36 	bl	8001180 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8000514:	f000 fe72 	bl	80011fc <MX_X_CUBE_AI_Process>
  while (1)
 8000518:	e7fc      	b.n	8000514 <main+0xb0>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400

08000524 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <HAL_MspInit+0x20>)
{
 8000526:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000528:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800052c:	f042 0202 	orr.w	r2, r2, #2
 8000530:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	b002      	add	sp, #8
 8000542:	4770      	bx	lr
 8000544:	58024400 	.word	0x58024400

08000548 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler>
 800054a:	bf00      	nop

0800054c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <HardFault_Handler>
 800054e:	bf00      	nop

08000550 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler>
 8000552:	bf00      	nop

08000554 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>
 8000556:	bf00      	nop

08000558 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler>
 800055a:	bf00      	nop

0800055c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <DebugMon_Handler>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <PendSV_Handler>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 b8fa 	b.w	8000760 <HAL_IncTick>

0800056c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800056c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056e:	4c0d      	ldr	r4, [pc, #52]	; (80005a4 <_sbrk+0x38>)
{
 8000570:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <_sbrk+0x3c>)
 8000574:	4d0d      	ldr	r5, [pc, #52]	; (80005ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000576:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000578:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 800057a:	b12a      	cbz	r2, 8000588 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057c:	4413      	add	r3, r2
 800057e:	428b      	cmp	r3, r1
 8000580:	d808      	bhi.n	8000594 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000582:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000584:	6023      	str	r3, [r4, #0]
}
 8000586:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <_sbrk+0x44>)
 800058a:	4602      	mov	r2, r0
 800058c:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800058e:	4413      	add	r3, r2
 8000590:	428b      	cmp	r3, r1
 8000592:	d9f6      	bls.n	8000582 <_sbrk+0x16>
    errno = ENOMEM;
 8000594:	f003 fd78 	bl	8004088 <__errno>
 8000598:	230c      	movs	r3, #12
    return (void *)-1;
 800059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800059e:	6003      	str	r3, [r0, #0]
}
 80005a0:	4610      	mov	r0, r2
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
 80005a4:	24000c9c 	.word	0x24000c9c
 80005a8:	24050000 	.word	0x24050000
 80005ac:	00000800 	.word	0x00000800
 80005b0:	20000000 	.word	0x20000000

080005b4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b4:	4922      	ldr	r1, [pc, #136]	; (8000640 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005b6:	4a23      	ldr	r2, [pc, #140]	; (8000644 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80005c0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005c6:	6813      	ldr	r3, [r2, #0]
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d805      	bhi.n	80005dc <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005d0:	6813      	ldr	r3, [r2, #0]
 80005d2:	f023 030f 	bic.w	r3, r3, #15
 80005d6:	f043 0307 	orr.w	r3, r3, #7
 80005da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005de:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80005e2:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 80005e6:	f041 0101 	orr.w	r1, r1, #1
 80005ea:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005ec:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	6803      	ldr	r3, [r0, #0]
 80005f6:	071b      	lsls	r3, r3, #28
 80005f8:	d505      	bpl.n	8000606 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fa:	6803      	ldr	r3, [r0, #0]
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	f043 0307 	orr.w	r3, r3, #7
 8000604:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <SystemInit+0x94>)
 8000608:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800060a:	4911      	ldr	r1, [pc, #68]	; (8000650 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800060c:	4c11      	ldr	r4, [pc, #68]	; (8000654 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8000610:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000612:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000614:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000616:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000618:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800061c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800061e:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000622:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000624:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000626:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000628:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800062a:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800062e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000632:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000634:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000636:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	52002000 	.word	0x52002000
 8000648:	58024400 	.word	0x58024400
 800064c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000650:	01010280 	.word	0x01010280
 8000654:	02020200 	.word	0x02020200
 8000658:	01ff0000 	.word	0x01ff0000
 800065c:	52004000 	.word	0x52004000

08000660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff ffa6 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f003 fd01 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000692:	f7ff fee7 	bl	8000464 <main>
  bx  lr
 8000696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000698:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800069c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80006a0:	24000c68 	.word	0x24000c68
  ldr r2, =_sidata
 80006a4:	08037224 	.word	0x08037224
  ldr r2, =_sbss
 80006a8:	24000c80 	.word	0x24000c80
  ldr r4, =_ebss
 80006ac:	240012b0 	.word	0x240012b0

080006b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC3_IRQHandler>
	...

080006b4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_InitTick+0x40>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b90b      	cbnz	r3, 80006be <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80006ba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006bc:	4770      	bx	lr
{
 80006be:	b510      	push	{r4, lr}
 80006c0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <HAL_InitTick+0x44>)
 80006c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80006cc:	6810      	ldr	r0, [r2, #0]
 80006ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80006d2:	f000 f8a7 	bl	8000824 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	2c0f      	cmp	r4, #15
 80006d8:	d800      	bhi.n	80006dc <HAL_InitTick+0x28>
 80006da:	b108      	cbz	r0, 80006e0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
}
 80006de:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	4621      	mov	r1, r4
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f000 f85e 	bl	80007a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <HAL_InitTick+0x48>)
 80006ee:	2000      	movs	r0, #0
 80006f0:	601c      	str	r4, [r3, #0]
}
 80006f2:	bd10      	pop	{r4, pc}
 80006f4:	24000008 	.word	0x24000008
 80006f8:	24000000 	.word	0x24000000
 80006fc:	2400000c 	.word	0x2400000c

08000700 <HAL_Init>:
{
 8000700:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000702:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000704:	4c12      	ldr	r4, [pc, #72]	; (8000750 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000706:	f000 f83d 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800070a:	f000 fb71 	bl	8000df0 <HAL_RCC_GetSysClockFreq>
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_Init+0x54>)
 8000710:	4911      	ldr	r1, [pc, #68]	; (8000758 <HAL_Init+0x58>)
 8000712:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000714:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000716:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800071a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800071e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000720:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000722:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000726:	490d      	ldr	r1, [pc, #52]	; (800075c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000728:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800072c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800072e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000732:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000734:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000736:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000738:	f7ff ffbc 	bl	80006b4 <HAL_InitTick>
 800073c:	b110      	cbz	r0, 8000744 <HAL_Init+0x44>
    return HAL_ERROR;
 800073e:	2401      	movs	r4, #1
}
 8000740:	4620      	mov	r0, r4
 8000742:	bd10      	pop	{r4, pc}
 8000744:	4604      	mov	r4, r0
  HAL_MspInit();
 8000746:	f7ff feed 	bl	8000524 <HAL_MspInit>
}
 800074a:	4620      	mov	r0, r4
 800074c:	bd10      	pop	{r4, pc}
 800074e:	bf00      	nop
 8000750:	24000004 	.word	0x24000004
 8000754:	58024400 	.word	0x58024400
 8000758:	08005b90 	.word	0x08005b90
 800075c:	24000000 	.word	0x24000000

08000760 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x10>)
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_IncTick+0x14>)
 8000764:	6811      	ldr	r1, [r2, #0]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	440b      	add	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	24000ca0 	.word	0x24000ca0
 8000774:	24000008 	.word	0x24000008

08000778 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000778:	4b01      	ldr	r3, [pc, #4]	; (8000780 <HAL_GetTick+0x8>)
 800077a:	6818      	ldr	r0, [r3, #0]
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	24000ca0 	.word	0x24000ca0

08000784 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4906      	ldr	r1, [pc, #24]	; (80007a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800078e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000794:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800079a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800079c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	05fa0000 	.word	0x05fa0000

080007a8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_NVIC_SetPriority+0x70>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ba:	f1be 0f04 	cmp.w	lr, #4
 80007be:	bf28      	it	cs
 80007c0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c4:	f1bc 0f06 	cmp.w	ip, #6
 80007c8:	d91a      	bls.n	8000800 <HAL_NVIC_SetPriority+0x58>
 80007ca:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007d0:	fa0c fc03 	lsl.w	ip, ip, r3
 80007d4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80007dc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007de:	fa0c fc0e 	lsl.w	ip, ip, lr
 80007e2:	ea21 010c 	bic.w	r1, r1, ip
 80007e6:	fa01 f103 	lsl.w	r1, r1, r3
 80007ea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80007ee:	db0a      	blt.n	8000806 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f0:	0109      	lsls	r1, r1, #4
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_NVIC_SetPriority+0x74>)
 80007f4:	b2c9      	uxtb	r1, r1
 80007f6:	4403      	add	r3, r0
 80007f8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000800:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	4613      	mov	r3, r2
 8000804:	e7e8      	b.n	80007d8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000806:	f000 000f 	and.w	r0, r0, #15
 800080a:	0109      	lsls	r1, r1, #4
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <HAL_NVIC_SetPriority+0x78>)
 800080e:	b2c9      	uxtb	r1, r1
 8000810:	4403      	add	r3, r0
 8000812:	7619      	strb	r1, [r3, #24]
 8000814:	f85d fb04 	ldr.w	pc, [sp], #4
 8000818:	e000ed00 	.word	0xe000ed00
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ecfc 	.word	0xe000ecfc

08000824 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	1e43      	subs	r3, r0, #1
 8000826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082a:	d20c      	bcs.n	8000846 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <HAL_SYSTICK_Config+0x28>)
 8000834:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000838:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000850:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000852:	4c10      	ldr	r4, [pc, #64]	; (8000894 <HAL_PWREx_ConfigSupply+0x44>)
 8000854:	68e3      	ldr	r3, [r4, #12]
 8000856:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800085a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800085c:	d105      	bne.n	800086a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800085e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000862:	1a18      	subs	r0, r3, r0
 8000864:	bf18      	it	ne
 8000866:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000868:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800086a:	f023 0307 	bic.w	r3, r3, #7
 800086e:	4303      	orrs	r3, r0
 8000870:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8000872:	f7ff ff81 	bl	8000778 <HAL_GetTick>
 8000876:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000878:	e005      	b.n	8000886 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800087a:	f7ff ff7d 	bl	8000778 <HAL_GetTick>
 800087e:	1b40      	subs	r0, r0, r5
 8000880:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000884:	d804      	bhi.n	8000890 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000886:	6863      	ldr	r3, [r4, #4]
 8000888:	049b      	lsls	r3, r3, #18
 800088a:	d5f6      	bpl.n	800087a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
}
 800088e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000890:	2001      	movs	r0, #1
}
 8000892:	bd38      	pop	{r3, r4, r5, pc}
 8000894:	58024800 	.word	0x58024800

08000898 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000898:	2800      	cmp	r0, #0
 800089a:	f000 81bd 	beq.w	8000c18 <HAL_RCC_OscConfig+0x380>
{
 800089e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a0:	6803      	ldr	r3, [r0, #0]
 80008a2:	4604      	mov	r4, r0
 80008a4:	07d9      	lsls	r1, r3, #31
 80008a6:	d52e      	bpl.n	8000906 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008a8:	4993      	ldr	r1, [pc, #588]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 80008aa:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80008ac:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008ae:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80008b2:	2a10      	cmp	r2, #16
 80008b4:	f000 80f0 	beq.w	8000a98 <HAL_RCC_OscConfig+0x200>
 80008b8:	2a18      	cmp	r2, #24
 80008ba:	f000 80e8 	beq.w	8000a8e <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008be:	6863      	ldr	r3, [r4, #4]
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	f000 8108 	beq.w	8000ad8 <HAL_RCC_OscConfig+0x240>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f000 8146 	beq.w	8000b5a <HAL_RCC_OscConfig+0x2c2>
 80008ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008d2:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	f000 8254 	beq.w	8000d82 <HAL_RCC_OscConfig+0x4ea>
 80008da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008e8:	f7ff ff46 	bl	8000778 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008ec:	4e82      	ldr	r6, [pc, #520]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80008ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008f0:	e005      	b.n	80008fe <HAL_RCC_OscConfig+0x66>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008f2:	f7ff ff41 	bl	8000778 <HAL_GetTick>
 80008f6:	1b40      	subs	r0, r0, r5
 80008f8:	2864      	cmp	r0, #100	; 0x64
 80008fa:	f200 812c 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008fe:	6833      	ldr	r3, [r6, #0]
 8000900:	039b      	lsls	r3, r3, #14
 8000902:	d5f6      	bpl.n	80008f2 <HAL_RCC_OscConfig+0x5a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	079d      	lsls	r5, r3, #30
 8000908:	d47e      	bmi.n	8000a08 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800090a:	06d9      	lsls	r1, r3, #27
 800090c:	d528      	bpl.n	8000960 <HAL_RCC_OscConfig+0xc8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800090e:	497a      	ldr	r1, [pc, #488]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000910:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000912:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000914:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000918:	2a08      	cmp	r2, #8
 800091a:	f000 80cd 	beq.w	8000ab8 <HAL_RCC_OscConfig+0x220>
 800091e:	2a18      	cmp	r2, #24
 8000920:	f000 80c5 	beq.w	8000aae <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000924:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000926:	4d74      	ldr	r5, [pc, #464]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 814e 	beq.w	8000bca <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000936:	f7ff ff1f 	bl	8000778 <HAL_GetTick>
 800093a:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800093c:	e005      	b.n	800094a <HAL_RCC_OscConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800093e:	f7ff ff1b 	bl	8000778 <HAL_GetTick>
 8000942:	1b80      	subs	r0, r0, r6
 8000944:	2802      	cmp	r0, #2
 8000946:	f200 8106 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	d5f6      	bpl.n	800093e <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000950:	68eb      	ldr	r3, [r5, #12]
 8000952:	6a22      	ldr	r2, [r4, #32]
 8000954:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000958:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800095c:	60eb      	str	r3, [r5, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	071d      	lsls	r5, r3, #28
 8000962:	d516      	bpl.n	8000992 <HAL_RCC_OscConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000964:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000966:	4d64      	ldr	r5, [pc, #400]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000968:	2b00      	cmp	r3, #0
 800096a:	f000 810c 	beq.w	8000b86 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 800096e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	676b      	str	r3, [r5, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000976:	f7ff feff 	bl	8000778 <HAL_GetTick>
 800097a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800097c:	e005      	b.n	800098a <HAL_RCC_OscConfig+0xf2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fefb 	bl	8000778 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	f200 80e6 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800098a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800098c:	0798      	lsls	r0, r3, #30
 800098e:	d5f6      	bpl.n	800097e <HAL_RCC_OscConfig+0xe6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	069a      	lsls	r2, r3, #26
 8000994:	d516      	bpl.n	80009c4 <HAL_RCC_OscConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000996:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000998:	4d57      	ldr	r5, [pc, #348]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 8104 	beq.w	8000ba8 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80009a8:	f7ff fee6 	bl	8000778 <HAL_GetTick>
 80009ac:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80009ae:	e005      	b.n	80009bc <HAL_RCC_OscConfig+0x124>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80009b0:	f7ff fee2 	bl	8000778 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	2802      	cmp	r0, #2
 80009b8:	f200 80cd 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	049f      	lsls	r7, r3, #18
 80009c0:	d5f6      	bpl.n	80009b0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	0759      	lsls	r1, r3, #29
 80009c6:	f100 808d 	bmi.w	8000ae4 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009cc:	b1d0      	cbz	r0, 8000a04 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80009ce:	4d4a      	ldr	r5, [pc, #296]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 80009d0:	692b      	ldr	r3, [r5, #16]
 80009d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009d6:	2b18      	cmp	r3, #24
 80009d8:	f000 8185 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x44e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009dc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009e4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009e6:	f000 8119 	beq.w	8000c1c <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009ea:	f7ff fec5 	bl	8000778 <HAL_GetTick>
 80009ee:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80009f0:	e005      	b.n	80009fe <HAL_RCC_OscConfig+0x166>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009f2:	f7ff fec1 	bl	8000778 <HAL_GetTick>
 80009f6:	1b00      	subs	r0, r0, r4
 80009f8:	2802      	cmp	r0, #2
 80009fa:	f200 80ac 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	019b      	lsls	r3, r3, #6
 8000a02:	d4f6      	bmi.n	80009f2 <HAL_RCC_OscConfig+0x15a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8000a04:	2000      	movs	r0, #0
}
 8000a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a08:	4a3b      	ldr	r2, [pc, #236]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000a0a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a0e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000a12:	d122      	bne.n	8000a5a <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000a16:	68e2      	ldr	r2, [r4, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	0759      	lsls	r1, r3, #29
 8000a1c:	d501      	bpl.n	8000a22 <HAL_RCC_OscConfig+0x18a>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d043      	beq.n	8000aaa <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a22:	4d35      	ldr	r5, [pc, #212]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	f023 0319 	bic.w	r3, r3, #25
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fea3 	bl	8000778 <HAL_GetTick>
 8000a32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a34:	e005      	b.n	8000a42 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a36:	f7ff fe9f 	bl	8000778 <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	2802      	cmp	r0, #2
 8000a3e:	f200 808a 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	075b      	lsls	r3, r3, #29
 8000a46:	d5f6      	bpl.n	8000a36 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a48:	686b      	ldr	r3, [r5, #4]
 8000a4a:	6922      	ldr	r2, [r4, #16]
 8000a4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000a50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a54:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	e757      	b.n	800090a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a5a:	2b18      	cmp	r3, #24
 8000a5c:	f000 80d8 	beq.w	8000c10 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a60:	4d25      	ldr	r5, [pc, #148]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a62:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a64:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	f000 80c1 	beq.w	8000bee <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a6c:	f023 0319 	bic.w	r3, r3, #25
 8000a70:	4313      	orrs	r3, r2
 8000a72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a74:	f7ff fe80 	bl	8000778 <HAL_GetTick>
 8000a78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a7a:	e004      	b.n	8000a86 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fe7c 	bl	8000778 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d867      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	075f      	lsls	r7, r3, #29
 8000a8a:	d5f7      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x1e4>
 8000a8c:	e7dc      	b.n	8000a48 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a8e:	f001 0103 	and.w	r1, r1, #3
 8000a92:	2902      	cmp	r1, #2
 8000a94:	f47f af13 	bne.w	80008be <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	0392      	lsls	r2, r2, #14
 8000a9e:	f57f af32 	bpl.w	8000906 <HAL_RCC_OscConfig+0x6e>
 8000aa2:	6862      	ldr	r2, [r4, #4]
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f47f af2e 	bne.w	8000906 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8000aaa:	2001      	movs	r0, #1
}
 8000aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000aae:	f001 0103 	and.w	r1, r1, #3
 8000ab2:	2901      	cmp	r1, #1
 8000ab4:	f47f af36 	bne.w	8000924 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	05d2      	lsls	r2, r2, #23
 8000abe:	d502      	bpl.n	8000ac6 <HAL_RCC_OscConfig+0x22e>
 8000ac0:	69e2      	ldr	r2, [r4, #28]
 8000ac2:	2a80      	cmp	r2, #128	; 0x80
 8000ac4:	d1f1      	bne.n	8000aaa <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ac6:	490c      	ldr	r1, [pc, #48]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000ac8:	6a20      	ldr	r0, [r4, #32]
 8000aca:	68ca      	ldr	r2, [r1, #12]
 8000acc:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000ad0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000ad4:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ad6:	e743      	b.n	8000960 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_RCC_OscConfig+0x260>)
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae2:	e701      	b.n	80008e8 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8000ae4:	4d05      	ldr	r5, [pc, #20]	; (8000afc <HAL_RCC_OscConfig+0x264>)
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000aee:	f7ff fe43 	bl	8000778 <HAL_GetTick>
 8000af2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000af4:	e009      	b.n	8000b0a <HAL_RCC_OscConfig+0x272>
 8000af6:	bf00      	nop
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fe3a 	bl	8000778 <HAL_GetTick>
 8000b04:	1b80      	subs	r0, r0, r6
 8000b06:	2864      	cmp	r0, #100	; 0x64
 8000b08:	d825      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	05da      	lsls	r2, r3, #23
 8000b0e:	d5f7      	bpl.n	8000b00 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	68a3      	ldr	r3, [r4, #8]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	f000 815c 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x538>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 813a 	beq.w	8000d92 <HAL_RCC_OscConfig+0x4fa>
 8000b1e:	2b05      	cmp	r3, #5
 8000b20:	4ba8      	ldr	r3, [pc, #672]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
 8000b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b24:	f000 815a 	beq.w	8000ddc <HAL_RCC_OscConfig+0x544>
 8000b28:	f022 0201 	bic.w	r2, r2, #1
 8000b2c:	671a      	str	r2, [r3, #112]	; 0x70
 8000b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b30:	f022 0204 	bic.w	r2, r2, #4
 8000b34:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b36:	f7ff fe1f 	bl	8000778 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b3a:	4ea2      	ldr	r6, [pc, #648]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b3c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b40:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b42:	e004      	b.n	8000b4e <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b44:	f7ff fe18 	bl	8000778 <HAL_GetTick>
 8000b48:	1b40      	subs	r0, r0, r5
 8000b4a:	42b8      	cmp	r0, r7
 8000b4c:	d803      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b4e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b50:	079b      	lsls	r3, r3, #30
 8000b52:	d5f7      	bpl.n	8000b44 <HAL_RCC_OscConfig+0x2ac>
 8000b54:	e739      	b.n	80009ca <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8000b56:	2003      	movs	r0, #3
}
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5a:	4d9a      	ldr	r5, [pc, #616]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	602b      	str	r3, [r5, #0]
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fe04 	bl	8000778 <HAL_GetTick>
 8000b70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b72:	e004      	b.n	8000b7e <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fe00 	bl	8000778 <HAL_GetTick>
 8000b78:	1b80      	subs	r0, r0, r6
 8000b7a:	2864      	cmp	r0, #100	; 0x64
 8000b7c:	d8eb      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b7e:	682b      	ldr	r3, [r5, #0]
 8000b80:	039f      	lsls	r7, r3, #14
 8000b82:	d4f7      	bmi.n	8000b74 <HAL_RCC_OscConfig+0x2dc>
 8000b84:	e6be      	b.n	8000904 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8000b86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fdf3 	bl	8000778 <HAL_GetTick>
 8000b92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b94:	e004      	b.n	8000ba0 <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b96:	f7ff fdef 	bl	8000778 <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d8da      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ba0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ba2:	0799      	lsls	r1, r3, #30
 8000ba4:	d4f7      	bmi.n	8000b96 <HAL_RCC_OscConfig+0x2fe>
 8000ba6:	e6f3      	b.n	8000990 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fde2 	bl	8000778 <HAL_GetTick>
 8000bb4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bb6:	e004      	b.n	8000bc2 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bb8:	f7ff fdde 	bl	8000778 <HAL_GetTick>
 8000bbc:	1b80      	subs	r0, r0, r6
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d8c9      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	0498      	lsls	r0, r3, #18
 8000bc6:	d4f7      	bmi.n	8000bb8 <HAL_RCC_OscConfig+0x320>
 8000bc8:	e6fb      	b.n	80009c2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fdd1 	bl	8000778 <HAL_GetTick>
 8000bd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000bd8:	e004      	b.n	8000be4 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000bda:	f7ff fdcd 	bl	8000778 <HAL_GetTick>
 8000bde:	1b80      	subs	r0, r0, r6
 8000be0:	2802      	cmp	r0, #2
 8000be2:	d8b8      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	05df      	lsls	r7, r3, #23
 8000be8:	d4f7      	bmi.n	8000bda <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	e6b8      	b.n	8000960 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8000bee:	f023 0301 	bic.w	r3, r3, #1
 8000bf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fdc0 	bl	8000778 <HAL_GetTick>
 8000bf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bfa:	e004      	b.n	8000c06 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fdbc 	bl	8000778 <HAL_GetTick>
 8000c00:	1b80      	subs	r0, r0, r6
 8000c02:	2802      	cmp	r0, #2
 8000c04:	d8a7      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	0758      	lsls	r0, r3, #29
 8000c0a:	d4f7      	bmi.n	8000bfc <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	e67c      	b.n	800090a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c10:	0790      	lsls	r0, r2, #30
 8000c12:	f47f af25 	bne.w	8000a60 <HAL_RCC_OscConfig+0x1c8>
 8000c16:	e6fd      	b.n	8000a14 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8000c18:	2001      	movs	r0, #1
}
 8000c1a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fdac 	bl	8000778 <HAL_GetTick>
 8000c20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c22:	e004      	b.n	8000c2e <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c24:	f7ff fda8 	bl	8000778 <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d893      	bhi.n	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	0199      	lsls	r1, r3, #6
 8000c32:	d4f7      	bmi.n	8000c24 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c34:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000c36:	4b64      	ldr	r3, [pc, #400]	; (8000dc8 <HAL_RCC_OscConfig+0x530>)
 8000c38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c3a:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000c3c:	4963      	ldr	r1, [pc, #396]	; (8000dcc <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000c3e:	4e61      	ldr	r6, [pc, #388]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c40:	4313      	orrs	r3, r2
 8000c42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c44:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c48:	62ab      	str	r3, [r5, #40]	; 0x28
 8000c4a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	3a01      	subs	r2, #1
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	0412      	lsls	r2, r2, #16
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c60:	3a01      	subs	r2, #1
 8000c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c66:	4313      	orrs	r3, r2
 8000c68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000c6a:	3a01      	subs	r2, #1
 8000c6c:	0612      	lsls	r2, r2, #24
 8000c6e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000c72:	4313      	orrs	r3, r2
 8000c74:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8000c76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000c7e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c82:	4011      	ands	r1, r2
 8000c84:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000c88:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000c8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c8e:	f023 030c 	bic.w	r3, r3, #12
 8000c92:	4313      	orrs	r3, r2
 8000c94:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000c96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c9a:	f023 0302 	bic.w	r3, r3, #2
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000ca2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000caa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000cb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8000cba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fd55 	bl	8000778 <HAL_GetTick>
 8000cce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cd0:	e005      	b.n	8000cde <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd2:	f7ff fd51 	bl	8000778 <HAL_GetTick>
 8000cd6:	1b00      	subs	r0, r0, r4
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	f63f af3c 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cde:	6833      	ldr	r3, [r6, #0]
 8000ce0:	019a      	lsls	r2, r3, #6
 8000ce2:	d5f6      	bpl.n	8000cd2 <HAL_RCC_OscConfig+0x43a>
 8000ce4:	e68e      	b.n	8000a04 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ce6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000ce8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000cea:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cec:	f43f ae8b 	beq.w	8000a06 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cf0:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cf4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	f47f aed7 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000cfc:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f47f aed1 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d0a:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8000d0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f47f aeca 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d18:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8000d1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f47f aec3 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d26:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8000d2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f47f aebc 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000d32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d34:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8000d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	f47f aeb5 	bne.w	8000aaa <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000d40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000d42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000d44:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f43f ae5b 	beq.w	8000a04 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
 8000d50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d52:	f023 0301 	bic.w	r3, r3, #1
 8000d56:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8000d58:	f7ff fd0e 	bl	8000778 <HAL_GetTick>
 8000d5c:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8000d5e:	f7ff fd0b 	bl	8000778 <HAL_GetTick>
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d0fb      	beq.n	8000d5e <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8000d68:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000d6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_RCC_OscConfig+0x534>)
 8000d6e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8000d70:	4023      	ands	r3, r4
 8000d72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d76:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8000d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e5aa      	b.n	80008e8 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d92:	4d0c      	ldr	r5, [pc, #48]	; (8000dc4 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d94:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	672b      	str	r3, [r5, #112]	; 0x70
 8000da0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000da2:	f023 0304 	bic.w	r3, r3, #4
 8000da6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000da8:	f7ff fce6 	bl	8000778 <HAL_GetTick>
 8000dac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000dae:	e005      	b.n	8000dbc <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db0:	f7ff fce2 	bl	8000778 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	42b8      	cmp	r0, r7
 8000db8:	f63f aecd 	bhi.w	8000b56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000dbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	d4f6      	bmi.n	8000db0 <HAL_RCC_OscConfig+0x518>
 8000dc2:	e602      	b.n	80009ca <HAL_RCC_OscConfig+0x132>
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	fffffc0c 	.word	0xfffffc0c
 8000dcc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_RCC_OscConfig+0x554>)
 8000dd2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dda:	e6ac      	b.n	8000b36 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ddc:	f042 0204 	orr.w	r2, r2, #4
 8000de0:	671a      	str	r2, [r3, #112]	; 0x70
 8000de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000de4:	f042 0201 	orr.w	r2, r2, #1
 8000de8:	671a      	str	r2, [r3, #112]	; 0x70
 8000dea:	e6a4      	b.n	8000b36 <HAL_RCC_OscConfig+0x29e>
 8000dec:	58024400 	.word	0x58024400

08000df0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x120>)
 8000df2:	6913      	ldr	r3, [r2, #16]
 8000df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d004      	beq.n	8000e06 <HAL_RCC_GetSysClockFreq+0x16>
 8000dfc:	2b18      	cmp	r3, #24
 8000dfe:	d00d      	beq.n	8000e1c <HAL_RCC_GetSysClockFreq+0x2c>
 8000e00:	b11b      	cbz	r3, 8000e0a <HAL_RCC_GetSysClockFreq+0x1a>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8000e02:	4844      	ldr	r0, [pc, #272]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x124>)
 8000e04:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e06:	4844      	ldr	r0, [pc, #272]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x128>)
 8000e08:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	0699      	lsls	r1, r3, #26
 8000e0e:	d54a      	bpl.n	8000ea6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000e10:	6813      	ldr	r3, [r2, #0]
 8000e12:	4842      	ldr	r0, [pc, #264]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000e14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000e18:	40d8      	lsrs	r0, r3
 8000e1a:	4770      	bx	lr
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8000e1e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000e20:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000e22:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8000e24:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e28:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000e2a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8000e2e:	d038      	beq.n	8000ea2 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e30:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000e34:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e38:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e3c:	fb05 f101 	mul.w	r1, r5, r1
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	ee07 1a90 	vmov	s15, r1
 8000e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8000e4a:	d002      	beq.n	8000e52 <HAL_RCC_GetSysClockFreq+0x62>
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d02c      	beq.n	8000eaa <HAL_RCC_GetSysClockFreq+0xba>
 8000e50:	b393      	cbz	r3, 8000eb8 <HAL_RCC_GetSysClockFreq+0xc8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000e52:	ee07 0a90 	vmov	s15, r0
 8000e56:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8000f20 <HAL_RCC_GetSysClockFreq+0x130>
 8000e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e60:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8000e64:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8000f24 <HAL_RCC_GetSysClockFreq+0x134>
 8000e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e78:	eee7 7a25 	vfma.f32	s15, s14, s11
 8000e7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x120>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000e8c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8000ea2:	bc30      	pop	{r4, r5}
 8000ea4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8000ea8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000eaa:	ee07 0a90 	vmov	s15, r0
 8000eae:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8000f28 <HAL_RCC_GetSysClockFreq+0x138>
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	e7d2      	b.n	8000e5e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000eb8:	6813      	ldr	r3, [r2, #0]
 8000eba:	069b      	lsls	r3, r3, #26
 8000ebc:	d520      	bpl.n	8000f00 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ebe:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ec0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ec4:	4915      	ldr	r1, [pc, #84]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ec6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8000eca:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ecc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8000f24 <HAL_RCC_GetSysClockFreq+0x134>
 8000ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000edc:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ede:	ee06 3a90 	vmov	s13, r3
 8000ee2:	ee06 1a10 	vmov	s12, r1
 8000ee6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000eea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000eee:	eee7 6a05 	vfma.f32	s13, s14, s10
 8000ef2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000ef6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8000efa:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000efe:	e7c1      	b.n	8000e84 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000f00:	ee07 0a90 	vmov	s15, r0
 8000f04:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8000f2c <HAL_RCC_GetSysClockFreq+0x13c>
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	e7a7      	b.n	8000e5e <HAL_RCC_GetSysClockFreq+0x6e>
 8000f0e:	bf00      	nop
 8000f10:	58024400 	.word	0x58024400
 8000f14:	003d0900 	.word	0x003d0900
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	03d09000 	.word	0x03d09000
 8000f20:	4a742400 	.word	0x4a742400
 8000f24:	39000000 	.word	0x39000000
 8000f28:	4af42400 	.word	0x4af42400
 8000f2c:	4c742400 	.word	0x4c742400

08000f30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f000 810c 	beq.w	800114e <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f36:	4a8c      	ldr	r2, [pc, #560]	; (8001168 <HAL_RCC_ClockConfig+0x238>)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	428b      	cmp	r3, r1
{
 8000f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f48:	d20c      	bcs.n	8000f64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d002      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
}
 8000f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	075f      	lsls	r7, r3, #29
 8000f68:	d50b      	bpl.n	8000f82 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8000f6a:	4980      	ldr	r1, [pc, #512]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000f6c:	6920      	ldr	r0, [r4, #16]
 8000f6e:	698a      	ldr	r2, [r1, #24]
 8000f70:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d904      	bls.n	8000f82 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000f78:	698a      	ldr	r2, [r1, #24]
 8000f7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f7e:	4302      	orrs	r2, r0
 8000f80:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f82:	071e      	lsls	r6, r3, #28
 8000f84:	d50b      	bpl.n	8000f9e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000f86:	4979      	ldr	r1, [pc, #484]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000f88:	6960      	ldr	r0, [r4, #20]
 8000f8a:	69ca      	ldr	r2, [r1, #28]
 8000f8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f90:	4290      	cmp	r0, r2
 8000f92:	d904      	bls.n	8000f9e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000f94:	69ca      	ldr	r2, [r1, #28]
 8000f96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f9a:	4302      	orrs	r2, r0
 8000f9c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f9e:	06d8      	lsls	r0, r3, #27
 8000fa0:	d50b      	bpl.n	8000fba <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000fa2:	4972      	ldr	r1, [pc, #456]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000fa4:	69a0      	ldr	r0, [r4, #24]
 8000fa6:	69ca      	ldr	r2, [r1, #28]
 8000fa8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d904      	bls.n	8000fba <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000fb0:	69ca      	ldr	r2, [r1, #28]
 8000fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000fb6:	4302      	orrs	r2, r0
 8000fb8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000fba:	0699      	lsls	r1, r3, #26
 8000fbc:	d50b      	bpl.n	8000fd6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000fbe:	496b      	ldr	r1, [pc, #428]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000fc0:	69e0      	ldr	r0, [r4, #28]
 8000fc2:	6a0a      	ldr	r2, [r1, #32]
 8000fc4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000fc8:	4290      	cmp	r0, r2
 8000fca:	d904      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8000fcc:	6a0a      	ldr	r2, [r1, #32]
 8000fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd6:	079a      	lsls	r2, r3, #30
 8000fd8:	f140 80ab 	bpl.w	8001132 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8000fdc:	4863      	ldr	r0, [pc, #396]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000fde:	68e1      	ldr	r1, [r4, #12]
 8000fe0:	6982      	ldr	r2, [r0, #24]
 8000fe2:	f002 020f 	and.w	r2, r2, #15
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d904      	bls.n	8000ff4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fea:	6982      	ldr	r2, [r0, #24]
 8000fec:	f022 020f 	bic.w	r2, r2, #15
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff4:	07d8      	lsls	r0, r3, #31
 8000ff6:	d530      	bpl.n	800105a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8000ff8:	4a5c      	ldr	r2, [pc, #368]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 8000ffa:	68a1      	ldr	r1, [r4, #8]
 8000ffc:	6993      	ldr	r3, [r2, #24]
 8000ffe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001002:	430b      	orrs	r3, r1
 8001004:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001006:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001008:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100a:	2902      	cmp	r1, #2
 800100c:	f000 80a1 	beq.w	8001152 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001010:	2903      	cmp	r1, #3
 8001012:	f000 8098 	beq.w	8001146 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001016:	2901      	cmp	r1, #1
 8001018:	f000 80a1 	beq.w	800115e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800101c:	0758      	lsls	r0, r3, #29
 800101e:	d59e      	bpl.n	8000f5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001020:	4e52      	ldr	r6, [pc, #328]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001026:	6933      	ldr	r3, [r6, #16]
 8001028:	f023 0307 	bic.w	r3, r3, #7
 800102c:	430b      	orrs	r3, r1
 800102e:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8001030:	f7ff fba2 	bl	8000778 <HAL_GetTick>
 8001034:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	e005      	b.n	8001044 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fb9e 	bl	8000778 <HAL_GetTick>
 800103c:	1bc0      	subs	r0, r0, r7
 800103e:	4540      	cmp	r0, r8
 8001040:	f200 808b 	bhi.w	800115a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001044:	6933      	ldr	r3, [r6, #16]
 8001046:	6862      	ldr	r2, [r4, #4]
 8001048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800104c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001050:	d1f2      	bne.n	8001038 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	0799      	lsls	r1, r3, #30
 8001056:	d506      	bpl.n	8001066 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001058:	68e1      	ldr	r1, [r4, #12]
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 800105c:	6982      	ldr	r2, [r0, #24]
 800105e:	f002 020f 	and.w	r2, r2, #15
 8001062:	428a      	cmp	r2, r1
 8001064:	d869      	bhi.n	800113a <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001066:	4940      	ldr	r1, [pc, #256]	; (8001168 <HAL_RCC_ClockConfig+0x238>)
 8001068:	680a      	ldr	r2, [r1, #0]
 800106a:	f002 020f 	and.w	r2, r2, #15
 800106e:	42aa      	cmp	r2, r5
 8001070:	d90a      	bls.n	8001088 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	680a      	ldr	r2, [r1, #0]
 8001074:	f022 020f 	bic.w	r2, r2, #15
 8001078:	432a      	orrs	r2, r5
 800107a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800107c:	680a      	ldr	r2, [r1, #0]
 800107e:	f002 020f 	and.w	r2, r2, #15
 8001082:	42aa      	cmp	r2, r5
 8001084:	f47f af6b 	bne.w	8000f5e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001088:	075a      	lsls	r2, r3, #29
 800108a:	d50b      	bpl.n	80010a4 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800108c:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 800108e:	6920      	ldr	r0, [r4, #16]
 8001090:	698a      	ldr	r2, [r1, #24]
 8001092:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001096:	4290      	cmp	r0, r2
 8001098:	d204      	bcs.n	80010a4 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800109a:	698a      	ldr	r2, [r1, #24]
 800109c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010a0:	4302      	orrs	r2, r0
 80010a2:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	071f      	lsls	r7, r3, #28
 80010a6:	d50b      	bpl.n	80010c0 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80010a8:	4930      	ldr	r1, [pc, #192]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 80010aa:	6960      	ldr	r0, [r4, #20]
 80010ac:	69ca      	ldr	r2, [r1, #28]
 80010ae:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80010b2:	4290      	cmp	r0, r2
 80010b4:	d204      	bcs.n	80010c0 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80010b6:	69ca      	ldr	r2, [r1, #28]
 80010b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010bc:	4302      	orrs	r2, r0
 80010be:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	06de      	lsls	r6, r3, #27
 80010c2:	d50b      	bpl.n	80010dc <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80010c4:	4929      	ldr	r1, [pc, #164]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 80010c6:	69a0      	ldr	r0, [r4, #24]
 80010c8:	69ca      	ldr	r2, [r1, #28]
 80010ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80010ce:	4290      	cmp	r0, r2
 80010d0:	d204      	bcs.n	80010dc <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80010d2:	69ca      	ldr	r2, [r1, #28]
 80010d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010d8:	4302      	orrs	r2, r0
 80010da:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80010dc:	069d      	lsls	r5, r3, #26
 80010de:	d50b      	bpl.n	80010f8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 80010e2:	69e1      	ldr	r1, [r4, #28]
 80010e4:	6a13      	ldr	r3, [r2, #32]
 80010e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d204      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80010ee:	6a13      	ldr	r3, [r2, #32]
 80010f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f8:	f7ff fe7a 	bl	8000df0 <HAL_RCC_GetSysClockFreq>
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_RCC_ClockConfig+0x23c>)
 80010fe:	4603      	mov	r3, r0
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <HAL_RCC_ClockConfig+0x240>)
 8001102:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001104:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001106:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800110a:	4d1a      	ldr	r5, [pc, #104]	; (8001174 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110c:	f002 020f 	and.w	r2, r2, #15
 8001110:	4c19      	ldr	r4, [pc, #100]	; (8001178 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001112:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001114:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001116:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800111c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001120:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8001122:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8001124:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001126:	40d3      	lsrs	r3, r2
 8001128:	6023      	str	r3, [r4, #0]
}
 800112a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800112e:	f7ff bac1 	b.w	80006b4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	07da      	lsls	r2, r3, #31
 8001134:	f53f af60 	bmi.w	8000ff8 <HAL_RCC_ClockConfig+0xc8>
 8001138:	e795      	b.n	8001066 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113a:	6982      	ldr	r2, [r0, #24]
 800113c:	f022 020f 	bic.w	r2, r2, #15
 8001140:	430a      	orrs	r2, r1
 8001142:	6182      	str	r2, [r0, #24]
 8001144:	e78f      	b.n	8001066 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001146:	019f      	lsls	r7, r3, #6
 8001148:	f53f af6a 	bmi.w	8001020 <HAL_RCC_ClockConfig+0xf0>
 800114c:	e707      	b.n	8000f5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
}
 8001150:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	f53f af64 	bmi.w	8001020 <HAL_RCC_ClockConfig+0xf0>
 8001158:	e701      	b.n	8000f5e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
 800115c:	e700      	b.n	8000f60 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800115e:	05de      	lsls	r6, r3, #23
 8001160:	f53f af5e 	bmi.w	8001020 <HAL_RCC_ClockConfig+0xf0>
 8001164:	e6fb      	b.n	8000f5e <HAL_RCC_ClockConfig+0x2e>
 8001166:	bf00      	nop
 8001168:	52002000 	.word	0x52002000
 800116c:	58024400 	.word	0x58024400
 8001170:	08005b90 	.word	0x08005b90
 8001174:	24000000 	.word	0x24000000
 8001178:	24000004 	.word	0x24000004
 800117c:	2400000c 	.word	0x2400000c

08001180 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8001180:	b530      	push	{r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001182:	4c15      	ldr	r4, [pc, #84]	; (80011d8 <MX_X_CUBE_AI_Init+0x58>)
{
 8001184:	b083      	sub	sp, #12
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <MX_X_CUBE_AI_Init+0x5c>)
 8001188:	f002 fe3c 	bl	8003e04 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800118c:	4914      	ldr	r1, [pc, #80]	; (80011e0 <MX_X_CUBE_AI_Init+0x60>)
 800118e:	2200      	movs	r2, #0
 8001190:	4620      	mov	r0, r4
 8001192:	f000 f97b 	bl	800148c <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001196:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 800119a:	d115      	bne.n	80011c8 <MX_X_CUBE_AI_Init+0x48>
  ai_input = ai_network_inputs_get(network, NULL);
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	4d11      	ldr	r5, [pc, #68]	; (80011e4 <MX_X_CUBE_AI_Init+0x64>)
 80011a0:	9101      	str	r1, [sp, #4]
 80011a2:	f000 f85d 	bl	8001260 <ai_network_inputs_get>
 80011a6:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network, NULL);
 80011a8:	9901      	ldr	r1, [sp, #4]
 80011aa:	6820      	ldr	r0, [r4, #0]
  ai_input = ai_network_inputs_get(network, NULL);
 80011ac:	602b      	str	r3, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80011ae:	f000 f865 	bl	800127c <ai_network_outputs_get>
 80011b2:	4c0d      	ldr	r4, [pc, #52]	; (80011e8 <MX_X_CUBE_AI_Init+0x68>)
	data_ins[idx] = ai_input[idx].data;
 80011b4:	682a      	ldr	r2, [r5, #0]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_X_CUBE_AI_Init+0x6c>)
 80011b8:	6852      	ldr	r2, [r2, #4]
	data_outs[idx] = ai_output[idx].data;
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <MX_X_CUBE_AI_Init+0x70>)
  ai_output = ai_network_outputs_get(network, NULL);
 80011bc:	6020      	str	r0, [r4, #0]
	data_outs[idx] = ai_output[idx].data;
 80011be:	6840      	ldr	r0, [r0, #4]
	data_ins[idx] = ai_input[idx].data;
 80011c0:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 80011c2:	6008      	str	r0, [r1, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 80011c4:	b003      	add	sp, #12
 80011c6:	bd30      	pop	{r4, r5, pc}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80011c8:	0a03      	lsrs	r3, r0, #8
 80011ca:	460a      	mov	r2, r1
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_X_CUBE_AI_Init+0x74>)
 80011ce:	490a      	ldr	r1, [pc, #40]	; (80011f8 <MX_X_CUBE_AI_Init+0x78>)
 80011d0:	f002 fdb2 	bl	8003d38 <iprintf>
  do {} while (1);
 80011d4:	e7fe      	b.n	80011d4 <MX_X_CUBE_AI_Init+0x54>
 80011d6:	bf00      	nop
 80011d8:	24000cb4 	.word	0x24000cb4
 80011dc:	08005ba0 	.word	0x08005ba0
 80011e0:	24000010 	.word	0x24000010
 80011e4:	24000ca4 	.word	0x24000ca4
 80011e8:	24000ca8 	.word	0x24000ca8
 80011ec:	24000cac 	.word	0x24000cac
 80011f0:	24000cb0 	.word	0x24000cb0
 80011f4:	08005bdc 	.word	0x08005bdc
 80011f8:	08005bc0 	.word	0x08005bc0

080011fc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 80011fe:	4c10      	ldr	r4, [pc, #64]	; (8001240 <MX_X_CUBE_AI_Process+0x44>)
  printf("TEMPLATE - run - main loop\r\n");
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <MX_X_CUBE_AI_Process+0x48>)
 8001202:	f002 fdff 	bl	8003e04 <puts>
  if (network) {
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	b190      	cbz	r0, 8001230 <MX_X_CUBE_AI_Process+0x34>
 800120a:	4e0f      	ldr	r6, [pc, #60]	; (8001248 <MX_X_CUBE_AI_Process+0x4c>)
 800120c:	4d0f      	ldr	r5, [pc, #60]	; (800124c <MX_X_CUBE_AI_Process+0x50>)
  batch = ai_network_run(network, ai_input, ai_output);
 800120e:	6832      	ldr	r2, [r6, #0]
 8001210:	6829      	ldr	r1, [r5, #0]
 8001212:	f000 f995 	bl	8001540 <ai_network_run>
  if (batch != 1) {
 8001216:	2801      	cmp	r0, #1
    ai_log_err(ai_network_get_error(network),
 8001218:	6820      	ldr	r0, [r4, #0]
  if (batch != 1) {
 800121a:	d0f8      	beq.n	800120e <MX_X_CUBE_AI_Process+0x12>
    ai_log_err(ai_network_get_error(network),
 800121c:	f000 f81e 	bl	800125c <ai_network_get_error>
 8001220:	4602      	mov	r2, r0
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001222:	490b      	ldr	r1, [pc, #44]	; (8001250 <MX_X_CUBE_AI_Process+0x54>)
 8001224:	0a13      	lsrs	r3, r2, #8
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_X_CUBE_AI_Process+0x58>)
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f002 fd85 	bl	8003d38 <iprintf>
  do {} while (1);
 800122e:	e7fe      	b.n	800122e <MX_X_CUBE_AI_Process+0x32>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001230:	2310      	movs	r3, #16
 8001232:	2211      	movs	r2, #17
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <MX_X_CUBE_AI_Process+0x5c>)
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_X_CUBE_AI_Process+0x58>)
 8001238:	f002 fd7e 	bl	8003d38 <iprintf>
  do {} while (1);
 800123c:	e7fe      	b.n	800123c <MX_X_CUBE_AI_Process+0x40>
 800123e:	bf00      	nop
 8001240:	24000cb4 	.word	0x24000cb4
 8001244:	08005c10 	.word	0x08005c10
 8001248:	24000ca8 	.word	0x24000ca8
 800124c:	24000ca4 	.word	0x24000ca4
 8001250:	08005c2c 	.word	0x08005c2c
 8001254:	08005bdc 	.word	0x08005bdc
 8001258:	08005c3c 	.word	0x08005c3c

0800125c <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800125c:	f000 baa4 	b.w	80017a8 <ai_platform_network_get_error>

08001260 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001260:	b108      	cbz	r0, 8001266 <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001262:	f000 bab3 	b.w	80017cc <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <ai_network_inputs_get+0x14>)
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800126a:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800126c:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 800126e:	f000 baad 	b.w	80017cc <ai_platform_inputs_get>
 8001272:	bf00      	nop
 8001274:	24000544 	.word	0x24000544
 8001278:	a1c00100 	.word	0xa1c00100

0800127c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800127c:	b108      	cbz	r0, 8001282 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 800127e:	f000 bb1d 	b.w	80018bc <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <ai_network_outputs_get+0x14>)
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001286:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001288:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 800128a:	f000 bb17 	b.w	80018bc <ai_platform_outputs_get>
 800128e:	bf00      	nop
 8001290:	24000544 	.word	0x24000544
 8001294:	a1c00100 	.word	0xa1c00100

08001298 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8001298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	4606      	mov	r6, r0
 800129e:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80012a0:	f000 fbc4 	bl	8001a2c <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80012a4:	4604      	mov	r4, r0
 80012a6:	2800      	cmp	r0, #0
 80012a8:	f000 80af 	beq.w	800140a <ai_network_init+0x172>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80012ac:	4f5e      	ldr	r7, [pc, #376]	; (8001428 <ai_network_init+0x190>)
 80012ae:	462a      	mov	r2, r5
 80012b0:	2101      	movs	r1, #1
 80012b2:	4638      	mov	r0, r7
 80012b4:	f000 f9ae 	bl	8001614 <ai_platform_get_weights_map>
 80012b8:	4681      	mov	r9, r0
 80012ba:	2800      	cmp	r0, #0
 80012bc:	f000 80a7 	beq.w	800140e <ai_network_init+0x176>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012c0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8001470 <ai_network_init+0x1d8>
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012c4:	4959      	ldr	r1, [pc, #356]	; (800142c <ai_network_init+0x194>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012c6:	f8da 2000 	ldr.w	r2, [sl]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80012ca:	683b      	ldr	r3, [r7, #0]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012cc:	f042 4b80 	orr.w	fp, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012d0:	680a      	ldr	r2, [r1, #0]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80012d2:	4f57      	ldr	r7, [pc, #348]	; (8001430 <ai_network_init+0x198>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80012d4:	f8ca b000 	str.w	fp, [sl]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80012d8:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001474 <ai_network_init+0x1dc>
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80012dc:	f8df e198 	ldr.w	lr, [pc, #408]	; 8001478 <ai_network_init+0x1e0>
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80012e0:	4854      	ldr	r0, [pc, #336]	; (8001434 <ai_network_init+0x19c>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80012e2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800147c <ai_network_init+0x1e4>
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 80012e6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8001480 <ai_network_init+0x1e8>
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80012ea:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012ee:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80012f2:	4a51      	ldr	r2, [pc, #324]	; (8001438 <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 80012f4:	449b      	add	fp, r3
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80012f6:	6812      	ldr	r2, [r2, #0]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80012f8:	f8c1 a000 	str.w	sl, [r1]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80012fc:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
 8001300:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001302:	f8c8 b008 	str.w	fp, [r8, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001306:	f8c2 a000 	str.w	sl, [r2]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001310:	f8dc 2000 	ldr.w	r2, [ip]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8001314:	f8c7 a000 	str.w	sl, [r7]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001318:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800131c:	f8de 2000 	ldr.w	r2, [lr]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001320:	f8cc a000 	str.w	sl, [ip]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8001324:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001328:	6802      	ldr	r2, [r0, #0]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800132a:	f8ce a000 	str.w	sl, [lr]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800132e:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001332:	f8d8 2000 	ldr.w	r2, [r8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001336:	f8c0 a000 	str.w	sl, [r0]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800133a:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2048);
 800133e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8001342:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8001346:	f503 6120 	add.w	r1, r3, #2560	; 0xa00
 800134a:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <ai_network_init+0x1a0>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800134c:	f8c8 a000 	str.w	sl, [r8]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001350:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001484 <ai_network_init+0x1ec>
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8001354:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 8001358:	f503 3285 	add.w	r2, r3, #68096	; 0x10a00
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 800135c:	449a      	add	sl, r3
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 800135e:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 68608);
 8001362:	f503 3286 	add.w	r2, r3, #68608	; 0x10c00
 8001366:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 134144);
 800136a:	f503 3203 	add.w	r2, r3, #134144	; 0x20c00
 800136e:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <ai_network_init+0x1a4>)
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001374:	e9c0 aa02 	strd	sl, sl, [r0, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001378:	441a      	add	r2, r3
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800137a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001488 <ai_network_init+0x1f0>
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 800137e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001382:	f8c8 b00c 	str.w	fp, [r8, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8001386:	482e      	ldr	r0, [pc, #184]	; (8001440 <ai_network_init+0x1a8>)
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 8001388:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800138c:	f8da 3000 	ldr.w	r3, [sl]
 8001390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001394:	f8ca 3000 	str.w	r3, [sl]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 800139e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80013a2:	6003      	str	r3, [r0, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80013a4:	4f27      	ldr	r7, [pc, #156]	; (8001444 <ai_network_init+0x1ac>)
 80013a6:	462a      	mov	r2, r5
 80013a8:	2101      	movs	r1, #1
 80013aa:	4638      	mov	r0, r7
 80013ac:	f000 f98a 	bl	80016c4 <ai_platform_get_activations_map>
 80013b0:	4605      	mov	r5, r0
 80013b2:	b390      	cbz	r0, 800141a <ai_network_init+0x182>
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4924      	ldr	r1, [pc, #144]	; (8001448 <ai_network_init+0x1b0>)
 80013b8:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013bc:	f503 7200 	add.w	r2, r3, #512	; 0x200
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 80013c0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013c4:	4921      	ldr	r1, [pc, #132]	; (800144c <ai_network_init+0x1b4>)
 80013c6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013ca:	4921      	ldr	r1, [pc, #132]	; (8001450 <ai_network_init+0x1b8>)
 80013cc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013d0:	4920      	ldr	r1, [pc, #128]	; (8001454 <ai_network_init+0x1bc>)
 80013d2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013d6:	4920      	ldr	r1, [pc, #128]	; (8001458 <ai_network_init+0x1c0>)
 80013d8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013dc:	491f      	ldr	r1, [pc, #124]	; (800145c <ai_network_init+0x1c4>)
 80013de:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013e2:	491f      	ldr	r1, [pc, #124]	; (8001460 <ai_network_init+0x1c8>)
 80013e4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013e8:	491e      	ldr	r1, [pc, #120]	; (8001464 <ai_network_init+0x1cc>)
 80013ea:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80013ee:	491e      	ldr	r1, [pc, #120]	; (8001468 <ai_network_init+0x1d0>)
 80013f0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <ai_network_init+0x1d4>)
 80013f6:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80013fa:	4630      	mov	r0, r6
 80013fc:	f000 fbd6 	bl	8001bac <ai_platform_network_post_init>
 8001400:	4028      	ands	r0, r5
 8001402:	ea09 0900 	and.w	r9, r9, r0
 8001406:	fa5f f089 	uxtb.w	r0, r9

  return ok;
}
 800140a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800140e:	2212      	movs	r2, #18
 8001410:	2130      	movs	r1, #48	; 0x30
 8001412:	4620      	mov	r0, r4
 8001414:	f000 f9d4 	bl	80017c0 <ai_platform_network_set_error>
  return false;
 8001418:	e7c4      	b.n	80013a4 <ai_network_init+0x10c>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800141a:	2213      	movs	r2, #19
 800141c:	4620      	mov	r0, r4
 800141e:	2130      	movs	r1, #48	; 0x30
 8001420:	f000 f9ce 	bl	80017c0 <ai_platform_network_set_error>
  return false;
 8001424:	e7e9      	b.n	80013fa <ai_network_init+0x162>
 8001426:	bf00      	nop
 8001428:	24001160 	.word	0x24001160
 800142c:	240005b0 	.word	0x240005b0
 8001430:	24000658 	.word	0x24000658
 8001434:	24000820 	.word	0x24000820
 8001438:	240006d0 	.word	0x240006d0
 800143c:	00031200 	.word	0x00031200
 8001440:	24000850 	.word	0x24000850
 8001444:	2400115c 	.word	0x2400115c
 8001448:	24000a38 	.word	0x24000a38
 800144c:	240005f8 	.word	0x240005f8
 8001450:	24000918 	.word	0x24000918
 8001454:	240006a0 	.word	0x240006a0
 8001458:	24000968 	.word	0x24000968
 800145c:	24000748 	.word	0x24000748
 8001460:	240009b8 	.word	0x240009b8
 8001464:	240007f0 	.word	0x240007f0
 8001468:	24000a08 	.word	0x24000a08
 800146c:	24000898 	.word	0x24000898
 8001470:	24000628 	.word	0x24000628
 8001474:	24000778 	.word	0x24000778
 8001478:	24000700 	.word	0x24000700
 800147c:	240007a8 	.word	0x240007a8
 8001480:	00030e00 	.word	0x00030e00
 8001484:	00020e00 	.word	0x00020e00
 8001488:	240008c8 	.word	0x240008c8

0800148c <ai_network_create_and_init>:
{
 800148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 8001490:	2300      	movs	r3, #0
{
 8001492:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 8001494:	2405      	movs	r4, #5
{
 8001496:	4689      	mov	r9, r1
  return ai_platform_network_create(
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4619      	mov	r1, r3
{
 800149c:	4616      	mov	r6, r2
  return ai_platform_network_create(
 800149e:	2301      	movs	r3, #1
 80014a0:	4a26      	ldr	r2, [pc, #152]	; (800153c <ai_network_create_and_init+0xb0>)
{
 80014a2:	4607      	mov	r7, r0
  return ai_platform_network_create(
 80014a4:	9400      	str	r4, [sp, #0]
 80014a6:	f000 fa7f 	bl	80019a8 <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 80014aa:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 80014ae:	4605      	mov	r5, r0
 80014b0:	d003      	beq.n	80014ba <ai_network_create_and_init+0x2e>
}
 80014b2:	4628      	mov	r0, r5
 80014b4:	b011      	add	sp, #68	; 0x44
 80014b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 80014ba:	a802      	add	r0, sp, #8
 80014bc:	f000 f842 	bl	8001544 <ai_network_data_params_get>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d035      	beq.n	8001530 <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80014c4:	f1b9 0f00 	cmp.w	r9, #0
 80014c8:	d00f      	beq.n	80014ea <ai_network_create_and_init+0x5e>
 80014ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80014ce:	b163      	cbz	r3, 80014ea <ai_network_create_and_init+0x5e>
 80014d0:	4644      	mov	r4, r8
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80014d2:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80014d4:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80014d6:	a805      	add	r0, sp, #20
 80014d8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80014dc:	f000 f88a 	bl	80015f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80014e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80014e4:	b2a3      	uxth	r3, r4
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d8f3      	bhi.n	80014d2 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80014ea:	b17e      	cbz	r6, 800150c <ai_network_create_and_init+0x80>
 80014ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80014f0:	b163      	cbz	r3, 800150c <ai_network_create_and_init+0x80>
 80014f2:	2400      	movs	r4, #0
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80014f4:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80014f6:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80014f8:	a803      	add	r0, sp, #12
 80014fa:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80014fe:	f000 f879 	bl	80015f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001502:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8001506:	b2a3      	uxth	r3, r4
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f3      	bhi.n	80014f4 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 800150c:	a902      	add	r1, sp, #8
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f7ff fec2 	bl	8001298 <ai_network_init>
 8001514:	b128      	cbz	r0, 8001522 <ai_network_create_and_init+0x96>
  return err;
 8001516:	f368 0507 	bfi	r5, r8, #0, #8
}
 800151a:	4628      	mov	r0, r5
 800151c:	b011      	add	sp, #68	; 0x44
 800151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f000 f940 	bl	80017a8 <ai_platform_network_get_error>
 8001528:	4605      	mov	r5, r0
 800152a:	fa5f f880 	uxtb.w	r8, r0
 800152e:	e7f2      	b.n	8001516 <ai_network_create_and_init+0x8a>
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f000 f939 	bl	80017a8 <ai_platform_network_get_error>
 8001536:	4605      	mov	r5, r0
    return err;
 8001538:	e7bb      	b.n	80014b2 <ai_network_create_and_init+0x26>
 800153a:	bf00      	nop
 800153c:	24000544 	.word	0x24000544

08001540 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8001540:	f000 bb64 	b.w	8001c0c <ai_platform_network_process>

08001544 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8001544:	4603      	mov	r3, r0
 8001546:	b1a0      	cbz	r0, 8001572 <ai_network_data_params_get+0x2e>
{
 8001548:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 800154a:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <ai_network_data_params_get+0x30>)
{
 800154c:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 800154e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001552:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001554:	3408      	adds	r4, #8
 8001556:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 800155a:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800155e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001562:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001566:	4661      	mov	r1, ip
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f903 	bl	8001774 <ai_platform_bind_network_params>
}
 800156e:	b004      	add	sp, #16
 8001570:	bd10      	pop	{r4, pc}
 8001572:	4770      	bx	lr
 8001574:	08005b80 	.word	0x08005b80

08001578 <ai_buffer_get_size>:
 8001578:	b368      	cbz	r0, 80015d6 <ai_buffer_get_size+0x5e>
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <ai_buffer_get_size+0x60>)
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <ai_buffer_get_size+0x64>)
 800157e:	b410      	push	{r4}
 8001580:	6804      	ldr	r4, [r0, #0]
 8001582:	4023      	ands	r3, r4
 8001584:	4293      	cmp	r3, r2
 8001586:	d123      	bne.n	80015d0 <ai_buffer_get_size+0x58>
 8001588:	b311      	cbz	r1, 80015d0 <ai_buffer_get_size+0x58>
 800158a:	6984      	ldr	r4, [r0, #24]
 800158c:	6862      	ldr	r2, [r4, #4]
 800158e:	321f      	adds	r2, #31
 8001590:	f022 021f 	bic.w	r2, r2, #31
 8001594:	7d03      	ldrb	r3, [r0, #20]
 8001596:	6941      	ldr	r1, [r0, #20]
 8001598:	f1a3 0301 	sub.w	r3, r3, #1
 800159c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	095b      	lsrs	r3, r3, #5
 80015a6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80015aa:	da0c      	bge.n	80015c6 <ai_buffer_get_size+0x4e>
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d103      	bne.n	80015b8 <ai_buffer_get_size+0x40>
 80015b0:	2802      	cmp	r0, #2
 80015b2:	f04f 0302 	mov.w	r3, #2
 80015b6:	d006      	beq.n	80015c6 <ai_buffer_get_size+0x4e>
 80015b8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80015bc:	3301      	adds	r3, #1
 80015be:	4298      	cmp	r0, r3
 80015c0:	fb01 f202 	mul.w	r2, r1, r2
 80015c4:	d1f2      	bne.n	80015ac <ai_buffer_get_size+0x34>
 80015c6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80015ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	6984      	ldr	r4, [r0, #24]
 80015d2:	6862      	ldr	r2, [r4, #4]
 80015d4:	e7de      	b.n	8001594 <ai_buffer_get_size+0x1c>
 80015d6:	4770      	bx	lr
 80015d8:	017fffff 	.word	0x017fffff
 80015dc:	000400c0 	.word	0x000400c0

080015e0 <ai_buffer_array_sane>:
 80015e0:	b138      	cbz	r0, 80015f2 <ai_buffer_array_sane+0x12>
 80015e2:	6843      	ldr	r3, [r0, #4]
 80015e4:	b123      	cbz	r3, 80015f0 <ai_buffer_array_sane+0x10>
 80015e6:	8840      	ldrh	r0, [r0, #2]
 80015e8:	3800      	subs	r0, #0
 80015ea:	bf18      	it	ne
 80015ec:	2001      	movne	r0, #1
 80015ee:	4770      	bx	lr
 80015f0:	4618      	mov	r0, r3
 80015f2:	4770      	bx	lr

080015f4 <ai_buffer_array_item_set_address>:
 80015f4:	b150      	cbz	r0, 800160c <ai_buffer_array_item_set_address+0x18>
 80015f6:	6843      	ldr	r3, [r0, #4]
 80015f8:	b14b      	cbz	r3, 800160e <ai_buffer_array_item_set_address+0x1a>
 80015fa:	8840      	ldrh	r0, [r0, #2]
 80015fc:	b900      	cbnz	r0, 8001600 <ai_buffer_array_item_set_address+0xc>
 80015fe:	4770      	bx	lr
 8001600:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001604:	2001      	movs	r0, #1
 8001606:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	4770      	bx	lr
 800160e:	4618      	mov	r0, r3
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <ai_platform_get_weights_map>:
 8001614:	2900      	cmp	r1, #0
 8001616:	bf18      	it	ne
 8001618:	2800      	cmpne	r0, #0
 800161a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161c:	bf0c      	ite	eq
 800161e:	2401      	moveq	r4, #1
 8001620:	2400      	movne	r4, #0
 8001622:	2a00      	cmp	r2, #0
 8001624:	bf08      	it	eq
 8001626:	f044 0401 	orreq.w	r4, r4, #1
 800162a:	b114      	cbz	r4, 8001632 <ai_platform_get_weights_map+0x1e>
 800162c:	2400      	movs	r4, #0
 800162e:	4620      	mov	r0, r4
 8001630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001632:	4616      	mov	r6, r2
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <ai_platform_get_weights_map+0xac>)
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	4605      	mov	r5, r0
 800163a:	460f      	mov	r7, r1
 800163c:	429a      	cmp	r2, r3
 800163e:	d022      	beq.n	8001686 <ai_platform_get_weights_map+0x72>
 8001640:	6870      	ldr	r0, [r6, #4]
 8001642:	2800      	cmp	r0, #0
 8001644:	d0f2      	beq.n	800162c <ai_platform_get_weights_map+0x18>
 8001646:	6806      	ldr	r6, [r0, #0]
 8001648:	429e      	cmp	r6, r3
 800164a:	d006      	beq.n	800165a <ai_platform_get_weights_map+0x46>
 800164c:	f1a1 0401 	sub.w	r4, r1, #1
 8001650:	6028      	str	r0, [r5, #0]
 8001652:	fab4 f484 	clz	r4, r4
 8001656:	0964      	lsrs	r4, r4, #5
 8001658:	e7e9      	b.n	800162e <ai_platform_get_weights_map+0x1a>
 800165a:	3d04      	subs	r5, #4
 800165c:	4602      	mov	r2, r0
 800165e:	4621      	mov	r1, r4
 8001660:	e000      	b.n	8001664 <ai_platform_get_weights_map+0x50>
 8001662:	4619      	mov	r1, r3
 8001664:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001668:	42b3      	cmp	r3, r6
 800166a:	d025      	beq.n	80016b8 <ai_platform_get_weights_map+0xa4>
 800166c:	f845 3f04 	str.w	r3, [r5, #4]!
 8001670:	1c4b      	adds	r3, r1, #1
 8001672:	429f      	cmp	r7, r3
 8001674:	d8f5      	bhi.n	8001662 <ai_platform_get_weights_map+0x4e>
 8001676:	d1da      	bne.n	800162e <ai_platform_get_weights_map+0x1a>
 8001678:	3102      	adds	r1, #2
 800167a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800167e:	42b3      	cmp	r3, r6
 8001680:	d1d5      	bne.n	800162e <ai_platform_get_weights_map+0x1a>
 8001682:	2401      	movs	r4, #1
 8001684:	e7d3      	b.n	800162e <ai_platform_get_weights_map+0x1a>
 8001686:	1d30      	adds	r0, r6, #4
 8001688:	f7ff ffaa 	bl	80015e0 <ai_buffer_array_sane>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0cd      	beq.n	800162c <ai_platform_get_weights_map+0x18>
 8001690:	88f3      	ldrh	r3, [r6, #6]
 8001692:	429f      	cmp	r7, r3
 8001694:	d1ca      	bne.n	800162c <ai_platform_get_weights_map+0x18>
 8001696:	3d04      	subs	r5, #4
 8001698:	4622      	mov	r2, r4
 800169a:	68b3      	ldr	r3, [r6, #8]
 800169c:	4423      	add	r3, r4
 800169e:	341c      	adds	r4, #28
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	b123      	cbz	r3, 80016ae <ai_platform_get_weights_map+0x9a>
 80016a4:	3201      	adds	r2, #1
 80016a6:	f845 3f04 	str.w	r3, [r5, #4]!
 80016aa:	4297      	cmp	r7, r2
 80016ac:	d8f5      	bhi.n	800169a <ai_platform_get_weights_map+0x86>
 80016ae:	1abc      	subs	r4, r7, r2
 80016b0:	fab4 f484 	clz	r4, r4
 80016b4:	0964      	lsrs	r4, r4, #5
 80016b6:	e7ba      	b.n	800162e <ai_platform_get_weights_map+0x1a>
 80016b8:	428f      	cmp	r7, r1
 80016ba:	d1b8      	bne.n	800162e <ai_platform_get_weights_map+0x1a>
 80016bc:	e7e1      	b.n	8001682 <ai_platform_get_weights_map+0x6e>
 80016be:	bf00      	nop
 80016c0:	a1facade 	.word	0xa1facade

080016c4 <ai_platform_get_activations_map>:
 80016c4:	2900      	cmp	r1, #0
 80016c6:	bf18      	it	ne
 80016c8:	2800      	cmpne	r0, #0
 80016ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016cc:	bf0c      	ite	eq
 80016ce:	2401      	moveq	r4, #1
 80016d0:	2400      	movne	r4, #0
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	bf08      	it	eq
 80016d6:	f044 0401 	orreq.w	r4, r4, #1
 80016da:	b114      	cbz	r4, 80016e2 <ai_platform_get_activations_map+0x1e>
 80016dc:	2400      	movs	r4, #0
 80016de:	4620      	mov	r0, r4
 80016e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e2:	4616      	mov	r6, r2
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <ai_platform_get_activations_map+0xac>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	4605      	mov	r5, r0
 80016ea:	460f      	mov	r7, r1
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d022      	beq.n	8001736 <ai_platform_get_activations_map+0x72>
 80016f0:	6a30      	ldr	r0, [r6, #32]
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d0f2      	beq.n	80016dc <ai_platform_get_activations_map+0x18>
 80016f6:	6806      	ldr	r6, [r0, #0]
 80016f8:	429e      	cmp	r6, r3
 80016fa:	d006      	beq.n	800170a <ai_platform_get_activations_map+0x46>
 80016fc:	f1a1 0401 	sub.w	r4, r1, #1
 8001700:	6028      	str	r0, [r5, #0]
 8001702:	fab4 f484 	clz	r4, r4
 8001706:	0964      	lsrs	r4, r4, #5
 8001708:	e7e9      	b.n	80016de <ai_platform_get_activations_map+0x1a>
 800170a:	3d04      	subs	r5, #4
 800170c:	4602      	mov	r2, r0
 800170e:	4621      	mov	r1, r4
 8001710:	e000      	b.n	8001714 <ai_platform_get_activations_map+0x50>
 8001712:	4619      	mov	r1, r3
 8001714:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001718:	42b3      	cmp	r3, r6
 800171a:	d026      	beq.n	800176a <ai_platform_get_activations_map+0xa6>
 800171c:	f845 3f04 	str.w	r3, [r5, #4]!
 8001720:	1c4b      	adds	r3, r1, #1
 8001722:	429f      	cmp	r7, r3
 8001724:	d8f5      	bhi.n	8001712 <ai_platform_get_activations_map+0x4e>
 8001726:	d1da      	bne.n	80016de <ai_platform_get_activations_map+0x1a>
 8001728:	3102      	adds	r1, #2
 800172a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800172e:	42b3      	cmp	r3, r6
 8001730:	d1d5      	bne.n	80016de <ai_platform_get_activations_map+0x1a>
 8001732:	2401      	movs	r4, #1
 8001734:	e7d3      	b.n	80016de <ai_platform_get_activations_map+0x1a>
 8001736:	f106 000c 	add.w	r0, r6, #12
 800173a:	f7ff ff51 	bl	80015e0 <ai_buffer_array_sane>
 800173e:	2800      	cmp	r0, #0
 8001740:	d0cc      	beq.n	80016dc <ai_platform_get_activations_map+0x18>
 8001742:	89f3      	ldrh	r3, [r6, #14]
 8001744:	429f      	cmp	r7, r3
 8001746:	d1c9      	bne.n	80016dc <ai_platform_get_activations_map+0x18>
 8001748:	3d04      	subs	r5, #4
 800174a:	4622      	mov	r2, r4
 800174c:	6933      	ldr	r3, [r6, #16]
 800174e:	4423      	add	r3, r4
 8001750:	341c      	adds	r4, #28
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	b123      	cbz	r3, 8001760 <ai_platform_get_activations_map+0x9c>
 8001756:	3201      	adds	r2, #1
 8001758:	f845 3f04 	str.w	r3, [r5, #4]!
 800175c:	4297      	cmp	r7, r2
 800175e:	d8f5      	bhi.n	800174c <ai_platform_get_activations_map+0x88>
 8001760:	1abc      	subs	r4, r7, r2
 8001762:	fab4 f484 	clz	r4, r4
 8001766:	0964      	lsrs	r4, r4, #5
 8001768:	e7b9      	b.n	80016de <ai_platform_get_activations_map+0x1a>
 800176a:	428f      	cmp	r7, r1
 800176c:	d1b7      	bne.n	80016de <ai_platform_get_activations_map+0x1a>
 800176e:	e7e0      	b.n	8001732 <ai_platform_get_activations_map+0x6e>
 8001770:	a1facade 	.word	0xa1facade

08001774 <ai_platform_bind_network_params>:
 8001774:	2a00      	cmp	r2, #0
 8001776:	bf18      	it	ne
 8001778:	2900      	cmpne	r1, #0
 800177a:	d010      	beq.n	800179e <ai_platform_bind_network_params+0x2a>
 800177c:	b178      	cbz	r0, 800179e <ai_platform_bind_network_params+0x2a>
 800177e:	4603      	mov	r3, r0
 8001780:	4808      	ldr	r0, [pc, #32]	; (80017a4 <ai_platform_bind_network_params+0x30>)
 8001782:	f103 0c0c 	add.w	ip, r3, #12
 8001786:	f843 0b04 	str.w	r0, [r3], #4
 800178a:	c903      	ldmia	r1, {r0, r1}
 800178c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001790:	2301      	movs	r3, #1
 8001792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001796:	e88c 0003 	stmia.w	ip, {r0, r1}
 800179a:	4618      	mov	r0, r3
 800179c:	4770      	bx	lr
 800179e:	2300      	movs	r3, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	4770      	bx	lr
 80017a4:	a1facade 	.word	0xa1facade

080017a8 <ai_platform_network_get_error>:
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <ai_platform_network_get_error+0x14>)
 80017aa:	6802      	ldr	r2, [r0, #0]
 80017ac:	4393      	bics	r3, r2
 80017ae:	d102      	bne.n	80017b6 <ai_platform_network_get_error+0xe>
 80017b0:	300c      	adds	r0, #12
 80017b2:	f000 bc73 	b.w	800209c <core_get_error>
 80017b6:	f241 0010 	movw	r0, #4112	; 0x1010
 80017ba:	4770      	bx	lr
 80017bc:	a1c00100 	.word	0xa1c00100

080017c0 <ai_platform_network_set_error>:
 80017c0:	b110      	cbz	r0, 80017c8 <ai_platform_network_set_error+0x8>
 80017c2:	300c      	adds	r0, #12
 80017c4:	f000 bc70 	b.w	80020a8 <core_set_error>
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <ai_platform_inputs_get>:
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <ai_platform_inputs_get+0xec>)
 80017d2:	b085      	sub	sp, #20
 80017d4:	6802      	ldr	r2, [r0, #0]
 80017d6:	4393      	bics	r3, r2
 80017d8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80017dc:	d162      	bne.n	80018a4 <ai_platform_inputs_get+0xd8>
 80017de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d051      	beq.n	8001888 <ai_platform_inputs_get+0xbc>
 80017e4:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 80017e8:	f1ba 0f00 	cmp.w	sl, #0
 80017ec:	d04c      	beq.n	8001888 <ai_platform_inputs_get+0xbc>
 80017ee:	f04f 0900 	mov.w	r9, #0
 80017f2:	464d      	mov	r5, r9
 80017f4:	e016      	b.n	8001824 <ai_platform_inputs_get+0x58>
 80017f6:	9901      	ldr	r1, [sp, #4]
 80017f8:	2301      	movs	r3, #1
 80017fa:	f848 3001 	str.w	r3, [r8, r1]
 80017fe:	69b1      	ldr	r1, [r6, #24]
 8001800:	f04f 0301 	mov.w	r3, #1
 8001804:	684e      	ldr	r6, [r1, #4]
 8001806:	3501      	adds	r5, #1
 8001808:	f109 091c 	add.w	r9, r9, #28
 800180c:	7523      	strb	r3, [r4, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	6961      	ldr	r1, [r4, #20]
 8001812:	6020      	str	r0, [r4, #0]
 8001814:	f36b 211f 	bfi	r1, fp, #8, #24
 8001818:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800181c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8001820:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8001824:	f8ba 3000 	ldrh.w	r3, [sl]
 8001828:	b2ac      	uxth	r4, r5
 800182a:	42ab      	cmp	r3, r5
 800182c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	d93b      	bls.n	80018ac <ai_platform_inputs_get+0xe0>
 8001834:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d037      	beq.n	80018ac <ai_platform_inputs_get+0xe0>
 800183c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001840:	2e00      	cmp	r6, #0
 8001842:	d033      	beq.n	80018ac <ai_platform_inputs_get+0xe0>
 8001844:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001848:	69b2      	ldr	r2, [r6, #24]
 800184a:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800184e:	6810      	ldr	r0, [r2, #0]
 8001850:	68b3      	ldr	r3, [r6, #8]
 8001852:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8001856:	68f2      	ldr	r2, [r6, #12]
 8001858:	444c      	add	r4, r9
 800185a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800185e:	9200      	str	r2, [sp, #0]
 8001860:	f001 fc1a 	bl	8003098 <ai_array_to_buffer_fmt>
 8001864:	69b1      	ldr	r1, [r6, #24]
 8001866:	9a00      	ldr	r2, [sp, #0]
 8001868:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800186c:	2f00      	cmp	r7, #0
 800186e:	d0c7      	beq.n	8001800 <ai_platform_inputs_get+0x34>
 8001870:	2100      	movs	r1, #0
 8001872:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001876:	6831      	ldr	r1, [r6, #0]
 8001878:	6079      	str	r1, [r7, #4]
 800187a:	b111      	cbz	r1, 8001882 <ai_platform_inputs_get+0xb6>
 800187c:	8849      	ldrh	r1, [r1, #2]
 800187e:	2900      	cmp	r1, #0
 8001880:	d1b9      	bne.n	80017f6 <ai_platform_inputs_get+0x2a>
 8001882:	69b1      	ldr	r1, [r6, #24]
 8001884:	2700      	movs	r7, #0
 8001886:	e7bb      	b.n	8001800 <ai_platform_inputs_get+0x34>
 8001888:	9803      	ldr	r0, [sp, #12]
 800188a:	2400      	movs	r4, #0
 800188c:	2218      	movs	r2, #24
 800188e:	2111      	movs	r1, #17
 8001890:	300c      	adds	r0, #12
 8001892:	f000 fc09 	bl	80020a8 <core_set_error>
 8001896:	4620      	mov	r0, r4
 8001898:	9b02      	ldr	r3, [sp, #8]
 800189a:	b103      	cbz	r3, 800189e <ai_platform_inputs_get+0xd2>
 800189c:	801c      	strh	r4, [r3, #0]
 800189e:	b005      	add	sp, #20
 80018a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a4:	2000      	movs	r0, #0
 80018a6:	b005      	add	sp, #20
 80018a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d0eb      	beq.n	8001888 <ai_platform_inputs_get+0xbc>
 80018b0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80018b4:	6858      	ldr	r0, [r3, #4]
 80018b6:	e7ef      	b.n	8001898 <ai_platform_inputs_get+0xcc>
 80018b8:	a1c00100 	.word	0xa1c00100

080018bc <ai_platform_outputs_get>:
 80018bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <ai_platform_outputs_get+0xe8>)
 80018c2:	b085      	sub	sp, #20
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	4393      	bics	r3, r2
 80018c8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80018cc:	d15f      	bne.n	800198e <ai_platform_outputs_get+0xd2>
 80018ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d94e      	bls.n	8001972 <ai_platform_outputs_get+0xb6>
 80018d4:	f04f 0900 	mov.w	r9, #0
 80018d8:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 80018dc:	464d      	mov	r5, r9
 80018de:	e016      	b.n	800190e <ai_platform_outputs_get+0x52>
 80018e0:	9901      	ldr	r1, [sp, #4]
 80018e2:	2301      	movs	r3, #1
 80018e4:	f848 3001 	str.w	r3, [r8, r1]
 80018e8:	69b1      	ldr	r1, [r6, #24]
 80018ea:	f04f 0301 	mov.w	r3, #1
 80018ee:	684e      	ldr	r6, [r1, #4]
 80018f0:	3501      	adds	r5, #1
 80018f2:	f109 091c 	add.w	r9, r9, #28
 80018f6:	7523      	strb	r3, [r4, #20]
 80018f8:	2300      	movs	r3, #0
 80018fa:	6961      	ldr	r1, [r4, #20]
 80018fc:	6020      	str	r0, [r4, #0]
 80018fe:	f36b 211f 	bfi	r1, fp, #8, #24
 8001902:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8001906:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800190a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800190e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8001912:	b2ac      	uxth	r4, r5
 8001914:	42ab      	cmp	r3, r5
 8001916:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	d93b      	bls.n	8001996 <ai_platform_outputs_get+0xda>
 800191e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d037      	beq.n	8001996 <ai_platform_outputs_get+0xda>
 8001926:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800192a:	2e00      	cmp	r6, #0
 800192c:	d033      	beq.n	8001996 <ai_platform_outputs_get+0xda>
 800192e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8001932:	69b2      	ldr	r2, [r6, #24]
 8001934:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8001938:	6810      	ldr	r0, [r2, #0]
 800193a:	68b3      	ldr	r3, [r6, #8]
 800193c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8001940:	68f2      	ldr	r2, [r6, #12]
 8001942:	444c      	add	r4, r9
 8001944:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	f001 fba5 	bl	8003098 <ai_array_to_buffer_fmt>
 800194e:	69b1      	ldr	r1, [r6, #24]
 8001950:	9a00      	ldr	r2, [sp, #0]
 8001952:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001956:	2f00      	cmp	r7, #0
 8001958:	d0c7      	beq.n	80018ea <ai_platform_outputs_get+0x2e>
 800195a:	2100      	movs	r1, #0
 800195c:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001960:	6831      	ldr	r1, [r6, #0]
 8001962:	6079      	str	r1, [r7, #4]
 8001964:	b111      	cbz	r1, 800196c <ai_platform_outputs_get+0xb0>
 8001966:	8849      	ldrh	r1, [r1, #2]
 8001968:	2900      	cmp	r1, #0
 800196a:	d1b9      	bne.n	80018e0 <ai_platform_outputs_get+0x24>
 800196c:	69b1      	ldr	r1, [r6, #24]
 800196e:	2700      	movs	r7, #0
 8001970:	e7bb      	b.n	80018ea <ai_platform_outputs_get+0x2e>
 8001972:	9803      	ldr	r0, [sp, #12]
 8001974:	2400      	movs	r4, #0
 8001976:	2218      	movs	r2, #24
 8001978:	2111      	movs	r1, #17
 800197a:	300c      	adds	r0, #12
 800197c:	f000 fb94 	bl	80020a8 <core_set_error>
 8001980:	4620      	mov	r0, r4
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	b103      	cbz	r3, 8001988 <ai_platform_outputs_get+0xcc>
 8001986:	801c      	strh	r4, [r3, #0]
 8001988:	b005      	add	sp, #20
 800198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800198e:	2000      	movs	r0, #0
 8001990:	b005      	add	sp, #20
 8001992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001996:	2c00      	cmp	r4, #0
 8001998:	d0eb      	beq.n	8001972 <ai_platform_outputs_get+0xb6>
 800199a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800199e:	6858      	ldr	r0, [r3, #4]
 80019a0:	e7ef      	b.n	8001982 <ai_platform_outputs_get+0xc6>
 80019a2:	bf00      	nop
 80019a4:	a1c00100 	.word	0xa1c00100

080019a8 <ai_platform_network_create>:
 80019a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ac:	b083      	sub	sp, #12
 80019ae:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80019b2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80019b6:	b320      	cbz	r0, 8001a02 <ai_platform_network_create+0x5a>
 80019b8:	6002      	str	r2, [r0, #0]
 80019ba:	4616      	mov	r6, r2
 80019bc:	461f      	mov	r7, r3
 80019be:	4604      	mov	r4, r0
 80019c0:	f000 fb6a 	bl	8002098 <core_init>
 80019c4:	b970      	cbnz	r0, 80019e4 <ai_platform_network_create+0x3c>
 80019c6:	2530      	movs	r5, #48	; 0x30
 80019c8:	2300      	movs	r3, #0
 80019ca:	6023      	str	r3, [r4, #0]
 80019cc:	2410      	movs	r4, #16
 80019ce:	464a      	mov	r2, r9
 80019d0:	4641      	mov	r1, r8
 80019d2:	4638      	mov	r0, r7
 80019d4:	f001 fbe2 	bl	800319c <ai_version_get>
 80019d8:	60b0      	str	r0, [r6, #8]
 80019da:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80019de:	b003      	add	sp, #12
 80019e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e4:	2200      	movs	r2, #0
 80019e6:	4641      	mov	r1, r8
 80019e8:	4638      	mov	r0, r7
 80019ea:	f001 fbd7 	bl	800319c <ai_version_get>
 80019ee:	4605      	mov	r5, r0
 80019f0:	2200      	movs	r2, #0
 80019f2:	2105      	movs	r1, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	f001 fbd1 	bl	800319c <ai_version_get>
 80019fa:	4285      	cmp	r5, r0
 80019fc:	d008      	beq.n	8001a10 <ai_platform_network_create+0x68>
 80019fe:	2501      	movs	r5, #1
 8001a00:	e7e2      	b.n	80019c8 <ai_platform_network_create+0x20>
 8001a02:	2510      	movs	r5, #16
 8001a04:	462c      	mov	r4, r5
 8001a06:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8001a0a:	b003      	add	sp, #12
 8001a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <ai_platform_network_create+0x80>)
 8001a12:	a801      	add	r0, sp, #4
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f000 fb53 	bl	80020c0 <ai_check_custom_types>
 8001a1a:	b110      	cbz	r0, 8001a22 <ai_platform_network_create+0x7a>
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	4625      	mov	r5, r4
 8001a20:	e7d5      	b.n	80019ce <ai_platform_network_create+0x26>
 8001a22:	2502      	movs	r5, #2
 8001a24:	e7d0      	b.n	80019c8 <ai_platform_network_create+0x20>
 8001a26:	bf00      	nop
 8001a28:	84048403 	.word	0x84048403

08001a2c <ai_platform_network_init>:
 8001a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a30:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <ai_platform_network_init+0x178>)
 8001a32:	460c      	mov	r4, r1
 8001a34:	6801      	ldr	r1, [r0, #0]
 8001a36:	438a      	bics	r2, r1
 8001a38:	d133      	bne.n	8001aa2 <ai_platform_network_init+0x76>
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	f000 8093 	beq.w	8001b68 <ai_platform_network_init+0x13c>
 8001a42:	f8d4 b000 	ldr.w	fp, [r4]
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <ai_platform_network_init+0x17c>)
 8001a48:	4593      	cmp	fp, r2
 8001a4a:	d10f      	bne.n	8001a6c <ai_platform_network_init+0x40>
 8001a4c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8001a50:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <ai_platform_network_init+0x178>)
 8001a56:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8001a5a:	0c32      	lsrs	r2, r6, #16
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d02c      	beq.n	8001aba <ai_platform_network_init+0x8e>
 8001a60:	2303      	movs	r3, #3
 8001a62:	462c      	mov	r4, r5
 8001a64:	612b      	str	r3, [r5, #16]
 8001a66:	4620      	mov	r0, r4
 8001a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a6c:	4627      	mov	r7, r4
 8001a6e:	2101      	movs	r1, #1
 8001a70:	6864      	ldr	r4, [r4, #4]
 8001a72:	4638      	mov	r0, r7
 8001a74:	f107 081c 	add.w	r8, r7, #28
 8001a78:	f7ff fd7e 	bl	8001578 <ai_buffer_get_size>
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4640      	mov	r0, r8
 8001a82:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8001a86:	f7ff fd77 	bl	8001578 <ai_buffer_get_size>
 8001a8a:	b976      	cbnz	r6, 8001aaa <ai_platform_network_init+0x7e>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d150      	bne.n	8001b32 <ai_platform_network_init+0x106>
 8001a90:	4680      	mov	r8, r0
 8001a92:	4686      	mov	lr, r0
 8001a94:	4606      	mov	r6, r0
 8001a96:	4607      	mov	r7, r0
 8001a98:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8001a9c:	6829      	ldr	r1, [r5, #0]
 8001a9e:	0436      	lsls	r6, r6, #16
 8001aa0:	e7d8      	b.n	8001a54 <ai_platform_network_init+0x28>
 8001aa2:	2400      	movs	r4, #0
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d13b      	bne.n	8001b26 <ai_platform_network_init+0xfa>
 8001aae:	4680      	mov	r8, r0
 8001ab0:	4686      	mov	lr, r0
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d05e      	beq.n	8001b74 <ai_platform_network_init+0x148>
 8001ab6:	2601      	movs	r6, #1
 8001ab8:	e7ee      	b.n	8001a98 <ai_platform_network_init+0x6c>
 8001aba:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8001abc:	4293      	cmp	r3, r2
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <ai_platform_network_init+0x17c>)
 8001ac0:	d33e      	bcc.n	8001b40 <ai_platform_network_init+0x114>
 8001ac2:	459b      	cmp	fp, r3
 8001ac4:	d03e      	beq.n	8001b44 <ai_platform_network_init+0x118>
 8001ac6:	b1a2      	cbz	r2, 8001af2 <ai_platform_network_init+0xc6>
 8001ac8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001acc:	f04f 0c00 	mov.w	ip, #0
 8001ad0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001ad4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001ad6:	eb07 0b0c 	add.w	fp, r7, ip
 8001ada:	4464      	add	r4, ip
 8001adc:	f10c 0c1c 	add.w	ip, ip, #28
 8001ae0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8001ae4:	45cc      	cmp	ip, r9
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8001aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001af0:	d1f0      	bne.n	8001ad4 <ai_platform_network_init+0xa8>
 8001af2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001af4:	622e      	str	r6, [r5, #32]
 8001af6:	4553      	cmp	r3, sl
 8001af8:	d34b      	bcc.n	8001b92 <ai_platform_network_init+0x166>
 8001afa:	f1ba 0f00 	cmp.w	sl, #0
 8001afe:	d025      	beq.n	8001b4c <ai_platform_network_init+0x120>
 8001b00:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8001b04:	2700      	movs	r7, #0
 8001b06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b0a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001b0c:	eb08 0607 	add.w	r6, r8, r7
 8001b10:	443c      	add	r4, r7
 8001b12:	371c      	adds	r7, #28
 8001b14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b16:	4557      	cmp	r7, sl
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b22:	d1f2      	bne.n	8001b0a <ai_platform_network_init+0xde>
 8001b24:	e012      	b.n	8001b4c <ai_platform_network_init+0x120>
 8001b26:	f1b9 0f00 	cmp.w	r9, #0
 8001b2a:	d015      	beq.n	8001b58 <ai_platform_network_init+0x12c>
 8001b2c:	f04f 0e01 	mov.w	lr, #1
 8001b30:	e7bf      	b.n	8001ab2 <ai_platform_network_init+0x86>
 8001b32:	f1b9 0f00 	cmp.w	r9, #0
 8001b36:	d00f      	beq.n	8001b58 <ai_platform_network_init+0x12c>
 8001b38:	f04f 0e01 	mov.w	lr, #1
 8001b3c:	4637      	mov	r7, r6
 8001b3e:	e7ab      	b.n	8001a98 <ai_platform_network_init+0x6c>
 8001b40:	459b      	cmp	fp, r3
 8001b42:	d11e      	bne.n	8001b82 <ai_platform_network_init+0x156>
 8001b44:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8001b48:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8001b52:	f000 fadd 	bl	8002110 <ai_layers_init_all>
 8001b56:	e783      	b.n	8001a60 <ai_platform_network_init+0x34>
 8001b58:	2213      	movs	r2, #19
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	f105 000c 	add.w	r0, r5, #12
 8001b60:	2400      	movs	r4, #0
 8001b62:	f000 faa1 	bl	80020a8 <core_set_error>
 8001b66:	e77e      	b.n	8001a66 <ai_platform_network_init+0x3a>
 8001b68:	2211      	movs	r2, #17
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	300c      	adds	r0, #12
 8001b6e:	f000 fa9b 	bl	80020a8 <core_set_error>
 8001b72:	e778      	b.n	8001a66 <ai_platform_network_init+0x3a>
 8001b74:	2212      	movs	r2, #18
 8001b76:	2110      	movs	r1, #16
 8001b78:	f105 000c 	add.w	r0, r5, #12
 8001b7c:	f000 fa94 	bl	80020a8 <core_set_error>
 8001b80:	e771      	b.n	8001a66 <ai_platform_network_init+0x3a>
 8001b82:	2212      	movs	r2, #18
 8001b84:	2116      	movs	r1, #22
 8001b86:	f105 000c 	add.w	r0, r5, #12
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	f000 fa8c 	bl	80020a8 <core_set_error>
 8001b90:	e769      	b.n	8001a66 <ai_platform_network_init+0x3a>
 8001b92:	2213      	movs	r2, #19
 8001b94:	2116      	movs	r1, #22
 8001b96:	f105 000c 	add.w	r0, r5, #12
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	f000 fa84 	bl	80020a8 <core_set_error>
 8001ba0:	e761      	b.n	8001a66 <ai_platform_network_init+0x3a>
 8001ba2:	bf00      	nop
 8001ba4:	a1c00100 	.word	0xa1c00100
 8001ba8:	a1facade 	.word	0xa1facade

08001bac <ai_platform_network_post_init>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <ai_platform_network_post_init+0x5c>)
 8001bb0:	6802      	ldr	r2, [r0, #0]
 8001bb2:	ea02 0103 	and.w	r1, r2, r3
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <ai_platform_network_post_init+0x20>
 8001bba:	6903      	ldr	r3, [r0, #16]
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f013 0502 	ands.w	r5, r3, #2
 8001bc2:	d005      	beq.n	8001bd0 <ai_platform_network_post_init+0x24>
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	d00a      	beq.n	8001bde <ai_platform_network_post_init+0x32>
 8001bc8:	2001      	movs	r0, #1
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	bd38      	pop	{r3, r4, r5, pc}
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	2111      	movs	r1, #17
 8001bd4:	300c      	adds	r0, #12
 8001bd6:	f000 fa67 	bl	80020a8 <core_set_error>
 8001bda:	4628      	mov	r0, r5
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	f000 faa5 	bl	800212c <ai_layers_post_init_all>
 8001be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ef      	beq.n	8001bc8 <ai_platform_network_post_init+0x1c>
 8001be8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001bea:	e008      	b.n	8001bfe <ai_platform_network_post_init+0x52>
 8001bec:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8001bf0:	4798      	blx	r3
 8001bf2:	692b      	ldr	r3, [r5, #16]
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	d0e6      	beq.n	8001bc8 <ai_platform_network_post_init+0x1c>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0e4      	beq.n	8001bc8 <ai_platform_network_post_init+0x1c>
 8001bfe:	4629      	mov	r1, r5
 8001c00:	2000      	movs	r0, #0
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	d1f2      	bne.n	8001bec <ai_platform_network_post_init+0x40>
 8001c06:	e7df      	b.n	8001bc8 <ai_platform_network_post_init+0x1c>
 8001c08:	a1c00100 	.word	0xa1c00100

08001c0c <ai_platform_network_process>:
 8001c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c10:	b085      	sub	sp, #20
 8001c12:	4bb7      	ldr	r3, [pc, #732]	; (8001ef0 <ai_platform_network_process+0x2e4>)
 8001c14:	9202      	str	r2, [sp, #8]
 8001c16:	6802      	ldr	r2, [r0, #0]
 8001c18:	4393      	bics	r3, r2
 8001c1a:	f040 8142 	bne.w	8001ea2 <ai_platform_network_process+0x296>
 8001c1e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001c20:	4605      	mov	r5, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8126 	beq.w	8001e74 <ai_platform_network_process+0x268>
 8001c28:	6903      	ldr	r3, [r0, #16]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	6182      	str	r2, [r0, #24]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	f040 8122 	bne.w	8001e80 <ai_platform_network_process+0x274>
 8001c3c:	2900      	cmp	r1, #0
 8001c3e:	f000 8136 	beq.w	8001eae <ai_platform_network_process+0x2a2>
 8001c42:	fab8 f788 	clz	r7, r8
 8001c46:	097f      	lsrs	r7, r7, #5
 8001c48:	f1b8 0f00 	cmp.w	r8, #0
 8001c4c:	f000 812f 	beq.w	8001eae <ai_platform_network_process+0x2a2>
 8001c50:	f8b8 3000 	ldrh.w	r3, [r8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 812a 	beq.w	8001eae <ai_platform_network_process+0x2a2>
 8001c5a:	698b      	ldr	r3, [r1, #24]
 8001c5c:	460e      	mov	r6, r1
 8001c5e:	9003      	str	r0, [sp, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d072      	beq.n	8001d52 <ai_platform_network_process+0x146>
 8001c6c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8001c70:	2c00      	cmp	r4, #0
 8001c72:	d06e      	beq.n	8001d52 <ai_platform_network_process+0x146>
 8001c74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001c78:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8001c7c:	f8d3 a000 	ldr.w	sl, [r3]
 8001c80:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8001c84:	f000 8112 	beq.w	8001eac <ai_platform_network_process+0x2a0>
 8001c88:	69a3      	ldr	r3, [r4, #24]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	685d      	ldr	r5, [r3, #4]
 8001c90:	f7ff fc72 	bl	8001578 <ai_buffer_get_size>
 8001c94:	4285      	cmp	r5, r0
 8001c96:	f0c0 8115 	bcc.w	8001ec4 <ai_platform_network_process+0x2b8>
 8001c9a:	68e0      	ldr	r0, [r4, #12]
 8001c9c:	69b1      	ldr	r1, [r6, #24]
 8001c9e:	68c2      	ldr	r2, [r0, #12]
 8001ca0:	68cb      	ldr	r3, [r1, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f040 810e 	bne.w	8001ec4 <ai_platform_network_process+0x2b8>
 8001ca8:	6882      	ldr	r2, [r0, #8]
 8001caa:	688b      	ldr	r3, [r1, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8109 	bne.w	8001ec4 <ai_platform_network_process+0x2b8>
 8001cb2:	6842      	ldr	r2, [r0, #4]
 8001cb4:	684b      	ldr	r3, [r1, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f040 8104 	bne.w	8001ec4 <ai_platform_network_process+0x2b8>
 8001cbc:	69a3      	ldr	r3, [r4, #24]
 8001cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc2:	f001 fa59 	bl	8003178 <ai_array_get_data_byte_size>
 8001cc6:	4605      	mov	r5, r0
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f001 fa6d 	bl	80031a8 <get_tensor_byte_size>
 8001cce:	4285      	cmp	r5, r0
 8001cd0:	f0c0 80f8 	bcc.w	8001ec4 <ai_platform_network_process+0x2b8>
 8001cd4:	69a3      	ldr	r3, [r4, #24]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f001 f9de 	bl	8003098 <ai_array_to_buffer_fmt>
 8001cdc:	6833      	ldr	r3, [r6, #0]
 8001cde:	4058      	eors	r0, r3
 8001ce0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8001ce4:	f040 81a4 	bne.w	8002030 <ai_platform_network_process+0x424>
 8001ce8:	6873      	ldr	r3, [r6, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80de 	beq.w	8001eac <ai_platform_network_process+0x2a0>
 8001cf0:	69b3      	ldr	r3, [r6, #24]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 81a4 	beq.w	8002042 <ai_platform_network_process+0x436>
 8001cfa:	9a01      	ldr	r2, [sp, #4]
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	3701      	adds	r7, #1
 8001d00:	361c      	adds	r6, #28
 8001d02:	429a      	cmp	r2, r3
 8001d04:	bf38      	it	cc
 8001d06:	461a      	movcc	r2, r3
 8001d08:	9201      	str	r2, [sp, #4]
 8001d0a:	f001 fa4d 	bl	80031a8 <get_tensor_byte_size>
 8001d0e:	f8c9 0008 	str.w	r0, [r9, #8]
 8001d12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fb00 f303 	mul.w	r3, r0, r3
 8001d1c:	f8c9 300c 	str.w	r3, [r9, #12]
 8001d20:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8001d24:	440b      	add	r3, r1
 8001d26:	f8c9 1004 	str.w	r1, [r9, #4]
 8001d2a:	f84a 300b 	str.w	r3, [sl, fp]
 8001d2e:	69a0      	ldr	r0, [r4, #24]
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	f100 80af 	bmi.w	8001e96 <ai_platform_network_process+0x28a>
 8001d38:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	4419      	add	r1, r3
 8001d40:	6081      	str	r1, [r0, #8]
 8001d42:	69a3      	ldr	r3, [r4, #24]
 8001d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	f8b8 3000 	ldrh.w	r3, [r8]
 8001d4e:	42bb      	cmp	r3, r7
 8001d50:	d888      	bhi.n	8001c64 <ai_platform_network_process+0x58>
 8001d52:	9d03      	ldr	r5, [sp, #12]
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 817b 	beq.w	8002054 <ai_platform_network_process+0x448>
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	f240 80bd 	bls.w	8001ede <ai_platform_network_process+0x2d2>
 8001d64:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8001d68:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80b6 	beq.w	8001ede <ai_platform_network_process+0x2d2>
 8001d72:	2700      	movs	r7, #0
 8001d74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001d78:	9502      	str	r5, [sp, #8]
 8001d7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80bd 	beq.w	8001efe <ai_platform_network_process+0x2f2>
 8001d84:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	f000 80b8 	beq.w	8001efe <ai_platform_network_process+0x2f2>
 8001d8e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8001d92:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8001d9c:	f000 8170 	beq.w	8002080 <ai_platform_network_process+0x474>
 8001da0:	69b3      	ldr	r3, [r6, #24]
 8001da2:	2101      	movs	r1, #1
 8001da4:	4658      	mov	r0, fp
 8001da6:	685d      	ldr	r5, [r3, #4]
 8001da8:	f7ff fbe6 	bl	8001578 <ai_buffer_get_size>
 8001dac:	4285      	cmp	r5, r0
 8001dae:	f0c0 8095 	bcc.w	8001edc <ai_platform_network_process+0x2d0>
 8001db2:	68f0      	ldr	r0, [r6, #12]
 8001db4:	f8db 1018 	ldr.w	r1, [fp, #24]
 8001db8:	68c2      	ldr	r2, [r0, #12]
 8001dba:	68cb      	ldr	r3, [r1, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 808d 	bne.w	8001edc <ai_platform_network_process+0x2d0>
 8001dc2:	6882      	ldr	r2, [r0, #8]
 8001dc4:	688b      	ldr	r3, [r1, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f040 8088 	bne.w	8001edc <ai_platform_network_process+0x2d0>
 8001dcc:	6842      	ldr	r2, [r0, #4]
 8001dce:	684b      	ldr	r3, [r1, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8083 	bne.w	8001edc <ai_platform_network_process+0x2d0>
 8001dd6:	69b3      	ldr	r3, [r6, #24]
 8001dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ddc:	f001 f9cc 	bl	8003178 <ai_array_get_data_byte_size>
 8001de0:	9003      	str	r0, [sp, #12]
 8001de2:	4630      	mov	r0, r6
 8001de4:	f001 f9e0 	bl	80031a8 <get_tensor_byte_size>
 8001de8:	9b03      	ldr	r3, [sp, #12]
 8001dea:	4283      	cmp	r3, r0
 8001dec:	d376      	bcc.n	8001edc <ai_platform_network_process+0x2d0>
 8001dee:	69b3      	ldr	r3, [r6, #24]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f001 f951 	bl	8003098 <ai_array_to_buffer_fmt>
 8001df6:	f8db 3000 	ldr.w	r3, [fp]
 8001dfa:	4058      	eors	r0, r3
 8001dfc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8001e00:	f040 812c 	bne.w	800205c <ai_platform_network_process+0x450>
 8001e04:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8139 	beq.w	8002080 <ai_platform_network_process+0x474>
 8001e0e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 812a 	beq.w	800206e <ai_platform_network_process+0x462>
 8001e1a:	9a01      	ldr	r2, [sp, #4]
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	3701      	adds	r7, #1
 8001e20:	f10b 0b1c 	add.w	fp, fp, #28
 8001e24:	429a      	cmp	r2, r3
 8001e26:	bf38      	it	cc
 8001e28:	461a      	movcc	r2, r3
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	f001 f9bc 	bl	80031a8 <get_tensor_byte_size>
 8001e30:	f8c8 0008 	str.w	r0, [r8, #8]
 8001e34:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fb00 f303 	mul.w	r3, r0, r3
 8001e3e:	f8c8 300c 	str.w	r3, [r8, #12]
 8001e42:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8001e46:	440b      	add	r3, r1
 8001e48:	f8c8 1004 	str.w	r1, [r8, #4]
 8001e4c:	f844 300a 	str.w	r3, [r4, sl]
 8001e50:	69b0      	ldr	r0, [r6, #24]
 8001e52:	6803      	ldr	r3, [r0, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	d44d      	bmi.n	8001ef4 <ai_platform_network_process+0x2e8>
 8001e58:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	4419      	add	r1, r3
 8001e60:	6081      	str	r1, [r0, #8]
 8001e62:	69b3      	ldr	r3, [r6, #24]
 8001e64:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001e6e:	42bb      	cmp	r3, r7
 8001e70:	d883      	bhi.n	8001d7a <ai_platform_network_process+0x16e>
 8001e72:	e044      	b.n	8001efe <ai_platform_network_process+0x2f2>
 8001e74:	6902      	ldr	r2, [r0, #16]
 8001e76:	6183      	str	r3, [r0, #24]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	2a03      	cmp	r2, #3
 8001e7e:	d016      	beq.n	8001eae <ai_platform_network_process+0x2a2>
 8001e80:	2230      	movs	r2, #48	; 0x30
 8001e82:	2111      	movs	r1, #17
 8001e84:	f105 000c 	add.w	r0, r5, #12
 8001e88:	2400      	movs	r4, #0
 8001e8a:	f000 f90d 	bl	80020a8 <core_set_error>
 8001e8e:	4620      	mov	r0, r4
 8001e90:	b005      	add	sp, #20
 8001e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e96:	f8b8 3000 	ldrh.w	r3, [r8]
 8001e9a:	429f      	cmp	r7, r3
 8001e9c:	f4ff aee2 	bcc.w	8001c64 <ai_platform_network_process+0x58>
 8001ea0:	e757      	b.n	8001d52 <ai_platform_network_process+0x146>
 8001ea2:	2400      	movs	r4, #0
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	b005      	add	sp, #20
 8001ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eac:	9d03      	ldr	r5, [sp, #12]
 8001eae:	2400      	movs	r4, #0
 8001eb0:	2217      	movs	r2, #23
 8001eb2:	2112      	movs	r1, #18
 8001eb4:	f105 000c 	add.w	r0, r5, #12
 8001eb8:	f000 f8f6 	bl	80020a8 <core_set_error>
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	b005      	add	sp, #20
 8001ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec4:	9d03      	ldr	r5, [sp, #12]
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	2218      	movs	r2, #24
 8001eca:	2112      	movs	r1, #18
 8001ecc:	f105 000c 	add.w	r0, r5, #12
 8001ed0:	f000 f8ea 	bl	80020a8 <core_set_error>
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	b005      	add	sp, #20
 8001ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001edc:	9d02      	ldr	r5, [sp, #8]
 8001ede:	2218      	movs	r2, #24
 8001ee0:	2113      	movs	r1, #19
 8001ee2:	f105 000c 	add.w	r0, r5, #12
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	f000 f8de 	bl	80020a8 <core_set_error>
 8001eec:	e7cf      	b.n	8001e8e <ai_platform_network_process+0x282>
 8001eee:	bf00      	nop
 8001ef0:	a1c00100 	.word	0xa1c00100
 8001ef4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001ef8:	429f      	cmp	r7, r3
 8001efa:	f4ff af3e 	bcc.w	8001d7a <ai_platform_network_process+0x16e>
 8001efe:	9d02      	ldr	r5, [sp, #8]
 8001f00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001f04:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8001f06:	832b      	strh	r3, [r5, #24]
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	f040 808b 	bne.w	8002024 <ai_platform_network_process+0x418>
 8001f0e:	4616      	mov	r6, r2
 8001f10:	4617      	mov	r7, r2
 8001f12:	8b6c      	ldrh	r4, [r5, #26]
 8001f14:	429c      	cmp	r4, r3
 8001f16:	d2ba      	bcs.n	8001e8e <ai_platform_network_process+0x282>
 8001f18:	46ab      	mov	fp, r5
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d030      	beq.n	8001f80 <ai_platform_network_process+0x374>
 8001f1e:	f04f 0800 	mov.w	r8, #0
 8001f22:	e014      	b.n	8001f4e <ai_platform_network_process+0x342>
 8001f24:	6882      	ldr	r2, [r0, #8]
 8001f26:	68c5      	ldr	r5, [r0, #12]
 8001f28:	6863      	ldr	r3, [r4, #4]
 8001f2a:	1b52      	subs	r2, r2, r5
 8001f2c:	4413      	add	r3, r2
 8001f2e:	6083      	str	r3, [r0, #8]
 8001f30:	698b      	ldr	r3, [r1, #24]
 8001f32:	6862      	ldr	r2, [r4, #4]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	f859 200a 	ldr.w	r2, [r9, sl]
 8001f3a:	f108 0801 	add.w	r8, r8, #1
 8001f3e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8001f42:	440b      	add	r3, r1
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d301      	bcc.n	8001f4c <ai_platform_network_process+0x340>
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	6063      	str	r3, [r4, #4]
 8001f4e:	8833      	ldrh	r3, [r6, #0]
 8001f50:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8001f54:	4543      	cmp	r3, r8
 8001f56:	d913      	bls.n	8001f80 <ai_platform_network_process+0x374>
 8001f58:	6873      	ldr	r3, [r6, #4]
 8001f5a:	b18b      	cbz	r3, 8001f80 <ai_platform_network_process+0x374>
 8001f5c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8001f60:	b171      	cbz	r1, 8001f80 <ai_platform_network_process+0x374>
 8001f62:	6988      	ldr	r0, [r1, #24]
 8001f64:	68b2      	ldr	r2, [r6, #8]
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	f8d2 9000 	ldr.w	r9, [r2]
 8001f6c:	009d      	lsls	r5, r3, #2
 8001f6e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8001f72:	d5d7      	bpl.n	8001f24 <ai_platform_network_process+0x318>
 8001f74:	6881      	ldr	r1, [r0, #8]
 8001f76:	68a2      	ldr	r2, [r4, #8]
 8001f78:	6860      	ldr	r0, [r4, #4]
 8001f7a:	f001 f805 	bl	8002f88 <st_int8_copy>
 8001f7e:	e7da      	b.n	8001f36 <ai_platform_network_process+0x32a>
 8001f80:	4658      	mov	r0, fp
 8001f82:	f000 f8e7 	bl	8002154 <ai_layers_forward_all>
 8001f86:	2f00      	cmp	r7, #0
 8001f88:	d03d      	beq.n	8002006 <ai_platform_network_process+0x3fa>
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	e016      	b.n	8001fbc <ai_platform_network_process+0x3b0>
 8001f8e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8001f92:	f859 100a 	ldr.w	r1, [r9, sl]
 8001f96:	4413      	add	r3, r2
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d302      	bcc.n	8001fa2 <ai_platform_network_process+0x396>
 8001f9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001fa0:	1acb      	subs	r3, r1, r3
 8001fa2:	f8c8 3004 	str.w	r3, [r8, #4]
 8001fa6:	6981      	ldr	r1, [r0, #24]
 8001fa8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8001fac:	1b52      	subs	r2, r2, r5
 8001fae:	4413      	add	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
 8001fb2:	6983      	ldr	r3, [r0, #24]
 8001fb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	3401      	adds	r4, #1
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	d921      	bls.n	8002006 <ai_platform_network_process+0x3fa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	b1fb      	cbz	r3, 8002006 <ai_platform_network_process+0x3fa>
 8001fc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001fca:	b1e0      	cbz	r0, 8002006 <ai_platform_network_process+0x3fa>
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8001fd2:	6983      	ldr	r3, [r0, #24]
 8001fd4:	f8d2 9000 	ldr.w	r9, [r2]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	d5d5      	bpl.n	8001f8e <ai_platform_network_process+0x382>
 8001fe2:	6898      	ldr	r0, [r3, #8]
 8001fe4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8001fe8:	f000 ffce 	bl	8002f88 <st_int8_copy>
 8001fec:	f859 200a 	ldr.w	r2, [r9, sl]
 8001ff0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8001ff4:	440b      	add	r3, r1
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d302      	bcc.n	8002000 <ai_platform_network_process+0x3f4>
 8001ffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f8c8 3004 	str.w	r3, [r8, #4]
 8002004:	e7d9      	b.n	8001fba <ai_platform_network_process+0x3ae>
 8002006:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800200a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800200e:	3401      	adds	r4, #1
 8002010:	b2a4      	uxth	r4, r4
 8002012:	42a3      	cmp	r3, r4
 8002014:	f8ab 401a 	strh.w	r4, [fp, #26]
 8002018:	f63f af7f 	bhi.w	8001f1a <ai_platform_network_process+0x30e>
 800201c:	4620      	mov	r0, r4
 800201e:	b005      	add	sp, #20
 8002020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002024:	2a01      	cmp	r2, #1
 8002026:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8002028:	d033      	beq.n	8002092 <ai_platform_network_process+0x486>
 800202a:	f106 070c 	add.w	r7, r6, #12
 800202e:	e770      	b.n	8001f12 <ai_platform_network_process+0x306>
 8002030:	9d03      	ldr	r5, [sp, #12]
 8002032:	2219      	movs	r2, #25
 8002034:	2112      	movs	r1, #18
 8002036:	2400      	movs	r4, #0
 8002038:	f105 000c 	add.w	r0, r5, #12
 800203c:	f000 f834 	bl	80020a8 <core_set_error>
 8002040:	e725      	b.n	8001e8e <ai_platform_network_process+0x282>
 8002042:	9d03      	ldr	r5, [sp, #12]
 8002044:	4604      	mov	r4, r0
 8002046:	2221      	movs	r2, #33	; 0x21
 8002048:	2112      	movs	r1, #18
 800204a:	f105 000c 	add.w	r0, r5, #12
 800204e:	f000 f82b 	bl	80020a8 <core_set_error>
 8002052:	e71c      	b.n	8001e8e <ai_platform_network_process+0x282>
 8002054:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002058:	832b      	strh	r3, [r5, #24]
 800205a:	e755      	b.n	8001f08 <ai_platform_network_process+0x2fc>
 800205c:	9d02      	ldr	r5, [sp, #8]
 800205e:	2219      	movs	r2, #25
 8002060:	2113      	movs	r1, #19
 8002062:	2400      	movs	r4, #0
 8002064:	f105 000c 	add.w	r0, r5, #12
 8002068:	f000 f81e 	bl	80020a8 <core_set_error>
 800206c:	e70f      	b.n	8001e8e <ai_platform_network_process+0x282>
 800206e:	9d02      	ldr	r5, [sp, #8]
 8002070:	4604      	mov	r4, r0
 8002072:	2221      	movs	r2, #33	; 0x21
 8002074:	2113      	movs	r1, #19
 8002076:	f105 000c 	add.w	r0, r5, #12
 800207a:	f000 f815 	bl	80020a8 <core_set_error>
 800207e:	e706      	b.n	8001e8e <ai_platform_network_process+0x282>
 8002080:	9d02      	ldr	r5, [sp, #8]
 8002082:	2217      	movs	r2, #23
 8002084:	2113      	movs	r1, #19
 8002086:	2400      	movs	r4, #0
 8002088:	f105 000c 	add.w	r0, r5, #12
 800208c:	f000 f80c 	bl	80020a8 <core_set_error>
 8002090:	e6fd      	b.n	8001e8e <ai_platform_network_process+0x282>
 8002092:	2700      	movs	r7, #0
 8002094:	e73d      	b.n	8001f12 <ai_platform_network_process+0x306>
 8002096:	bf00      	nop

08002098 <core_init>:
 8002098:	2001      	movs	r0, #1
 800209a:	4770      	bx	lr

0800209c <core_get_error>:
 800209c:	4603      	mov	r3, r0
 800209e:	2200      	movs	r2, #0
 80020a0:	6800      	ldr	r0, [r0, #0]
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <core_set_error>:
 80020a8:	4603      	mov	r3, r0
 80020aa:	7800      	ldrb	r0, [r0, #0]
 80020ac:	b108      	cbz	r0, 80020b2 <core_set_error+0xa>
 80020ae:	2000      	movs	r0, #0
 80020b0:	4770      	bx	lr
 80020b2:	7019      	strb	r1, [r3, #0]
 80020b4:	2001      	movs	r0, #1
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	f362 211f 	bfi	r1, r2, #8, #24
 80020bc:	6019      	str	r1, [r3, #0]
 80020be:	4770      	bx	lr

080020c0 <ai_check_custom_types>:
 80020c0:	b082      	sub	sp, #8
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <ai_check_custom_types+0x4c>)
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	b118      	cbz	r0, 80020d0 <ai_check_custom_types+0x10>
 80020c8:	7803      	ldrb	r3, [r0, #0]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d002      	beq.n	80020d4 <ai_check_custom_types+0x14>
 80020ce:	2000      	movs	r0, #0
 80020d0:	b002      	add	sp, #8
 80020d2:	4770      	bx	lr
 80020d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <ai_check_custom_types+0x26>
 80020dc:	2001      	movs	r0, #1
 80020de:	f080 0001 	eor.w	r0, r0, #1
 80020e2:	b002      	add	sp, #8
 80020e4:	4770      	bx	lr
 80020e6:	7842      	ldrb	r2, [r0, #1]
 80020e8:	3001      	adds	r0, #1
 80020ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d1f4      	bne.n	80020dc <ai_check_custom_types+0x1c>
 80020f2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80020f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d1ee      	bne.n	80020dc <ai_check_custom_types+0x1c>
 80020fe:	7842      	ldrb	r2, [r0, #1]
 8002100:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1e9      	bne.n	80020dc <ai_check_custom_types+0x1c>
 8002108:	2000      	movs	r0, #0
 800210a:	e7e8      	b.n	80020de <ai_check_custom_types+0x1e>
 800210c:	84048403 	.word	0x84048403

08002110 <ai_layers_init_all>:
 8002110:	2100      	movs	r1, #0
 8002112:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002114:	b13b      	cbz	r3, 8002126 <ai_layers_init_all+0x16>
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	3101      	adds	r1, #1
 800211a:	60d8      	str	r0, [r3, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	d001      	beq.n	8002126 <ai_layers_init_all+0x16>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d1f6      	bne.n	8002114 <ai_layers_init_all+0x4>
 8002126:	4608      	mov	r0, r1
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <ai_layers_post_init_all>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	2500      	movs	r5, #0
 8002130:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002132:	b16c      	cbz	r4, 8002150 <ai_layers_post_init_all+0x24>
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	07db      	lsls	r3, r3, #31
 8002138:	d504      	bpl.n	8002144 <ai_layers_post_init_all+0x18>
 800213a:	6a23      	ldr	r3, [r4, #32]
 800213c:	4620      	mov	r0, r4
 800213e:	b10b      	cbz	r3, 8002144 <ai_layers_post_init_all+0x18>
 8002140:	3501      	adds	r5, #1
 8002142:	4798      	blx	r3
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	42a3      	cmp	r3, r4
 8002148:	461c      	mov	r4, r3
 800214a:	d001      	beq.n	8002150 <ai_layers_post_init_all+0x24>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <ai_layers_post_init_all+0x6>
 8002150:	4628      	mov	r0, r5
 8002152:	bd38      	pop	{r3, r4, r5, pc}

08002154 <ai_layers_forward_all>:
 8002154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002158:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800215c:	4604      	mov	r4, r0
 800215e:	f1b8 0f00 	cmp.w	r8, #0
 8002162:	d02a      	beq.n	80021ba <ai_layers_forward_all+0x66>
 8002164:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002166:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002168:	b319      	cbz	r1, 80021b2 <ai_layers_forward_all+0x5e>
 800216a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800216c:	2001      	movs	r0, #1
 800216e:	47c0      	blx	r8
 8002170:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002172:	b1f6      	cbz	r6, 80021b2 <ai_layers_forward_all+0x5e>
 8002174:	2700      	movs	r7, #0
 8002176:	4631      	mov	r1, r6
 8002178:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800217a:	2002      	movs	r0, #2
 800217c:	47c0      	blx	r8
 800217e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002180:	4628      	mov	r0, r5
 8002182:	696b      	ldr	r3, [r5, #20]
 8002184:	4798      	blx	r3
 8002186:	692e      	ldr	r6, [r5, #16]
 8002188:	2003      	movs	r0, #3
 800218a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800218c:	42b5      	cmp	r5, r6
 800218e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002190:	d007      	beq.n	80021a2 <ai_layers_forward_all+0x4e>
 8002192:	47c0      	blx	r8
 8002194:	3701      	adds	r7, #1
 8002196:	63e6      	str	r6, [r4, #60]	; 0x3c
 8002198:	2e00      	cmp	r6, #0
 800219a:	d1ec      	bne.n	8002176 <ai_layers_forward_all+0x22>
 800219c:	4638      	mov	r0, r7
 800219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a2:	2003      	movs	r0, #3
 80021a4:	3701      	adds	r7, #1
 80021a6:	47c0      	blx	r8
 80021a8:	2300      	movs	r3, #0
 80021aa:	4638      	mov	r0, r7
 80021ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021b2:	2700      	movs	r7, #0
 80021b4:	4638      	mov	r0, r7
 80021b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021ba:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80021bc:	63c5      	str	r5, [r0, #60]	; 0x3c
 80021be:	2d00      	cmp	r5, #0
 80021c0:	d0f7      	beq.n	80021b2 <ai_layers_forward_all+0x5e>
 80021c2:	4647      	mov	r7, r8
 80021c4:	696b      	ldr	r3, [r5, #20]
 80021c6:	4628      	mov	r0, r5
 80021c8:	4798      	blx	r3
 80021ca:	462b      	mov	r3, r5
 80021cc:	692d      	ldr	r5, [r5, #16]
 80021ce:	429d      	cmp	r5, r3
 80021d0:	d004      	beq.n	80021dc <ai_layers_forward_all+0x88>
 80021d2:	3701      	adds	r7, #1
 80021d4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80021d6:	2d00      	cmp	r5, #0
 80021d8:	d1f4      	bne.n	80021c4 <ai_layers_forward_all+0x70>
 80021da:	e7df      	b.n	800219c <ai_layers_forward_all+0x48>
 80021dc:	2300      	movs	r3, #0
 80021de:	3701      	adds	r7, #1
 80021e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021e2:	e7db      	b.n	800219c <ai_layers_forward_all+0x48>

080021e4 <forward_dense>:
 80021e4:	6982      	ldr	r2, [r0, #24]
 80021e6:	8813      	ldrh	r3, [r2, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d043      	beq.n	8002274 <forward_dense+0x90>
 80021ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021f0:	6855      	ldr	r5, [r2, #4]
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	6869      	ldr	r1, [r5, #4]
 80021f6:	b101      	cbz	r1, 80021fa <forward_dense+0x16>
 80021f8:	6809      	ldr	r1, [r1, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d069      	beq.n	80022d2 <forward_dense+0xee>
 80021fe:	692a      	ldr	r2, [r5, #16]
 8002200:	b102      	cbz	r2, 8002204 <forward_dense+0x20>
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d061      	beq.n	80022cc <forward_dense+0xe8>
 8002208:	69ec      	ldr	r4, [r5, #28]
 800220a:	2c00      	cmp	r4, #0
 800220c:	d057      	beq.n	80022be <forward_dense+0xda>
 800220e:	8b2e      	ldrh	r6, [r5, #24]
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	2e01      	cmp	r6, #1
 8002214:	d955      	bls.n	80022c2 <forward_dense+0xde>
 8002216:	6864      	ldr	r4, [r4, #4]
 8002218:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800221c:	2b03      	cmp	r3, #3
 800221e:	68d0      	ldr	r0, [r2, #12]
 8002220:	68cf      	ldr	r7, [r1, #12]
 8002222:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002226:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800222a:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800222e:	f8d9 0000 	ldr.w	r0, [r9]
 8002232:	fb06 f807 	mul.w	r8, r6, r7
 8002236:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 800223a:	d044      	beq.n	80022c6 <forward_dense+0xe2>
 800223c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800223e:	b11d      	cbz	r5, 8002248 <forward_dense+0x64>
 8002240:	682d      	ldr	r5, [r5, #0]
 8002242:	b10d      	cbz	r5, 8002248 <forward_dense+0x64>
 8002244:	69ab      	ldr	r3, [r5, #24]
 8002246:	689d      	ldr	r5, [r3, #8]
 8002248:	6992      	ldr	r2, [r2, #24]
 800224a:	698b      	ldr	r3, [r1, #24]
 800224c:	6890      	ldr	r0, [r2, #8]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	b10c      	cbz	r4, 8002256 <forward_dense+0x72>
 8002252:	69a3      	ldr	r3, [r4, #24]
 8002254:	689c      	ldr	r4, [r3, #8]
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <forward_dense+0xf4>)
 8002258:	459c      	cmp	ip, r3
 800225a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800225e:	d023      	beq.n	80022a8 <forward_dense+0xc4>
 8002260:	4e1e      	ldr	r6, [pc, #120]	; (80022dc <forward_dense+0xf8>)
 8002262:	45b4      	cmp	ip, r6
 8002264:	d015      	beq.n	8002292 <forward_dense+0xae>
 8002266:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 800226a:	459c      	cmp	ip, r3
 800226c:	d004      	beq.n	8002278 <forward_dense+0x94>
 800226e:	b00e      	add	sp, #56	; 0x38
 8002270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	deff      	udf	#255	; 0xff
 8002278:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800227c:	a807      	add	r0, sp, #28
 800227e:	9209      	str	r2, [sp, #36]	; 0x24
 8002280:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8002284:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8002288:	f000 f946 	bl	8002518 <forward_lite_dense_if32of32wf32>
 800228c:	b00e      	add	sp, #56	; 0x38
 800228e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002292:	464b      	mov	r3, r9
 8002294:	9500      	str	r5, [sp, #0]
 8002296:	e9cd e803 	strd	lr, r8, [sp, #12]
 800229a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800229e:	f000 fa99 	bl	80027d4 <forward_lite_dense_if32of32wf32_lut4>
 80022a2:	b00e      	add	sp, #56	; 0x38
 80022a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a8:	464b      	mov	r3, r9
 80022aa:	9500      	str	r5, [sp, #0]
 80022ac:	e9cd e803 	strd	lr, r8, [sp, #12]
 80022b0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80022b4:	f000 fbb8 	bl	8002a28 <forward_lite_dense_if32of32wf32_lut8>
 80022b8:	b00e      	add	sp, #56	; 0x38
 80022ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022be:	4620      	mov	r0, r4
 80022c0:	e7aa      	b.n	8002218 <forward_dense+0x34>
 80022c2:	2400      	movs	r4, #0
 80022c4:	e7a8      	b.n	8002218 <forward_dense+0x34>
 80022c6:	2300      	movs	r3, #0
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	deff      	udf	#255	; 0xff
 80022cc:	2300      	movs	r3, #0
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	deff      	udf	#255	; 0xff
 80022d2:	2300      	movs	r3, #0
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	deff      	udf	#255	; 0xff
 80022d8:	01d01040 	.word	0x01d01040
 80022dc:	01e81040 	.word	0x01e81040

080022e0 <forward_relu>:
 80022e0:	6982      	ldr	r2, [r0, #24]
 80022e2:	8813      	ldrh	r3, [r2, #0]
 80022e4:	b323      	cbz	r3, 8002330 <forward_relu+0x50>
 80022e6:	6851      	ldr	r1, [r2, #4]
 80022e8:	684a      	ldr	r2, [r1, #4]
 80022ea:	b102      	cbz	r2, 80022ee <forward_relu+0xe>
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f000 8086 	beq.w	8002400 <forward_relu+0x120>
 80022f4:	b470      	push	{r4, r5, r6}
 80022f6:	690b      	ldr	r3, [r1, #16]
 80022f8:	b103      	cbz	r3, 80022fc <forward_relu+0x1c>
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69c6      	ldr	r6, [r0, #28]
 80022fe:	b1ce      	cbz	r6, 8002334 <forward_relu+0x54>
 8002300:	6871      	ldr	r1, [r6, #4]
 8002302:	6998      	ldr	r0, [r3, #24]
 8002304:	2901      	cmp	r1, #1
 8002306:	d03f      	beq.n	8002388 <forward_relu+0xa8>
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	6991      	ldr	r1, [r2, #24]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	6880      	ldr	r0, [r0, #8]
 8002310:	6889      	ldr	r1, [r1, #8]
 8002312:	d06c      	beq.n	80023ee <forward_relu+0x10e>
 8002314:	68d5      	ldr	r5, [r2, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800231c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8002320:	429d      	cmp	r5, r3
 8002322:	fb04 f202 	mul.w	r2, r4, r2
 8002326:	d1f9      	bne.n	800231c <forward_relu+0x3c>
 8002328:	68b3      	ldr	r3, [r6, #8]
 800232a:	bc70      	pop	{r4, r5, r6}
 800232c:	f000 b86e 	b.w	800240c <forward_lite_nl_relu_generic_if32of32_kernel>
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	deff      	udf	#255	; 0xff
 8002334:	6999      	ldr	r1, [r3, #24]
 8002336:	6893      	ldr	r3, [r2, #8]
 8002338:	6990      	ldr	r0, [r2, #24]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	6889      	ldr	r1, [r1, #8]
 800233e:	6884      	ldr	r4, [r0, #8]
 8002340:	d057      	beq.n	80023f2 <forward_relu+0x112>
 8002342:	68d5      	ldr	r5, [r2, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800234a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800234e:	429d      	cmp	r5, r3
 8002350:	fb00 f202 	mul.w	r2, r0, r2
 8002354:	d1f9      	bne.n	800234a <forward_relu+0x6a>
 8002356:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800235a:	4413      	add	r3, r2
 800235c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002360:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002364:	4294      	cmp	r4, r2
 8002366:	d80d      	bhi.n	8002384 <forward_relu+0xa4>
 8002368:	3204      	adds	r2, #4
 800236a:	3104      	adds	r1, #4
 800236c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002408 <forward_relu+0x128>
 8002370:	4613      	mov	r3, r2
 8002372:	ed72 7a01 	vldmdb	r2!, {s15}
 8002376:	3b08      	subs	r3, #8
 8002378:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800237c:	ed61 7a01 	vstmdb	r1!, {s15}
 8002380:	429c      	cmp	r4, r3
 8002382:	d9f5      	bls.n	8002370 <forward_relu+0x90>
 8002384:	bc70      	pop	{r4, r5, r6}
 8002386:	4770      	bx	lr
 8002388:	6993      	ldr	r3, [r2, #24]
 800238a:	6880      	ldr	r0, [r0, #8]
 800238c:	689c      	ldr	r4, [r3, #8]
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	d030      	beq.n	80023f6 <forward_relu+0x116>
 8002394:	68d5      	ldr	r5, [r2, #12]
 8002396:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800239a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800239e:	429d      	cmp	r5, r3
 80023a0:	fb02 f101 	mul.w	r1, r2, r1
 80023a4:	d1f9      	bne.n	800239a <forward_relu+0xba>
 80023a6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80023aa:	68b3      	ldr	r3, [r6, #8]
 80023ac:	440a      	add	r2, r1
 80023ae:	ed93 7a00 	vldr	s14, [r3]
 80023b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80023b6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80023ba:	429c      	cmp	r4, r3
 80023bc:	d8e2      	bhi.n	8002384 <forward_relu+0xa4>
 80023be:	1d02      	adds	r2, r0, #4
 80023c0:	3304      	adds	r3, #4
 80023c2:	2000      	movs	r0, #0
 80023c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80023c8:	1f19      	subs	r1, r3, #4
 80023ca:	3b08      	subs	r3, #8
 80023cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d405      	bmi.n	80023e2 <forward_relu+0x102>
 80023d6:	429c      	cmp	r4, r3
 80023d8:	f842 0d04 	str.w	r0, [r2, #-4]!
 80023dc:	d8d2      	bhi.n	8002384 <forward_relu+0xa4>
 80023de:	460b      	mov	r3, r1
 80023e0:	e7f0      	b.n	80023c4 <forward_relu+0xe4>
 80023e2:	429c      	cmp	r4, r3
 80023e4:	ed62 7a01 	vstmdb	r2!, {s15}
 80023e8:	d8cc      	bhi.n	8002384 <forward_relu+0xa4>
 80023ea:	460b      	mov	r3, r1
 80023ec:	e7ea      	b.n	80023c4 <forward_relu+0xe4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	e79a      	b.n	8002328 <forward_relu+0x48>
 80023f2:	4622      	mov	r2, r4
 80023f4:	e7b8      	b.n	8002368 <forward_relu+0x88>
 80023f6:	68b2      	ldr	r2, [r6, #8]
 80023f8:	4623      	mov	r3, r4
 80023fa:	ed92 7a00 	vldr	s14, [r2]
 80023fe:	e7de      	b.n	80023be <forward_relu+0xde>
 8002400:	2300      	movs	r3, #0
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	deff      	udf	#255	; 0xff
 8002406:	bf00      	nop
 8002408:	00000000 	.word	0x00000000

0800240c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800240c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002418:	ed93 6a01 	vldr	s12, [r3, #4]
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d42b      	bmi.n	800247a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8002422:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002426:	4413      	add	r3, r2
 8002428:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800242c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8002430:	4291      	cmp	r1, r2
 8002432:	d821      	bhi.n	8002478 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8002434:	f10c 0104 	add.w	r1, ip, #4
 8002438:	1d13      	adds	r3, r2, #4
 800243a:	eba2 020c 	sub.w	r2, r2, ip
 800243e:	4408      	add	r0, r1
 8002440:	e00c      	b.n	800245c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8002442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002446:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	db01      	blt.n	8002454 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8002450:	ee65 7a86 	vmul.f32	s15, s11, s12
 8002454:	4293      	cmp	r3, r2
 8002456:	ed60 7a01 	vstmdb	r0!, {s15}
 800245a:	d00c      	beq.n	8002476 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800245c:	ed73 7a01 	vldmdb	r3!, {s15}
 8002460:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	daeb      	bge.n	8002442 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800246a:	eef0 7a66 	vmov.f32	s15, s13
 800246e:	4293      	cmp	r3, r2
 8002470:	ed60 7a01 	vstmdb	r0!, {s15}
 8002474:	d1f2      	bne.n	800245c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8002476:	4770      	bx	lr
 8002478:	4770      	bx	lr
 800247a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800247e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002482:	4413      	add	r3, r2
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800248c:	b500      	push	{lr}
 800248e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8002492:	d019      	beq.n	80024c8 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8002494:	4561      	cmp	r1, ip
 8002496:	d815      	bhi.n	80024c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8002498:	f10e 0204 	add.w	r2, lr, #4
 800249c:	f10c 0304 	add.w	r3, ip, #4
 80024a0:	ebac 010e 	sub.w	r1, ip, lr
 80024a4:	4402      	add	r2, r0
 80024a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80024aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80024ba:	d827      	bhi.n	800250c <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 80024bc:	428b      	cmp	r3, r1
 80024be:	ed62 6a01 	vstmdb	r2!, {s13}
 80024c2:	d1f0      	bne.n	80024a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80024c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c8:	4561      	cmp	r1, ip
 80024ca:	d8fb      	bhi.n	80024c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80024cc:	f10e 0204 	add.w	r2, lr, #4
 80024d0:	f10c 0304 	add.w	r3, ip, #4
 80024d4:	ebac 010e 	sub.w	r1, ip, lr
 80024d8:	f04f 0c00 	mov.w	ip, #0
 80024dc:	4402      	add	r2, r0
 80024de:	ed73 7a01 	vldmdb	r3!, {s15}
 80024e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	d40a      	bmi.n	8002502 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80024ec:	428b      	cmp	r3, r1
 80024ee:	f842 cd04 	str.w	ip, [r2, #-4]!
 80024f2:	d0e7      	beq.n	80024c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80024f4:	ed73 7a01 	vldmdb	r3!, {s15}
 80024f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	d5f4      	bpl.n	80024ec <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8002502:	428b      	cmp	r3, r1
 8002504:	ed62 7a01 	vstmdb	r2!, {s15}
 8002508:	d1e9      	bne.n	80024de <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 800250a:	e7db      	b.n	80024c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800250c:	428b      	cmp	r3, r1
 800250e:	ed62 7a01 	vstmdb	r2!, {s15}
 8002512:	d1c8      	bne.n	80024a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8002514:	e7d6      	b.n	80024c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8002516:	bf00      	nop

08002518 <forward_lite_dense_if32of32wf32>:
 8002518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251c:	ed2d 8b0c 	vpush	{d8-d13}
 8002520:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8002524:	6801      	ldr	r1, [r0, #0]
 8002526:	b083      	sub	sp, #12
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002530:	9100      	str	r1, [sp, #0]
 8002532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002536:	4299      	cmp	r1, r3
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	f080 811c 	bcs.w	8002776 <forward_lite_dense_if32of32wf32+0x25e>
 800253e:	4607      	mov	r7, r0
 8002540:	6904      	ldr	r4, [r0, #16]
 8002542:	0096      	lsls	r6, r2, #2
 8002544:	9b00      	ldr	r3, [sp, #0]
 8002546:	68bd      	ldr	r5, [r7, #8]
 8002548:	eb03 0e06 	add.w	lr, r3, r6
 800254c:	461e      	mov	r6, r3
 800254e:	459e      	cmp	lr, r3
 8002550:	f240 8103 	bls.w	800275a <forward_lite_dense_if32of32wf32+0x242>
 8002554:	f1a4 0c10 	sub.w	ip, r4, #16
 8002558:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800255c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002560:	f10c 0c01 	add.w	ip, ip, #1
 8002564:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8002568:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800256c:	2c0f      	cmp	r4, #15
 800256e:	f240 8107 	bls.w	8002780 <forward_lite_dense_if32of32wf32+0x268>
 8002572:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8002576:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800257a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80027d0 <forward_lite_dense_if32of32wf32+0x2b8>
 800257e:	4621      	mov	r1, r4
 8002580:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8002584:	3910      	subs	r1, #16
 8002586:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800258a:	3340      	adds	r3, #64	; 0x40
 800258c:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8002590:	290f      	cmp	r1, #15
 8002592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002596:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800259a:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800259e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80025a2:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 80025a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80025aa:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 80025ae:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 80025b2:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 80025b6:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 80025ba:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 80025be:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 80025c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80025c6:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 80025ca:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 80025ce:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 80025d2:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 80025d6:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 80025da:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 80025de:	eeed 7a26 	vfma.f32	s15, s26, s13
 80025e2:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 80025e6:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80025ea:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80025ee:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80025f2:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80025f6:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80025fa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80025fe:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8002602:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8002606:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800260a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800260e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8002612:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8002616:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800261a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800261e:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8002622:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8002626:	eee9 7a89 	vfma.f32	s15, s19, s18
 800262a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800262e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8002632:	eee1 7a21 	vfma.f32	s15, s2, s3
 8002636:	eee2 7a22 	vfma.f32	s15, s4, s5
 800263a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800263e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002642:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002646:	eee6 7a26 	vfma.f32	s15, s12, s13
 800264a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264e:	d897      	bhi.n	8002580 <forward_lite_dense_if32of32wf32+0x68>
 8002650:	eb05 020b 	add.w	r2, r5, fp
 8002654:	f004 010f 	and.w	r1, r4, #15
 8002658:	4663      	mov	r3, ip
 800265a:	2903      	cmp	r1, #3
 800265c:	d95f      	bls.n	800271e <forward_lite_dense_if32of32wf32+0x206>
 800265e:	edd2 6a01 	vldr	s13, [r2, #4]
 8002662:	1f08      	subs	r0, r1, #4
 8002664:	edd3 7a01 	vldr	s15, [r3, #4]
 8002668:	ed93 4a00 	vldr	s8, [r3]
 800266c:	2803      	cmp	r0, #3
 800266e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002672:	edd2 4a00 	vldr	s9, [r2]
 8002676:	ed93 5a02 	vldr	s10, [r3, #8]
 800267a:	edd2 5a02 	vldr	s11, [r2, #8]
 800267e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002682:	ed93 6a03 	vldr	s12, [r3, #12]
 8002686:	edd2 6a03 	vldr	s13, [r2, #12]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002692:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002696:	eeb0 7a67 	vmov.f32	s14, s15
 800269a:	d938      	bls.n	800270e <forward_lite_dense_if32of32wf32+0x1f6>
 800269c:	edd2 6a05 	vldr	s13, [r2, #20]
 80026a0:	f1a1 0a08 	sub.w	sl, r1, #8
 80026a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80026a8:	ed93 4a04 	vldr	s8, [r3, #16]
 80026ac:	f1ba 0f03 	cmp.w	sl, #3
 80026b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026b4:	edd2 4a04 	vldr	s9, [r2, #16]
 80026b8:	ed93 5a06 	vldr	s10, [r3, #24]
 80026bc:	edd2 5a06 	vldr	s11, [r2, #24]
 80026c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80026c4:	ed93 6a07 	vldr	s12, [r3, #28]
 80026c8:	edd2 6a07 	vldr	s13, [r2, #28]
 80026cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80026d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	d919      	bls.n	800270e <forward_lite_dense_if32of32wf32+0x1f6>
 80026da:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80026de:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80026e2:	ed92 4a08 	vldr	s8, [r2, #32]
 80026e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026ea:	edd3 4a08 	vldr	s9, [r3, #32]
 80026ee:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 80026f2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80026f6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80026fa:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80026fe:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002702:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002706:	eee6 7a26 	vfma.f32	s15, s12, s13
 800270a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270e:	0880      	lsrs	r0, r0, #2
 8002710:	f001 0103 	and.w	r1, r1, #3
 8002714:	3001      	adds	r0, #1
 8002716:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800271a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800271e:	b1a9      	cbz	r1, 800274c <forward_lite_dense_if32of32wf32+0x234>
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	3901      	subs	r1, #1
 8002726:	edd2 7a00 	vldr	s15, [r2]
 800272a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800272e:	d00d      	beq.n	800274c <forward_lite_dense_if32of32wf32+0x234>
 8002730:	edd3 6a01 	vldr	s13, [r3, #4]
 8002734:	2901      	cmp	r1, #1
 8002736:	edd2 7a01 	vldr	s15, [r2, #4]
 800273a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800273e:	d005      	beq.n	800274c <forward_lite_dense_if32of32wf32+0x234>
 8002740:	edd2 6a02 	vldr	s13, [r2, #8]
 8002744:	edd3 7a02 	vldr	s15, [r3, #8]
 8002748:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800274c:	eca6 7a01 	vstmia	r6!, {s14}
 8002750:	45b6      	cmp	lr, r6
 8002752:	444d      	add	r5, r9
 8002754:	f63f af0a 	bhi.w	800256c <forward_lite_dense_if32of32wf32+0x54>
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	b9b3      	cbnz	r3, 800278c <forward_lite_dense_if32of32wf32+0x274>
 800275e:	9b00      	ldr	r3, [sp, #0]
 8002760:	0096      	lsls	r6, r2, #2
 8002762:	9901      	ldr	r1, [sp, #4]
 8002764:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002768:	693c      	ldr	r4, [r7, #16]
 800276a:	4299      	cmp	r1, r3
 800276c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f63f aee7 	bhi.w	8002544 <forward_lite_dense_if32of32wf32+0x2c>
 8002776:	b003      	add	sp, #12
 8002778:	ecbd 8b0c 	vpop	{d8-d13}
 800277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002780:	4621      	mov	r1, r4
 8002782:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80027d0 <forward_lite_dense_if32of32wf32+0x2b8>
 8002786:	462a      	mov	r2, r5
 8002788:	4643      	mov	r3, r8
 800278a:	e766      	b.n	800265a <forward_lite_dense_if32of32wf32+0x142>
 800278c:	2a00      	cmp	r2, #0
 800278e:	d0e6      	beq.n	800275e <forward_lite_dense_if32of32wf32+0x246>
 8002790:	9a00      	ldr	r2, [sp, #0]
 8002792:	ed93 7a00 	vldr	s14, [r3]
 8002796:	edd2 7a00 	vldr	s15, [r2]
 800279a:	4613      	mov	r3, r2
 800279c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027a0:	edc2 7a00 	vstr	s15, [r2]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d9d9      	bls.n	800275e <forward_lite_dense_if32of32wf32+0x246>
 80027aa:	1d19      	adds	r1, r3, #4
 80027ac:	2301      	movs	r3, #1
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	ed91 7a00 	vldr	s14, [r1]
 80027b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80027b8:	3301      	adds	r3, #1
 80027ba:	edd2 7a00 	vldr	s15, [r2]
 80027be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c2:	ece1 7a01 	vstmia	r1!, {s15}
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f0      	bhi.n	80027ae <forward_lite_dense_if32of32wf32+0x296>
 80027cc:	e7c7      	b.n	800275e <forward_lite_dense_if32of32wf32+0x246>
 80027ce:	bf00      	nop
 80027d0:	00000000 	.word	0x00000000

080027d4 <forward_lite_dense_if32of32wf32_lut4>:
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	b08d      	sub	sp, #52	; 0x34
 80027da:	4605      	mov	r5, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	9005      	str	r0, [sp, #20]
 80027e0:	4618      	mov	r0, r3
 80027e2:	920a      	str	r2, [sp, #40]	; 0x28
 80027e4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80027e6:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80027f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80027f4:	9308      	str	r3, [sp, #32]
 80027f6:	b126      	cbz	r6, 8002802 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	4631      	mov	r1, r6
 80027fc:	f000 fbc4 	bl	8002f88 <st_int8_copy>
 8002800:	4630      	mov	r0, r6
 8002802:	9b05      	ldr	r3, [sp, #20]
 8002804:	9a08      	ldr	r2, [sp, #32]
 8002806:	4293      	cmp	r3, r2
 8002808:	f080 80f7 	bcs.w	80029fa <forward_lite_dense_if32of32wf32_lut4+0x226>
 800280c:	08eb      	lsrs	r3, r5, #3
 800280e:	f005 0101 	and.w	r1, r5, #1
 8002812:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002814:	f025 0801 	bic.w	r8, r5, #1
 8002818:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	9102      	str	r1, [sp, #8]
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	f104 0b20 	add.w	fp, r4, #32
 8002828:	00a9      	lsls	r1, r5, #2
 800282a:	9304      	str	r3, [sp, #16]
 800282c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002830:	9b05      	ldr	r3, [sp, #20]
 8002832:	9207      	str	r2, [sp, #28]
 8002834:	9109      	str	r1, [sp, #36]	; 0x24
 8002836:	920b      	str	r2, [sp, #44]	; 0x2c
 8002838:	9a07      	ldr	r2, [sp, #28]
 800283a:	eb03 0902 	add.w	r9, r3, r2
 800283e:	f1ab 0220 	sub.w	r2, fp, #32
 8002842:	4599      	cmp	r9, r3
 8002844:	9206      	str	r2, [sp, #24]
 8002846:	f240 80db 	bls.w	8002a00 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800284a:	469e      	mov	lr, r3
 800284c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800284e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002852:	9303      	str	r3, [sp, #12]
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80b4 	beq.w	80029c4 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800285c:	9b04      	ldr	r3, [sp, #16]
 800285e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002a24 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8002862:	18d4      	adds	r4, r2, r3
 8002864:	465b      	mov	r3, fp
 8002866:	7816      	ldrb	r6, [r2, #0]
 8002868:	3204      	adds	r2, #4
 800286a:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800286e:	3320      	adds	r3, #32
 8002870:	f006 070f 	and.w	r7, r6, #15
 8002874:	0936      	lsrs	r6, r6, #4
 8002876:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 800287a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800287e:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 8002882:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002886:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 800288a:	edd7 7a00 	vldr	s15, [r7]
 800288e:	ed96 3a00 	vldr	s6, [r6]
 8002892:	092e      	lsrs	r6, r5, #4
 8002894:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002898:	f005 050f 	and.w	r5, r5, #15
 800289c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80028a0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80028a4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80028a8:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 80028ac:	eee3 7a04 	vfma.f32	s15, s6, s8
 80028b0:	ed96 3a00 	vldr	s6, [r6]
 80028b4:	ed95 4a00 	vldr	s8, [r5]
 80028b8:	090d      	lsrs	r5, r1, #4
 80028ba:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80028be:	f001 010f 	and.w	r1, r1, #15
 80028c2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80028c6:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 80028ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80028ce:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 80028d2:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80028d6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80028da:	eee4 7a05 	vfma.f32	s15, s8, s10
 80028de:	ed95 4a00 	vldr	s8, [r5]
 80028e2:	ed91 5a00 	vldr	s10, [r1]
 80028e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80028ea:	42a2      	cmp	r2, r4
 80028ec:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80028f0:	f001 010f 	and.w	r1, r1, #15
 80028f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80028f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80028fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002900:	eee5 7a06 	vfma.f32	s15, s10, s12
 8002904:	ed95 5a00 	vldr	s10, [r5]
 8002908:	ed91 6a00 	vldr	s12, [r1]
 800290c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002910:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002918:	d1a5      	bne.n	8002866 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800291a:	4656      	mov	r6, sl
 800291c:	4546      	cmp	r6, r8
 800291e:	d257      	bcs.n	80029d0 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8002920:	9b03      	ldr	r3, [sp, #12]
 8002922:	f106 0208 	add.w	r2, r6, #8
 8002926:	1e61      	subs	r1, r4, #1
 8002928:	1b9d      	subs	r5, r3, r6
 800292a:	08ef      	lsrs	r7, r5, #3
 800292c:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8002930:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002934:	3208      	adds	r2, #8
 8002936:	ed52 5a03 	vldr	s11, [r2, #-12]
 800293a:	f003 0c0f 	and.w	ip, r3, #15
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	ed52 6a04 	vldr	s13, [r2, #-16]
 8002944:	42a9      	cmp	r1, r5
 8002946:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800294a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800294e:	eddc 7a00 	vldr	s15, [ip]
 8002952:	ed93 6a00 	vldr	s12, [r3]
 8002956:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800295a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800295e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002962:	d1e5      	bne.n	8002930 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8002964:	3701      	adds	r7, #1
 8002966:	19e2      	adds	r2, r4, r7
 8002968:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800296c:	9b02      	ldr	r3, [sp, #8]
 800296e:	b30b      	cbz	r3, 80029b4 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8002970:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002974:	edd6 7a00 	vldr	s15, [r6]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800297e:	edd3 6a00 	vldr	s13, [r3]
 8002982:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002986:	ecae 7a01 	vstmia	lr!, {s14}
 800298a:	45f1      	cmp	r9, lr
 800298c:	f63f af62 	bhi.w	8002854 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8002990:	9b05      	ldr	r3, [sp, #20]
 8002992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002994:	1899      	adds	r1, r3, r2
 8002996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002998:	b9e3      	cbnz	r3, 80029d4 <forward_lite_dense_if32of32wf32_lut4+0x200>
 800299a:	9b08      	ldr	r3, [sp, #32]
 800299c:	428b      	cmp	r3, r1
 800299e:	d92c      	bls.n	80029fa <forward_lite_dense_if32of32wf32_lut4+0x226>
 80029a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029a2:	4498      	add	r8, r3
 80029a4:	449a      	add	sl, r3
 80029a6:	449b      	add	fp, r3
 80029a8:	9b05      	ldr	r3, [sp, #20]
 80029aa:	4599      	cmp	r9, r3
 80029ac:	d92a      	bls.n	8002a04 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80029ae:	460b      	mov	r3, r1
 80029b0:	9105      	str	r1, [sp, #20]
 80029b2:	e741      	b.n	8002838 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80029b4:	ecae 7a01 	vstmia	lr!, {s14}
 80029b8:	45f1      	cmp	r9, lr
 80029ba:	d9e9      	bls.n	8002990 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80029bc:	9b01      	ldr	r3, [sp, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af4c 	bne.w	800285c <forward_lite_dense_if32of32wf32_lut4+0x88>
 80029c4:	9e06      	ldr	r6, [sp, #24]
 80029c6:	4614      	mov	r4, r2
 80029c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a24 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80029cc:	4546      	cmp	r6, r8
 80029ce:	d3a7      	bcc.n	8002920 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80029d0:	4622      	mov	r2, r4
 80029d2:	e7cb      	b.n	800296c <forward_lite_dense_if32of32wf32_lut4+0x198>
 80029d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0df      	beq.n	800299a <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80029da:	9b07      	ldr	r3, [sp, #28]
 80029dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80029de:	1acb      	subs	r3, r1, r3
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80029e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ec:	ece3 7a01 	vstmia	r3!, {s15}
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d1f5      	bne.n	80029e0 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80029f4:	9b08      	ldr	r3, [sp, #32]
 80029f6:	428b      	cmp	r3, r1
 80029f8:	d8d2      	bhi.n	80029a0 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80029fa:	b00d      	add	sp, #52	; 0x34
 80029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a00:	4619      	mov	r1, r3
 8002a02:	e7c8      	b.n	8002996 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8002a04:	9b07      	ldr	r3, [sp, #28]
 8002a06:	1acb      	subs	r3, r1, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002a0c:	ed92 7a00 	vldr	s14, [r2]
 8002a10:	ecf0 7a01 	vldmia	r0!, {s15}
 8002a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a18:	ece2 7a01 	vstmia	r2!, {s15}
 8002a1c:	428a      	cmp	r2, r1
 8002a1e:	d1f5      	bne.n	8002a0c <forward_lite_dense_if32of32wf32_lut4+0x238>
 8002a20:	e7f2      	b.n	8002a08 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8002a22:	bf00      	nop
 8002a24:	00000000 	.word	0x00000000

08002a28 <forward_lite_dense_if32of32wf32_lut8>:
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	b091      	sub	sp, #68	; 0x44
 8002a2e:	4699      	mov	r9, r3
 8002a30:	468b      	mov	fp, r1
 8002a32:	920e      	str	r2, [sp, #56]	; 0x38
 8002a34:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8002a36:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8002a3a:	9003      	str	r0, [sp, #12]
 8002a3c:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002a48:	930c      	str	r3, [sp, #48]	; 0x30
 8002a4a:	b134      	cbz	r4, 8002a5a <forward_lite_dense_if32of32wf32_lut8+0x32>
 8002a4c:	4648      	mov	r0, r9
 8002a4e:	46a1      	mov	r9, r4
 8002a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a54:	4621      	mov	r1, r4
 8002a56:	f000 fa97 	bl	8002f88 <st_int8_copy>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f080 8084 	bcs.w	8002b6c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8002a64:	4bb7      	ldr	r3, [pc, #732]	; (8002d44 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8002a66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002a68:	4443      	add	r3, r8
 8002a6a:	9d03      	ldr	r5, [sp, #12]
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	eddf 3ab6 	vldr	s7, [pc, #728]	; 8002d48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	920b      	str	r2, [sp, #44]	; 0x2c
 8002a76:	f103 0120 	add.w	r1, r3, #32
 8002a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8002a7c:	445b      	add	r3, fp
 8002a7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a80:	9105      	str	r1, [sp, #20]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	eb0b 0301 	add.w	r3, fp, r1
 8002a88:	469a      	mov	sl, r3
 8002a8a:	469e      	mov	lr, r3
 8002a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a8e:	eb05 0c03 	add.w	ip, r5, r3
 8002a92:	45ac      	cmp	ip, r5
 8002a94:	d952      	bls.n	8002b3c <forward_lite_dense_if32of32wf32_lut8+0x114>
 8002a96:	9800      	ldr	r0, [sp, #0]
 8002a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a9a:	f100 011f 	add.w	r1, r0, #31
 8002a9e:	eba0 020b 	sub.w	r2, r0, fp
 8002aa2:	445b      	add	r3, fp
 8002aa4:	9101      	str	r1, [sp, #4]
 8002aa6:	eba1 010b 	sub.w	r1, r1, fp
 8002aaa:	0952      	lsrs	r2, r2, #5
 8002aac:	9306      	str	r3, [sp, #24]
 8002aae:	0889      	lsrs	r1, r1, #2
 8002ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ab2:	3101      	adds	r1, #1
 8002ab4:	9102      	str	r1, [sp, #8]
 8002ab6:	1c51      	adds	r1, r2, #1
 8002ab8:	00d2      	lsls	r2, r2, #3
 8002aba:	3210      	adds	r2, #16
 8002abc:	920a      	str	r2, [sp, #40]	; 0x28
 8002abe:	00ca      	lsls	r2, r1, #3
 8002ac0:	9208      	str	r2, [sp, #32]
 8002ac2:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8002ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8002ac8:	1f02      	subs	r2, r0, #4
 8002aca:	9204      	str	r2, [sp, #16]
 8002acc:	f10b 0204 	add.w	r2, fp, #4
 8002ad0:	9207      	str	r2, [sp, #28]
 8002ad2:	f1b8 0f07 	cmp.w	r8, #7
 8002ad6:	d84c      	bhi.n	8002b72 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8002ad8:	45d3      	cmp	fp, sl
 8002ada:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002d48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002ade:	d20f      	bcs.n	8002b00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ae8:	ecf1 7a01 	vldmia	r1!, {s15}
 8002aec:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002af0:	4551      	cmp	r1, sl
 8002af2:	edd2 6a00 	vldr	s13, [r2]
 8002af6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002afa:	d3f3      	bcc.n	8002ae4 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8002afc:	9a02      	ldr	r2, [sp, #8]
 8002afe:	4413      	add	r3, r2
 8002b00:	eca5 7a01 	vstmia	r5!, {s14}
 8002b04:	45ac      	cmp	ip, r5
 8002b06:	d8e4      	bhi.n	8002ad2 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8002b08:	9b03      	ldr	r3, [sp, #12]
 8002b0a:	46f3      	mov	fp, lr
 8002b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b0e:	1899      	adds	r1, r3, r2
 8002b10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b12:	b9c3      	cbnz	r3, 8002b46 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8002b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b16:	428b      	cmp	r3, r1
 8002b18:	d928      	bls.n	8002b6c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8002b1a:	9b00      	ldr	r3, [sp, #0]
 8002b1c:	9a05      	ldr	r2, [sp, #20]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4492      	add	sl, r2
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	9b03      	ldr	r3, [sp, #12]
 8002b26:	459c      	cmp	ip, r3
 8002b28:	f240 821e 	bls.w	8002f68 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b30:	4496      	add	lr, r2
 8002b32:	9103      	str	r1, [sp, #12]
 8002b34:	eb05 0c03 	add.w	ip, r5, r3
 8002b38:	45ac      	cmp	ip, r5
 8002b3a:	d8ac      	bhi.n	8002a96 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8002b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b3e:	4629      	mov	r1, r5
 8002b40:	46f3      	mov	fp, lr
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0e6      	beq.n	8002b14 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8002b46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0e3      	beq.n	8002b14 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8002b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002b50:	1acb      	subs	r3, r1, r3
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ecb2 7a01 	vldmia	r2!, {s14}
 8002b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b5e:	ece3 7a01 	vstmia	r3!, {s15}
 8002b62:	428b      	cmp	r3, r1
 8002b64:	d1f5      	bne.n	8002b52 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8002b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	d8d6      	bhi.n	8002b1a <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8002b6c:	b011      	add	sp, #68	; 0x44
 8002b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	2a02      	cmp	r2, #2
 8002b78:	f000 81ee 	beq.w	8002f58 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8002b7c:	2a03      	cmp	r2, #3
 8002b7e:	f000 80e5 	beq.w	8002d4c <forward_lite_dense_if32of32wf32_lut8+0x324>
 8002b82:	2a01      	cmp	r2, #1
 8002b84:	f000 81d2 	beq.w	8002f2c <forward_lite_dense_if32of32wf32_lut8+0x504>
 8002b88:	9a06      	ldr	r2, [sp, #24]
 8002b8a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002d48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002b8e:	4593      	cmp	fp, r2
 8002b90:	f200 81e8 	bhi.w	8002f64 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8002b94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b96:	f103 0208 	add.w	r2, r3, #8
 8002b9a:	f10b 0120 	add.w	r1, fp, #32
 8002b9e:	18c4      	adds	r4, r0, r3
 8002ba0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 8002baa:	3120      	adds	r1, #32
 8002bac:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002bb0:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 8002bb4:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 8002bb8:	edd0 7a00 	vldr	s15, [r0]
 8002bbc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8002bc0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002bc4:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 8002bc8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002bcc:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 8002bd0:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 8002bd4:	edd0 2a00 	vldr	s5, [r0]
 8002bd8:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8002bdc:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002be0:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 8002be4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002be8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8002bec:	ed90 3a00 	vldr	s6, [r0]
 8002bf0:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8002bf4:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002bf8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002bfc:	ed90 4a00 	vldr	s8, [r0]
 8002c00:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8002c04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002c0c:	edd0 4a00 	vldr	s9, [r0]
 8002c10:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8002c14:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c18:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002c1c:	ed90 5a00 	vldr	s10, [r0]
 8002c20:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8002c24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c28:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002c2c:	edd0 5a00 	vldr	s11, [r0]
 8002c30:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8002c34:	42a2      	cmp	r2, r4
 8002c36:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002c3e:	ed90 6a00 	vldr	s12, [r0]
 8002c42:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4a:	d1a9      	bne.n	8002ba0 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8002c4c:	9a08      	ldr	r2, [sp, #32]
 8002c4e:	4413      	add	r3, r2
 8002c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c52:	4572      	cmp	r2, lr
 8002c54:	f4bf af54 	bcs.w	8002b00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002c58:	7819      	ldrb	r1, [r3, #0]
 8002c5a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002c5e:	edd1 7a00 	vldr	s15, [r1]
 8002c62:	4611      	mov	r1, r2
 8002c64:	ecf1 6a01 	vldmia	r1!, {s13}
 8002c68:	458a      	cmp	sl, r1
 8002c6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002c6e:	d963      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002c70:	7859      	ldrb	r1, [r3, #1]
 8002c72:	edd2 6a01 	vldr	s13, [r2, #4]
 8002c76:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002c7a:	edd1 7a00 	vldr	s15, [r1]
 8002c7e:	f102 0108 	add.w	r1, r2, #8
 8002c82:	458a      	cmp	sl, r1
 8002c84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002c88:	d956      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002c8a:	7899      	ldrb	r1, [r3, #2]
 8002c8c:	edd2 6a02 	vldr	s13, [r2, #8]
 8002c90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002c94:	edd1 7a00 	vldr	s15, [r1]
 8002c98:	f102 010c 	add.w	r1, r2, #12
 8002c9c:	458a      	cmp	sl, r1
 8002c9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ca2:	d949      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002ca4:	78d9      	ldrb	r1, [r3, #3]
 8002ca6:	edd2 6a03 	vldr	s13, [r2, #12]
 8002caa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002cae:	edd1 7a00 	vldr	s15, [r1]
 8002cb2:	f102 0110 	add.w	r1, r2, #16
 8002cb6:	458a      	cmp	sl, r1
 8002cb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cbc:	d93c      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cbe:	7919      	ldrb	r1, [r3, #4]
 8002cc0:	edd2 6a04 	vldr	s13, [r2, #16]
 8002cc4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002cc8:	edd1 7a00 	vldr	s15, [r1]
 8002ccc:	f102 0114 	add.w	r1, r2, #20
 8002cd0:	458a      	cmp	sl, r1
 8002cd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cd6:	d92f      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cd8:	7959      	ldrb	r1, [r3, #5]
 8002cda:	edd2 6a05 	vldr	s13, [r2, #20]
 8002cde:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002ce2:	edd1 7a00 	vldr	s15, [r1]
 8002ce6:	f102 0118 	add.w	r1, r2, #24
 8002cea:	458a      	cmp	sl, r1
 8002cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002cf0:	d922      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002cf2:	7999      	ldrb	r1, [r3, #6]
 8002cf4:	edd2 6a06 	vldr	s13, [r2, #24]
 8002cf8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002cfc:	edd1 7a00 	vldr	s15, [r1]
 8002d00:	f102 011c 	add.w	r1, r2, #28
 8002d04:	458a      	cmp	sl, r1
 8002d06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d0a:	d915      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002d0c:	79d9      	ldrb	r1, [r3, #7]
 8002d0e:	edd2 6a07 	vldr	s13, [r2, #28]
 8002d12:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d16:	edd1 7a00 	vldr	s15, [r1]
 8002d1a:	f102 0120 	add.w	r1, r2, #32
 8002d1e:	458a      	cmp	sl, r1
 8002d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d24:	d908      	bls.n	8002d38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002d26:	7a19      	ldrb	r1, [r3, #8]
 8002d28:	edd2 7a08 	vldr	s15, [r2, #32]
 8002d2c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d30:	edd1 6a00 	vldr	s13, [r1]
 8002d34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d38:	9901      	ldr	r1, [sp, #4]
 8002d3a:	1a8a      	subs	r2, r1, r2
 8002d3c:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8002d40:	1c53      	adds	r3, r2, #1
 8002d42:	e6dd      	b.n	8002b00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002d44:	3ffffff8 	.word	0x3ffffff8
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	eeb0 7a63 	vmov.f32	s14, s7
 8002d50:	465a      	mov	r2, fp
 8002d52:	461f      	mov	r7, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d5a:	ecf0 7a01 	vldmia	r0!, {s15}
 8002d5e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d62:	edd1 6a00 	vldr	s13, [r1]
 8002d66:	9900      	ldr	r1, [sp, #0]
 8002d68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d6c:	4288      	cmp	r0, r1
 8002d6e:	f200 80f7 	bhi.w	8002f60 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8002d72:	9904      	ldr	r1, [sp, #16]
 8002d74:	f103 0411 	add.w	r4, r3, #17
 8002d78:	3309      	adds	r3, #9
 8002d7a:	1a8e      	subs	r6, r1, r2
 8002d7c:	3224      	adds	r2, #36	; 0x24
 8002d7e:	0976      	lsrs	r6, r6, #5
 8002d80:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002d84:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8002d88:	3308      	adds	r3, #8
 8002d8a:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 8002d8e:	3220      	adds	r2, #32
 8002d90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002d94:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 8002d98:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8002d9c:	edd1 7a00 	vldr	s15, [r1]
 8002da0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002da4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002da8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8002dac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002db0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8002db4:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8002db8:	edd1 2a00 	vldr	s5, [r1]
 8002dbc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8002dc0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002dc4:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 8002dc8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002dcc:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8002dd0:	ed91 3a00 	vldr	s6, [r1]
 8002dd4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8002dd8:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002ddc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002de0:	ed91 4a00 	vldr	s8, [r1]
 8002de4:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8002de8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002dec:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002df0:	edd1 4a00 	vldr	s9, [r1]
 8002df4:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8002df8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002dfc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002e00:	ed91 5a00 	vldr	s10, [r1]
 8002e04:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8002e08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002e10:	edd1 5a00 	vldr	s11, [r1]
 8002e14:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002e1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002e22:	ed91 6a00 	vldr	s12, [r1]
 8002e26:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2e:	d1a9      	bne.n	8002d84 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8002e30:	3601      	adds	r6, #1
 8002e32:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8002e36:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8002e3a:	4550      	cmp	r0, sl
 8002e3c:	f4bf ae60 	bcs.w	8002b00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e46:	edd2 7a00 	vldr	s15, [r2]
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	ecf2 6a01 	vldmia	r2!, {s13}
 8002e50:	4592      	cmp	sl, r2
 8002e52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e56:	d963      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002e58:	785a      	ldrb	r2, [r3, #1]
 8002e5a:	edd0 6a01 	vldr	s13, [r0, #4]
 8002e5e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e62:	edd2 7a00 	vldr	s15, [r2]
 8002e66:	f100 0208 	add.w	r2, r0, #8
 8002e6a:	4592      	cmp	sl, r2
 8002e6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e70:	d956      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002e72:	789a      	ldrb	r2, [r3, #2]
 8002e74:	edd0 6a02 	vldr	s13, [r0, #8]
 8002e78:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e7c:	edd2 7a00 	vldr	s15, [r2]
 8002e80:	f100 020c 	add.w	r2, r0, #12
 8002e84:	4592      	cmp	sl, r2
 8002e86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e8a:	d949      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002e8c:	78da      	ldrb	r2, [r3, #3]
 8002e8e:	edd0 6a03 	vldr	s13, [r0, #12]
 8002e92:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002e96:	edd2 7a00 	vldr	s15, [r2]
 8002e9a:	f100 0210 	add.w	r2, r0, #16
 8002e9e:	4592      	cmp	sl, r2
 8002ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ea4:	d93c      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002ea6:	791a      	ldrb	r2, [r3, #4]
 8002ea8:	edd0 6a04 	vldr	s13, [r0, #16]
 8002eac:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002eb0:	edd2 7a00 	vldr	s15, [r2]
 8002eb4:	f100 0214 	add.w	r2, r0, #20
 8002eb8:	4592      	cmp	sl, r2
 8002eba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ebe:	d92f      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002ec0:	795a      	ldrb	r2, [r3, #5]
 8002ec2:	edd0 6a05 	vldr	s13, [r0, #20]
 8002ec6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002eca:	edd2 7a00 	vldr	s15, [r2]
 8002ece:	f100 0218 	add.w	r2, r0, #24
 8002ed2:	4596      	cmp	lr, r2
 8002ed4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ed8:	d922      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002eda:	799a      	ldrb	r2, [r3, #6]
 8002edc:	edd0 6a06 	vldr	s13, [r0, #24]
 8002ee0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002ee4:	edd2 7a00 	vldr	s15, [r2]
 8002ee8:	f100 021c 	add.w	r2, r0, #28
 8002eec:	4596      	cmp	lr, r2
 8002eee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ef2:	d915      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002ef4:	79da      	ldrb	r2, [r3, #7]
 8002ef6:	edd0 6a07 	vldr	s13, [r0, #28]
 8002efa:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002efe:	edd2 7a00 	vldr	s15, [r2]
 8002f02:	f100 0220 	add.w	r2, r0, #32
 8002f06:	4596      	cmp	lr, r2
 8002f08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f0c:	d908      	bls.n	8002f20 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002f0e:	7a1a      	ldrb	r2, [r3, #8]
 8002f10:	edd0 7a08 	vldr	s15, [r0, #32]
 8002f14:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002f18:	edd2 6a00 	vldr	s13, [r2]
 8002f1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f20:	9a01      	ldr	r2, [sp, #4]
 8002f22:	1a10      	subs	r0, r2, r0
 8002f24:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	e5e9      	b.n	8002b00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002f2c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f30:	eddb 7a00 	vldr	s15, [fp]
 8002f34:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002f38:	9a07      	ldr	r2, [sp, #28]
 8002f3a:	ed91 7a00 	vldr	s14, [r1]
 8002f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f42:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f46:	ecf2 7a01 	vldmia	r2!, {s15}
 8002f4a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002f4e:	edd1 6a00 	vldr	s13, [r1]
 8002f52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f56:	e6fc      	b.n	8002d52 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8002f58:	eeb0 7a63 	vmov.f32	s14, s7
 8002f5c:	465a      	mov	r2, fp
 8002f5e:	e7f0      	b.n	8002f42 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8002f60:	463b      	mov	r3, r7
 8002f62:	e76a      	b.n	8002e3a <forward_lite_dense_if32of32wf32_lut8+0x412>
 8002f64:	465a      	mov	r2, fp
 8002f66:	e674      	b.n	8002c52 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8002f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002f70:	ed92 7a00 	vldr	s14, [r2]
 8002f74:	ecf0 7a01 	vldmia	r0!, {s15}
 8002f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7c:	ece2 7a01 	vstmia	r2!, {s15}
 8002f80:	4291      	cmp	r1, r2
 8002f82:	d1f5      	bne.n	8002f70 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8002f84:	e7f2      	b.n	8002f6c <forward_lite_dense_if32of32wf32_lut8+0x544>
 8002f86:	bf00      	nop

08002f88 <st_int8_copy>:
 8002f88:	4288      	cmp	r0, r1
 8002f8a:	d010      	beq.n	8002fae <st_int8_copy+0x26>
 8002f8c:	b17a      	cbz	r2, 8002fae <st_int8_copy+0x26>
 8002f8e:	4288      	cmp	r0, r1
 8002f90:	eb00 0302 	add.w	r3, r0, r2
 8002f94:	d20c      	bcs.n	8002fb0 <st_int8_copy+0x28>
 8002f96:	428b      	cmp	r3, r1
 8002f98:	d90a      	bls.n	8002fb0 <st_int8_copy+0x28>
 8002f9a:	4283      	cmp	r3, r0
 8002f9c:	440a      	add	r2, r1
 8002f9e:	d906      	bls.n	8002fae <st_int8_copy+0x26>
 8002fa0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8002fa4:	4283      	cmp	r3, r0
 8002fa6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002faa:	d1f9      	bne.n	8002fa0 <st_int8_copy+0x18>
 8002fac:	4770      	bx	lr
 8002fae:	4770      	bx	lr
 8002fb0:	078b      	lsls	r3, r1, #30
 8002fb2:	d102      	bne.n	8002fba <st_int8_copy+0x32>
 8002fb4:	e008      	b.n	8002fc8 <st_int8_copy+0x40>
 8002fb6:	2a00      	cmp	r2, #0
 8002fb8:	d04c      	beq.n	8003054 <st_int8_copy+0xcc>
 8002fba:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	f801 3b01 	strb.w	r3, [r1], #1
 8002fc4:	078b      	lsls	r3, r1, #30
 8002fc6:	d1f6      	bne.n	8002fb6 <st_int8_copy+0x2e>
 8002fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fcc:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8002fd0:	d05d      	beq.n	800308e <st_int8_copy+0x106>
 8002fd2:	ea41 0300 	orr.w	r3, r1, r0
 8002fd6:	075b      	lsls	r3, r3, #29
 8002fd8:	d13d      	bne.n	8003056 <st_int8_copy+0xce>
 8002fda:	f1be 0f01 	cmp.w	lr, #1
 8002fde:	d03a      	beq.n	8003056 <st_int8_copy+0xce>
 8002fe0:	f100 0310 	add.w	r3, r0, #16
 8002fe4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8002fe8:	f101 0c10 	add.w	ip, r1, #16
 8002fec:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	f10c 0c10 	add.w	ip, ip, #16
 8002ff6:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8002ffa:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8002ffe:	4573      	cmp	r3, lr
 8003000:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8003004:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8003008:	d1f2      	bne.n	8002ff0 <st_int8_copy+0x68>
 800300a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800300e:	4421      	add	r1, r4
 8003010:	4420      	add	r0, r4
 8003012:	f002 0203 	and.w	r2, r2, #3
 8003016:	b16b      	cbz	r3, 8003034 <st_int8_copy+0xac>
 8003018:	6804      	ldr	r4, [r0, #0]
 800301a:	600c      	str	r4, [r1, #0]
 800301c:	1e5c      	subs	r4, r3, #1
 800301e:	d005      	beq.n	800302c <st_int8_copy+0xa4>
 8003020:	6845      	ldr	r5, [r0, #4]
 8003022:	2c01      	cmp	r4, #1
 8003024:	604d      	str	r5, [r1, #4]
 8003026:	d001      	beq.n	800302c <st_int8_copy+0xa4>
 8003028:	6884      	ldr	r4, [r0, #8]
 800302a:	608c      	str	r4, [r1, #8]
 800302c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003030:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003034:	b162      	cbz	r2, 8003050 <st_int8_copy+0xc8>
 8003036:	f990 3000 	ldrsb.w	r3, [r0]
 800303a:	3a01      	subs	r2, #1
 800303c:	700b      	strb	r3, [r1, #0]
 800303e:	d007      	beq.n	8003050 <st_int8_copy+0xc8>
 8003040:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8003044:	2a01      	cmp	r2, #1
 8003046:	704b      	strb	r3, [r1, #1]
 8003048:	d002      	beq.n	8003050 <st_int8_copy+0xc8>
 800304a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800304e:	708b      	strb	r3, [r1, #2]
 8003050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003054:	4770      	bx	lr
 8003056:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800305a:	460b      	mov	r3, r1
 800305c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8003060:	4684      	mov	ip, r0
 8003062:	f8dc 8000 	ldr.w	r8, [ip]
 8003066:	3310      	adds	r3, #16
 8003068:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800306c:	f10c 0c10 	add.w	ip, ip, #16
 8003070:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8003074:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8003078:	f843 8c10 	str.w	r8, [r3, #-16]
 800307c:	f843 7c0c 	str.w	r7, [r3, #-12]
 8003080:	f843 6c08 	str.w	r6, [r3, #-8]
 8003084:	f843 5c04 	str.w	r5, [r3, #-4]
 8003088:	459e      	cmp	lr, r3
 800308a:	d1ea      	bne.n	8003062 <st_int8_copy+0xda>
 800308c:	e7bd      	b.n	800300a <st_int8_copy+0x82>
 800308e:	0893      	lsrs	r3, r2, #2
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	e7bf      	b.n	8003016 <st_int8_copy+0x8e>
 8003096:	bf00      	nop

08003098 <ai_array_to_buffer_fmt>:
 8003098:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800309c:	2b02      	cmp	r3, #2
 800309e:	d053      	beq.n	8003148 <ai_array_to_buffer_fmt+0xb0>
 80030a0:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80030a4:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <ai_array_to_buffer_fmt+0xbc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d010      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030aa:	dc21      	bgt.n	80030f0 <ai_array_to_buffer_fmt+0x58>
 80030ac:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <ai_array_to_buffer_fmt+0xc0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00c      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030b2:	dd0f      	ble.n	80030d4 <ai_array_to_buffer_fmt+0x3c>
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <ai_array_to_buffer_fmt+0xc4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d008      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030ba:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <ai_array_to_buffer_fmt+0xc8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf0c      	ite	eq
 80030c8:	4613      	moveq	r3, r2
 80030ca:	2340      	movne	r3, #64	; 0x40
 80030cc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80030d0:	4318      	orrs	r0, r3
 80030d2:	4770      	bx	lr
 80030d4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80030d8:	4293      	cmp	r3, r2
 80030da:	d0f7      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030dc:	dd2a      	ble.n	8003134 <ai_array_to_buffer_fmt+0x9c>
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <ai_array_to_buffer_fmt+0xcc>)
 80030e0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf0c      	ite	eq
 80030e8:	4613      	moveq	r3, r2
 80030ea:	2340      	movne	r3, #64	; 0x40
 80030ec:	4318      	orrs	r0, r3
 80030ee:	4770      	bx	lr
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <ai_array_to_buffer_fmt+0xd0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d0ea      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030f6:	dd0f      	ble.n	8003118 <ai_array_to_buffer_fmt+0x80>
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <ai_array_to_buffer_fmt+0xd4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d0e6      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 80030fe:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8003102:	4293      	cmp	r3, r2
 8003104:	d0e2      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <ai_array_to_buffer_fmt+0xd8>)
 8003108:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800310c:	4293      	cmp	r3, r2
 800310e:	bf0c      	ite	eq
 8003110:	4613      	moveq	r3, r2
 8003112:	2340      	movne	r3, #64	; 0x40
 8003114:	4318      	orrs	r0, r3
 8003116:	4770      	bx	lr
 8003118:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800311c:	4293      	cmp	r3, r2
 800311e:	d0d5      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003120:	3207      	adds	r2, #7
 8003122:	4293      	cmp	r3, r2
 8003124:	d0d2      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003126:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800312a:	4293      	cmp	r3, r2
 800312c:	bf0c      	ite	eq
 800312e:	4613      	moveq	r3, r2
 8003130:	2340      	movne	r3, #64	; 0x40
 8003132:	e7cb      	b.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003134:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003138:	4293      	cmp	r3, r2
 800313a:	d0c7      	beq.n	80030cc <ai_array_to_buffer_fmt+0x34>
 800313c:	3280      	adds	r2, #128	; 0x80
 800313e:	4293      	cmp	r3, r2
 8003140:	bf0c      	ite	eq
 8003142:	4613      	moveq	r3, r2
 8003144:	2340      	movne	r3, #64	; 0x40
 8003146:	e7c1      	b.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <ai_array_to_buffer_fmt+0xdc>)
 800314a:	4003      	ands	r3, r0
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	e7bc      	b.n	80030cc <ai_array_to_buffer_fmt+0x34>
 8003152:	bf00      	nop
 8003154:	00840040 	.word	0x00840040
 8003158:	00040840 	.word	0x00040840
 800315c:	00041040 	.word	0x00041040
 8003160:	0004084f 	.word	0x0004084f
 8003164:	00040447 	.word	0x00040447
 8003168:	00840840 	.word	0x00840840
 800316c:	00841040 	.word	0x00841040
 8003170:	0084084f 	.word	0x0084084f
 8003174:	00803fff 	.word	0x00803fff

08003178 <ai_array_get_data_byte_size>:
 8003178:	b169      	cbz	r1, 8003196 <ai_array_get_data_byte_size+0x1e>
 800317a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800317e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8003182:	fb03 f101 	mul.w	r1, r3, r1
 8003186:	1dcb      	adds	r3, r1, #7
 8003188:	f023 0307 	bic.w	r3, r3, #7
 800318c:	fa23 f000 	lsr.w	r0, r3, r0
 8003190:	3007      	adds	r0, #7
 8003192:	08c0      	lsrs	r0, r0, #3
 8003194:	4770      	bx	lr
 8003196:	4608      	mov	r0, r1
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop

0800319c <ai_version_get>:
 800319c:	0212      	lsls	r2, r2, #8
 800319e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031a2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80031a6:	4770      	bx	lr

080031a8 <get_tensor_byte_size>:
 80031a8:	b430      	push	{r4, r5}
 80031aa:	6985      	ldr	r5, [r0, #24]
 80031ac:	68c4      	ldr	r4, [r0, #12]
 80031ae:	6941      	ldr	r1, [r0, #20]
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <get_tensor_byte_size+0x24>)
 80031b2:	6828      	ldr	r0, [r5, #0]
 80031b4:	4a06      	ldr	r2, [pc, #24]	; (80031d0 <get_tensor_byte_size+0x28>)
 80031b6:	4003      	ands	r3, r0
 80031b8:	68c9      	ldr	r1, [r1, #12]
 80031ba:	68e0      	ldr	r0, [r4, #12]
 80031bc:	4293      	cmp	r3, r2
 80031be:	fb01 f000 	mul.w	r0, r1, r0
 80031c2:	d101      	bne.n	80031c8 <get_tensor_byte_size+0x20>
 80031c4:	3007      	adds	r0, #7
 80031c6:	08c0      	lsrs	r0, r0, #3
 80031c8:	bc30      	pop	{r4, r5}
 80031ca:	4770      	bx	lr
 80031cc:	017fffff 	.word	0x017fffff
 80031d0:	000400c0 	.word	0x000400c0

080031d4 <malloc>:
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <malloc+0xc>)
 80031d6:	4601      	mov	r1, r0
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	f000 b823 	b.w	8003224 <_malloc_r>
 80031de:	bf00      	nop
 80031e0:	24000af8 	.word	0x24000af8

080031e4 <sbrk_aligned>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4e0e      	ldr	r6, [pc, #56]	; (8003220 <sbrk_aligned+0x3c>)
 80031e8:	460c      	mov	r4, r1
 80031ea:	6831      	ldr	r1, [r6, #0]
 80031ec:	4605      	mov	r5, r0
 80031ee:	b911      	cbnz	r1, 80031f6 <sbrk_aligned+0x12>
 80031f0:	f000 ff28 	bl	8004044 <_sbrk_r>
 80031f4:	6030      	str	r0, [r6, #0]
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 ff23 	bl	8004044 <_sbrk_r>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	d00a      	beq.n	8003218 <sbrk_aligned+0x34>
 8003202:	1cc4      	adds	r4, r0, #3
 8003204:	f024 0403 	bic.w	r4, r4, #3
 8003208:	42a0      	cmp	r0, r4
 800320a:	d007      	beq.n	800321c <sbrk_aligned+0x38>
 800320c:	1a21      	subs	r1, r4, r0
 800320e:	4628      	mov	r0, r5
 8003210:	f000 ff18 	bl	8004044 <_sbrk_r>
 8003214:	3001      	adds	r0, #1
 8003216:	d101      	bne.n	800321c <sbrk_aligned+0x38>
 8003218:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800321c:	4620      	mov	r0, r4
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	24001168 	.word	0x24001168

08003224 <_malloc_r>:
 8003224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003228:	1ccd      	adds	r5, r1, #3
 800322a:	f025 0503 	bic.w	r5, r5, #3
 800322e:	3508      	adds	r5, #8
 8003230:	2d0c      	cmp	r5, #12
 8003232:	bf38      	it	cc
 8003234:	250c      	movcc	r5, #12
 8003236:	2d00      	cmp	r5, #0
 8003238:	4607      	mov	r7, r0
 800323a:	db01      	blt.n	8003240 <_malloc_r+0x1c>
 800323c:	42a9      	cmp	r1, r5
 800323e:	d905      	bls.n	800324c <_malloc_r+0x28>
 8003240:	230c      	movs	r3, #12
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	2600      	movs	r6, #0
 8003246:	4630      	mov	r0, r6
 8003248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800324c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003320 <_malloc_r+0xfc>
 8003250:	f000 f868 	bl	8003324 <__malloc_lock>
 8003254:	f8d8 3000 	ldr.w	r3, [r8]
 8003258:	461c      	mov	r4, r3
 800325a:	bb5c      	cbnz	r4, 80032b4 <_malloc_r+0x90>
 800325c:	4629      	mov	r1, r5
 800325e:	4638      	mov	r0, r7
 8003260:	f7ff ffc0 	bl	80031e4 <sbrk_aligned>
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	4604      	mov	r4, r0
 8003268:	d155      	bne.n	8003316 <_malloc_r+0xf2>
 800326a:	f8d8 4000 	ldr.w	r4, [r8]
 800326e:	4626      	mov	r6, r4
 8003270:	2e00      	cmp	r6, #0
 8003272:	d145      	bne.n	8003300 <_malloc_r+0xdc>
 8003274:	2c00      	cmp	r4, #0
 8003276:	d048      	beq.n	800330a <_malloc_r+0xe6>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	4631      	mov	r1, r6
 800327c:	4638      	mov	r0, r7
 800327e:	eb04 0903 	add.w	r9, r4, r3
 8003282:	f000 fedf 	bl	8004044 <_sbrk_r>
 8003286:	4581      	cmp	r9, r0
 8003288:	d13f      	bne.n	800330a <_malloc_r+0xe6>
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	1a6d      	subs	r5, r5, r1
 800328e:	4629      	mov	r1, r5
 8003290:	4638      	mov	r0, r7
 8003292:	f7ff ffa7 	bl	80031e4 <sbrk_aligned>
 8003296:	3001      	adds	r0, #1
 8003298:	d037      	beq.n	800330a <_malloc_r+0xe6>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	442b      	add	r3, r5
 800329e:	6023      	str	r3, [r4, #0]
 80032a0:	f8d8 3000 	ldr.w	r3, [r8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d038      	beq.n	800331a <_malloc_r+0xf6>
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	42a2      	cmp	r2, r4
 80032ac:	d12b      	bne.n	8003306 <_malloc_r+0xe2>
 80032ae:	2200      	movs	r2, #0
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	e00f      	b.n	80032d4 <_malloc_r+0xb0>
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	1b52      	subs	r2, r2, r5
 80032b8:	d41f      	bmi.n	80032fa <_malloc_r+0xd6>
 80032ba:	2a0b      	cmp	r2, #11
 80032bc:	d917      	bls.n	80032ee <_malloc_r+0xca>
 80032be:	1961      	adds	r1, r4, r5
 80032c0:	42a3      	cmp	r3, r4
 80032c2:	6025      	str	r5, [r4, #0]
 80032c4:	bf18      	it	ne
 80032c6:	6059      	strne	r1, [r3, #4]
 80032c8:	6863      	ldr	r3, [r4, #4]
 80032ca:	bf08      	it	eq
 80032cc:	f8c8 1000 	streq.w	r1, [r8]
 80032d0:	5162      	str	r2, [r4, r5]
 80032d2:	604b      	str	r3, [r1, #4]
 80032d4:	4638      	mov	r0, r7
 80032d6:	f104 060b 	add.w	r6, r4, #11
 80032da:	f000 f829 	bl	8003330 <__malloc_unlock>
 80032de:	f026 0607 	bic.w	r6, r6, #7
 80032e2:	1d23      	adds	r3, r4, #4
 80032e4:	1af2      	subs	r2, r6, r3
 80032e6:	d0ae      	beq.n	8003246 <_malloc_r+0x22>
 80032e8:	1b9b      	subs	r3, r3, r6
 80032ea:	50a3      	str	r3, [r4, r2]
 80032ec:	e7ab      	b.n	8003246 <_malloc_r+0x22>
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	6862      	ldr	r2, [r4, #4]
 80032f2:	d1dd      	bne.n	80032b0 <_malloc_r+0x8c>
 80032f4:	f8c8 2000 	str.w	r2, [r8]
 80032f8:	e7ec      	b.n	80032d4 <_malloc_r+0xb0>
 80032fa:	4623      	mov	r3, r4
 80032fc:	6864      	ldr	r4, [r4, #4]
 80032fe:	e7ac      	b.n	800325a <_malloc_r+0x36>
 8003300:	4634      	mov	r4, r6
 8003302:	6876      	ldr	r6, [r6, #4]
 8003304:	e7b4      	b.n	8003270 <_malloc_r+0x4c>
 8003306:	4613      	mov	r3, r2
 8003308:	e7cc      	b.n	80032a4 <_malloc_r+0x80>
 800330a:	230c      	movs	r3, #12
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4638      	mov	r0, r7
 8003310:	f000 f80e 	bl	8003330 <__malloc_unlock>
 8003314:	e797      	b.n	8003246 <_malloc_r+0x22>
 8003316:	6025      	str	r5, [r4, #0]
 8003318:	e7dc      	b.n	80032d4 <_malloc_r+0xb0>
 800331a:	605b      	str	r3, [r3, #4]
 800331c:	deff      	udf	#255	; 0xff
 800331e:	bf00      	nop
 8003320:	24001164 	.word	0x24001164

08003324 <__malloc_lock>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__malloc_lock+0x8>)
 8003326:	f000 beda 	b.w	80040de <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	240012ac 	.word	0x240012ac

08003330 <__malloc_unlock>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__malloc_unlock+0x8>)
 8003332:	f000 bed5 	b.w	80040e0 <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	240012ac 	.word	0x240012ac

0800333c <__cvt>:
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	ed2d 8b02 	vpush	{d8}
 8003342:	eeb0 8b40 	vmov.f64	d8, d0
 8003346:	b085      	sub	sp, #20
 8003348:	4617      	mov	r7, r2
 800334a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800334c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800334e:	ee18 2a90 	vmov	r2, s17
 8003352:	f025 0520 	bic.w	r5, r5, #32
 8003356:	2a00      	cmp	r2, #0
 8003358:	bfb6      	itet	lt
 800335a:	222d      	movlt	r2, #45	; 0x2d
 800335c:	2200      	movge	r2, #0
 800335e:	eeb1 8b40 	vneglt.f64	d8, d0
 8003362:	2d46      	cmp	r5, #70	; 0x46
 8003364:	460c      	mov	r4, r1
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	d004      	beq.n	8003374 <__cvt+0x38>
 800336a:	2d45      	cmp	r5, #69	; 0x45
 800336c:	d100      	bne.n	8003370 <__cvt+0x34>
 800336e:	3401      	adds	r4, #1
 8003370:	2102      	movs	r1, #2
 8003372:	e000      	b.n	8003376 <__cvt+0x3a>
 8003374:	2103      	movs	r1, #3
 8003376:	ab03      	add	r3, sp, #12
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	ab02      	add	r3, sp, #8
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4622      	mov	r2, r4
 8003380:	4633      	mov	r3, r6
 8003382:	eeb0 0b48 	vmov.f64	d0, d8
 8003386:	f000 ff43 	bl	8004210 <_dtoa_r>
 800338a:	2d47      	cmp	r5, #71	; 0x47
 800338c:	d101      	bne.n	8003392 <__cvt+0x56>
 800338e:	07fb      	lsls	r3, r7, #31
 8003390:	d51a      	bpl.n	80033c8 <__cvt+0x8c>
 8003392:	2d46      	cmp	r5, #70	; 0x46
 8003394:	eb00 0204 	add.w	r2, r0, r4
 8003398:	d10c      	bne.n	80033b4 <__cvt+0x78>
 800339a:	7803      	ldrb	r3, [r0, #0]
 800339c:	2b30      	cmp	r3, #48	; 0x30
 800339e:	d107      	bne.n	80033b0 <__cvt+0x74>
 80033a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	bf1c      	itt	ne
 80033aa:	f1c4 0401 	rsbne	r4, r4, #1
 80033ae:	6034      	strne	r4, [r6, #0]
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	441a      	add	r2, r3
 80033b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	bf08      	it	eq
 80033be:	9203      	streq	r2, [sp, #12]
 80033c0:	2130      	movs	r1, #48	; 0x30
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d307      	bcc.n	80033d8 <__cvt+0x9c>
 80033c8:	9b03      	ldr	r3, [sp, #12]
 80033ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033cc:	1a1b      	subs	r3, r3, r0
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	b005      	add	sp, #20
 80033d2:	ecbd 8b02 	vpop	{d8}
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d8:	1c5c      	adds	r4, r3, #1
 80033da:	9403      	str	r4, [sp, #12]
 80033dc:	7019      	strb	r1, [r3, #0]
 80033de:	e7f0      	b.n	80033c2 <__cvt+0x86>

080033e0 <__exponent>:
 80033e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e2:	4603      	mov	r3, r0
 80033e4:	2900      	cmp	r1, #0
 80033e6:	bfb8      	it	lt
 80033e8:	4249      	neglt	r1, r1
 80033ea:	f803 2b02 	strb.w	r2, [r3], #2
 80033ee:	bfb4      	ite	lt
 80033f0:	222d      	movlt	r2, #45	; 0x2d
 80033f2:	222b      	movge	r2, #43	; 0x2b
 80033f4:	2909      	cmp	r1, #9
 80033f6:	7042      	strb	r2, [r0, #1]
 80033f8:	dd2a      	ble.n	8003450 <__exponent+0x70>
 80033fa:	f10d 0207 	add.w	r2, sp, #7
 80033fe:	4617      	mov	r7, r2
 8003400:	260a      	movs	r6, #10
 8003402:	4694      	mov	ip, r2
 8003404:	fb91 f5f6 	sdiv	r5, r1, r6
 8003408:	fb06 1415 	mls	r4, r6, r5, r1
 800340c:	3430      	adds	r4, #48	; 0x30
 800340e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003412:	460c      	mov	r4, r1
 8003414:	2c63      	cmp	r4, #99	; 0x63
 8003416:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800341a:	4629      	mov	r1, r5
 800341c:	dcf1      	bgt.n	8003402 <__exponent+0x22>
 800341e:	3130      	adds	r1, #48	; 0x30
 8003420:	f1ac 0402 	sub.w	r4, ip, #2
 8003424:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003428:	1c41      	adds	r1, r0, #1
 800342a:	4622      	mov	r2, r4
 800342c:	42ba      	cmp	r2, r7
 800342e:	d30a      	bcc.n	8003446 <__exponent+0x66>
 8003430:	f10d 0209 	add.w	r2, sp, #9
 8003434:	eba2 020c 	sub.w	r2, r2, ip
 8003438:	42bc      	cmp	r4, r7
 800343a:	bf88      	it	hi
 800343c:	2200      	movhi	r2, #0
 800343e:	4413      	add	r3, r2
 8003440:	1a18      	subs	r0, r3, r0
 8003442:	b003      	add	sp, #12
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003446:	f812 5b01 	ldrb.w	r5, [r2], #1
 800344a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800344e:	e7ed      	b.n	800342c <__exponent+0x4c>
 8003450:	2330      	movs	r3, #48	; 0x30
 8003452:	3130      	adds	r1, #48	; 0x30
 8003454:	7083      	strb	r3, [r0, #2]
 8003456:	70c1      	strb	r1, [r0, #3]
 8003458:	1d03      	adds	r3, r0, #4
 800345a:	e7f1      	b.n	8003440 <__exponent+0x60>
 800345c:	0000      	movs	r0, r0
	...

08003460 <_printf_float>:
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	b08b      	sub	sp, #44	; 0x2c
 8003466:	460c      	mov	r4, r1
 8003468:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800346c:	4616      	mov	r6, r2
 800346e:	461f      	mov	r7, r3
 8003470:	4605      	mov	r5, r0
 8003472:	f000 fdaf 	bl	8003fd4 <_localeconv_r>
 8003476:	f8d0 b000 	ldr.w	fp, [r0]
 800347a:	4658      	mov	r0, fp
 800347c:	f7fc ff98 	bl	80003b0 <strlen>
 8003480:	2300      	movs	r3, #0
 8003482:	9308      	str	r3, [sp, #32]
 8003484:	f8d8 3000 	ldr.w	r3, [r8]
 8003488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800348c:	6822      	ldr	r2, [r4, #0]
 800348e:	3307      	adds	r3, #7
 8003490:	f023 0307 	bic.w	r3, r3, #7
 8003494:	f103 0108 	add.w	r1, r3, #8
 8003498:	f8c8 1000 	str.w	r1, [r8]
 800349c:	ed93 0b00 	vldr	d0, [r3]
 80034a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003700 <_printf_float+0x2a0>
 80034a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80034a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80034b4:	4682      	mov	sl, r0
 80034b6:	dd24      	ble.n	8003502 <_printf_float+0xa2>
 80034b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	d502      	bpl.n	80034c8 <_printf_float+0x68>
 80034c2:	232d      	movs	r3, #45	; 0x2d
 80034c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c8:	498f      	ldr	r1, [pc, #572]	; (8003708 <_printf_float+0x2a8>)
 80034ca:	4b90      	ldr	r3, [pc, #576]	; (800370c <_printf_float+0x2ac>)
 80034cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034d0:	bf94      	ite	ls
 80034d2:	4688      	movls	r8, r1
 80034d4:	4698      	movhi	r8, r3
 80034d6:	2303      	movs	r3, #3
 80034d8:	6123      	str	r3, [r4, #16]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	2300      	movs	r3, #0
 80034e0:	6022      	str	r2, [r4, #0]
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	9700      	str	r7, [sp, #0]
 80034e6:	4633      	mov	r3, r6
 80034e8:	aa09      	add	r2, sp, #36	; 0x24
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 f9d1 	bl	8003894 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	f040 808a 	bne.w	800360c <_printf_float+0x1ac>
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034fc:	b00b      	add	sp, #44	; 0x2c
 80034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003502:	eeb4 0b40 	vcmp.f64	d0, d0
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	d709      	bvc.n	8003520 <_printf_float+0xc0>
 800350c:	ee10 3a90 	vmov	r3, s1
 8003510:	2b00      	cmp	r3, #0
 8003512:	bfbc      	itt	lt
 8003514:	232d      	movlt	r3, #45	; 0x2d
 8003516:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800351a:	497d      	ldr	r1, [pc, #500]	; (8003710 <_printf_float+0x2b0>)
 800351c:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <_printf_float+0x2b4>)
 800351e:	e7d5      	b.n	80034cc <_printf_float+0x6c>
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003526:	9104      	str	r1, [sp, #16]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	d13c      	bne.n	80035a6 <_printf_float+0x146>
 800352c:	2306      	movs	r3, #6
 800352e:	6063      	str	r3, [r4, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9303      	str	r3, [sp, #12]
 8003534:	ab08      	add	r3, sp, #32
 8003536:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800353a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800353e:	ab07      	add	r3, sp, #28
 8003540:	6861      	ldr	r1, [r4, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	6022      	str	r2, [r4, #0]
 8003546:	f10d 031b 	add.w	r3, sp, #27
 800354a:	4628      	mov	r0, r5
 800354c:	f7ff fef6 	bl	800333c <__cvt>
 8003550:	9b04      	ldr	r3, [sp, #16]
 8003552:	9907      	ldr	r1, [sp, #28]
 8003554:	2b47      	cmp	r3, #71	; 0x47
 8003556:	4680      	mov	r8, r0
 8003558:	d108      	bne.n	800356c <_printf_float+0x10c>
 800355a:	1cc8      	adds	r0, r1, #3
 800355c:	db02      	blt.n	8003564 <_printf_float+0x104>
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	4299      	cmp	r1, r3
 8003562:	dd41      	ble.n	80035e8 <_printf_float+0x188>
 8003564:	f1a9 0902 	sub.w	r9, r9, #2
 8003568:	fa5f f989 	uxtb.w	r9, r9
 800356c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003570:	d820      	bhi.n	80035b4 <_printf_float+0x154>
 8003572:	3901      	subs	r1, #1
 8003574:	464a      	mov	r2, r9
 8003576:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800357a:	9107      	str	r1, [sp, #28]
 800357c:	f7ff ff30 	bl	80033e0 <__exponent>
 8003580:	9a08      	ldr	r2, [sp, #32]
 8003582:	9004      	str	r0, [sp, #16]
 8003584:	1813      	adds	r3, r2, r0
 8003586:	2a01      	cmp	r2, #1
 8003588:	6123      	str	r3, [r4, #16]
 800358a:	dc02      	bgt.n	8003592 <_printf_float+0x132>
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	07d2      	lsls	r2, r2, #31
 8003590:	d501      	bpl.n	8003596 <_printf_float+0x136>
 8003592:	3301      	adds	r3, #1
 8003594:	6123      	str	r3, [r4, #16]
 8003596:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0a2      	beq.n	80034e4 <_printf_float+0x84>
 800359e:	232d      	movs	r3, #45	; 0x2d
 80035a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a4:	e79e      	b.n	80034e4 <_printf_float+0x84>
 80035a6:	9904      	ldr	r1, [sp, #16]
 80035a8:	2947      	cmp	r1, #71	; 0x47
 80035aa:	d1c1      	bne.n	8003530 <_printf_float+0xd0>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1bf      	bne.n	8003530 <_printf_float+0xd0>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e7bc      	b.n	800352e <_printf_float+0xce>
 80035b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035b8:	d118      	bne.n	80035ec <_printf_float+0x18c>
 80035ba:	2900      	cmp	r1, #0
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	dd0b      	ble.n	80035d8 <_printf_float+0x178>
 80035c0:	6121      	str	r1, [r4, #16]
 80035c2:	b913      	cbnz	r3, 80035ca <_printf_float+0x16a>
 80035c4:	6822      	ldr	r2, [r4, #0]
 80035c6:	07d0      	lsls	r0, r2, #31
 80035c8:	d502      	bpl.n	80035d0 <_printf_float+0x170>
 80035ca:	3301      	adds	r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	6123      	str	r3, [r4, #16]
 80035d0:	2300      	movs	r3, #0
 80035d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	e7de      	b.n	8003596 <_printf_float+0x136>
 80035d8:	b913      	cbnz	r3, 80035e0 <_printf_float+0x180>
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	07d2      	lsls	r2, r2, #31
 80035de:	d501      	bpl.n	80035e4 <_printf_float+0x184>
 80035e0:	3302      	adds	r3, #2
 80035e2:	e7f4      	b.n	80035ce <_printf_float+0x16e>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e7f2      	b.n	80035ce <_printf_float+0x16e>
 80035e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80035ec:	9b08      	ldr	r3, [sp, #32]
 80035ee:	4299      	cmp	r1, r3
 80035f0:	db05      	blt.n	80035fe <_printf_float+0x19e>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	6121      	str	r1, [r4, #16]
 80035f6:	07d8      	lsls	r0, r3, #31
 80035f8:	d5ea      	bpl.n	80035d0 <_printf_float+0x170>
 80035fa:	1c4b      	adds	r3, r1, #1
 80035fc:	e7e7      	b.n	80035ce <_printf_float+0x16e>
 80035fe:	2900      	cmp	r1, #0
 8003600:	bfd4      	ite	le
 8003602:	f1c1 0202 	rsble	r2, r1, #2
 8003606:	2201      	movgt	r2, #1
 8003608:	4413      	add	r3, r2
 800360a:	e7e0      	b.n	80035ce <_printf_float+0x16e>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	055a      	lsls	r2, r3, #21
 8003610:	d407      	bmi.n	8003622 <_printf_float+0x1c2>
 8003612:	6923      	ldr	r3, [r4, #16]
 8003614:	4642      	mov	r2, r8
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	d12a      	bne.n	8003676 <_printf_float+0x216>
 8003620:	e76a      	b.n	80034f8 <_printf_float+0x98>
 8003622:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003626:	f240 80e0 	bls.w	80037ea <_printf_float+0x38a>
 800362a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800362e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d133      	bne.n	80036a0 <_printf_float+0x240>
 8003638:	4a37      	ldr	r2, [pc, #220]	; (8003718 <_printf_float+0x2b8>)
 800363a:	2301      	movs	r3, #1
 800363c:	4631      	mov	r1, r6
 800363e:	4628      	mov	r0, r5
 8003640:	47b8      	blx	r7
 8003642:	3001      	adds	r0, #1
 8003644:	f43f af58 	beq.w	80034f8 <_printf_float+0x98>
 8003648:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	db02      	blt.n	8003656 <_printf_float+0x1f6>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	07d8      	lsls	r0, r3, #31
 8003654:	d50f      	bpl.n	8003676 <_printf_float+0x216>
 8003656:	4653      	mov	r3, sl
 8003658:	465a      	mov	r2, fp
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	f43f af49 	beq.w	80034f8 <_printf_float+0x98>
 8003666:	f04f 0800 	mov.w	r8, #0
 800366a:	f104 091a 	add.w	r9, r4, #26
 800366e:	9b08      	ldr	r3, [sp, #32]
 8003670:	3b01      	subs	r3, #1
 8003672:	4543      	cmp	r3, r8
 8003674:	dc09      	bgt.n	800368a <_printf_float+0x22a>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	079b      	lsls	r3, r3, #30
 800367a:	f100 8106 	bmi.w	800388a <_printf_float+0x42a>
 800367e:	68e0      	ldr	r0, [r4, #12]
 8003680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003682:	4298      	cmp	r0, r3
 8003684:	bfb8      	it	lt
 8003686:	4618      	movlt	r0, r3
 8003688:	e738      	b.n	80034fc <_printf_float+0x9c>
 800368a:	2301      	movs	r3, #1
 800368c:	464a      	mov	r2, r9
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f af2f 	beq.w	80034f8 <_printf_float+0x98>
 800369a:	f108 0801 	add.w	r8, r8, #1
 800369e:	e7e6      	b.n	800366e <_printf_float+0x20e>
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	dc3a      	bgt.n	800371c <_printf_float+0x2bc>
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <_printf_float+0x2b8>)
 80036a8:	2301      	movs	r3, #1
 80036aa:	4631      	mov	r1, r6
 80036ac:	4628      	mov	r0, r5
 80036ae:	47b8      	blx	r7
 80036b0:	3001      	adds	r0, #1
 80036b2:	f43f af21 	beq.w	80034f8 <_printf_float+0x98>
 80036b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d102      	bne.n	80036c4 <_printf_float+0x264>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	07d9      	lsls	r1, r3, #31
 80036c2:	d5d8      	bpl.n	8003676 <_printf_float+0x216>
 80036c4:	4653      	mov	r3, sl
 80036c6:	465a      	mov	r2, fp
 80036c8:	4631      	mov	r1, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	47b8      	blx	r7
 80036ce:	3001      	adds	r0, #1
 80036d0:	f43f af12 	beq.w	80034f8 <_printf_float+0x98>
 80036d4:	f04f 0900 	mov.w	r9, #0
 80036d8:	f104 0a1a 	add.w	sl, r4, #26
 80036dc:	9b07      	ldr	r3, [sp, #28]
 80036de:	425b      	negs	r3, r3
 80036e0:	454b      	cmp	r3, r9
 80036e2:	dc01      	bgt.n	80036e8 <_printf_float+0x288>
 80036e4:	9b08      	ldr	r3, [sp, #32]
 80036e6:	e795      	b.n	8003614 <_printf_float+0x1b4>
 80036e8:	2301      	movs	r3, #1
 80036ea:	4652      	mov	r2, sl
 80036ec:	4631      	mov	r1, r6
 80036ee:	4628      	mov	r0, r5
 80036f0:	47b8      	blx	r7
 80036f2:	3001      	adds	r0, #1
 80036f4:	f43f af00 	beq.w	80034f8 <_printf_float+0x98>
 80036f8:	f109 0901 	add.w	r9, r9, #1
 80036fc:	e7ee      	b.n	80036dc <_printf_float+0x27c>
 80036fe:	bf00      	nop
 8003700:	ffffffff 	.word	0xffffffff
 8003704:	7fefffff 	.word	0x7fefffff
 8003708:	08036ea8 	.word	0x08036ea8
 800370c:	08036eac 	.word	0x08036eac
 8003710:	08036eb0 	.word	0x08036eb0
 8003714:	08036eb4 	.word	0x08036eb4
 8003718:	08036eb8 	.word	0x08036eb8
 800371c:	9a08      	ldr	r2, [sp, #32]
 800371e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003720:	429a      	cmp	r2, r3
 8003722:	bfa8      	it	ge
 8003724:	461a      	movge	r2, r3
 8003726:	2a00      	cmp	r2, #0
 8003728:	4691      	mov	r9, r2
 800372a:	dc38      	bgt.n	800379e <_printf_float+0x33e>
 800372c:	2300      	movs	r3, #0
 800372e:	9305      	str	r3, [sp, #20]
 8003730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003734:	f104 021a 	add.w	r2, r4, #26
 8003738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800373a:	9905      	ldr	r1, [sp, #20]
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	eba3 0309 	sub.w	r3, r3, r9
 8003742:	428b      	cmp	r3, r1
 8003744:	dc33      	bgt.n	80037ae <_printf_float+0x34e>
 8003746:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800374a:	429a      	cmp	r2, r3
 800374c:	db3c      	blt.n	80037c8 <_printf_float+0x368>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07da      	lsls	r2, r3, #31
 8003752:	d439      	bmi.n	80037c8 <_printf_float+0x368>
 8003754:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8003758:	eba2 0903 	sub.w	r9, r2, r3
 800375c:	9b04      	ldr	r3, [sp, #16]
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	4591      	cmp	r9, r2
 8003762:	bfa8      	it	ge
 8003764:	4691      	movge	r9, r2
 8003766:	f1b9 0f00 	cmp.w	r9, #0
 800376a:	dc35      	bgt.n	80037d8 <_printf_float+0x378>
 800376c:	f04f 0800 	mov.w	r8, #0
 8003770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003774:	f104 0a1a 	add.w	sl, r4, #26
 8003778:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	eba3 0309 	sub.w	r3, r3, r9
 8003782:	4543      	cmp	r3, r8
 8003784:	f77f af77 	ble.w	8003676 <_printf_float+0x216>
 8003788:	2301      	movs	r3, #1
 800378a:	4652      	mov	r2, sl
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	f43f aeb0 	beq.w	80034f8 <_printf_float+0x98>
 8003798:	f108 0801 	add.w	r8, r8, #1
 800379c:	e7ec      	b.n	8003778 <_printf_float+0x318>
 800379e:	4613      	mov	r3, r2
 80037a0:	4631      	mov	r1, r6
 80037a2:	4642      	mov	r2, r8
 80037a4:	4628      	mov	r0, r5
 80037a6:	47b8      	blx	r7
 80037a8:	3001      	adds	r0, #1
 80037aa:	d1bf      	bne.n	800372c <_printf_float+0x2cc>
 80037ac:	e6a4      	b.n	80034f8 <_printf_float+0x98>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	9204      	str	r2, [sp, #16]
 80037b6:	47b8      	blx	r7
 80037b8:	3001      	adds	r0, #1
 80037ba:	f43f ae9d 	beq.w	80034f8 <_printf_float+0x98>
 80037be:	9b05      	ldr	r3, [sp, #20]
 80037c0:	9a04      	ldr	r2, [sp, #16]
 80037c2:	3301      	adds	r3, #1
 80037c4:	9305      	str	r3, [sp, #20]
 80037c6:	e7b7      	b.n	8003738 <_printf_float+0x2d8>
 80037c8:	4653      	mov	r3, sl
 80037ca:	465a      	mov	r2, fp
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	d1be      	bne.n	8003754 <_printf_float+0x2f4>
 80037d6:	e68f      	b.n	80034f8 <_printf_float+0x98>
 80037d8:	9a04      	ldr	r2, [sp, #16]
 80037da:	464b      	mov	r3, r9
 80037dc:	4442      	add	r2, r8
 80037de:	4631      	mov	r1, r6
 80037e0:	4628      	mov	r0, r5
 80037e2:	47b8      	blx	r7
 80037e4:	3001      	adds	r0, #1
 80037e6:	d1c1      	bne.n	800376c <_printf_float+0x30c>
 80037e8:	e686      	b.n	80034f8 <_printf_float+0x98>
 80037ea:	9a08      	ldr	r2, [sp, #32]
 80037ec:	2a01      	cmp	r2, #1
 80037ee:	dc01      	bgt.n	80037f4 <_printf_float+0x394>
 80037f0:	07db      	lsls	r3, r3, #31
 80037f2:	d537      	bpl.n	8003864 <_printf_float+0x404>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4642      	mov	r2, r8
 80037f8:	4631      	mov	r1, r6
 80037fa:	4628      	mov	r0, r5
 80037fc:	47b8      	blx	r7
 80037fe:	3001      	adds	r0, #1
 8003800:	f43f ae7a 	beq.w	80034f8 <_printf_float+0x98>
 8003804:	4653      	mov	r3, sl
 8003806:	465a      	mov	r2, fp
 8003808:	4631      	mov	r1, r6
 800380a:	4628      	mov	r0, r5
 800380c:	47b8      	blx	r7
 800380e:	3001      	adds	r0, #1
 8003810:	f43f ae72 	beq.w	80034f8 <_printf_float+0x98>
 8003814:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	9b08      	ldr	r3, [sp, #32]
 8003822:	d01a      	beq.n	800385a <_printf_float+0x3fa>
 8003824:	3b01      	subs	r3, #1
 8003826:	f108 0201 	add.w	r2, r8, #1
 800382a:	4631      	mov	r1, r6
 800382c:	4628      	mov	r0, r5
 800382e:	47b8      	blx	r7
 8003830:	3001      	adds	r0, #1
 8003832:	d10e      	bne.n	8003852 <_printf_float+0x3f2>
 8003834:	e660      	b.n	80034f8 <_printf_float+0x98>
 8003836:	2301      	movs	r3, #1
 8003838:	464a      	mov	r2, r9
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
 800383e:	47b8      	blx	r7
 8003840:	3001      	adds	r0, #1
 8003842:	f43f ae59 	beq.w	80034f8 <_printf_float+0x98>
 8003846:	f108 0801 	add.w	r8, r8, #1
 800384a:	9b08      	ldr	r3, [sp, #32]
 800384c:	3b01      	subs	r3, #1
 800384e:	4543      	cmp	r3, r8
 8003850:	dcf1      	bgt.n	8003836 <_printf_float+0x3d6>
 8003852:	9b04      	ldr	r3, [sp, #16]
 8003854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003858:	e6dd      	b.n	8003616 <_printf_float+0x1b6>
 800385a:	f04f 0800 	mov.w	r8, #0
 800385e:	f104 091a 	add.w	r9, r4, #26
 8003862:	e7f2      	b.n	800384a <_printf_float+0x3ea>
 8003864:	2301      	movs	r3, #1
 8003866:	4642      	mov	r2, r8
 8003868:	e7df      	b.n	800382a <_printf_float+0x3ca>
 800386a:	2301      	movs	r3, #1
 800386c:	464a      	mov	r2, r9
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f ae3f 	beq.w	80034f8 <_printf_float+0x98>
 800387a:	f108 0801 	add.w	r8, r8, #1
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003882:	1a5b      	subs	r3, r3, r1
 8003884:	4543      	cmp	r3, r8
 8003886:	dcf0      	bgt.n	800386a <_printf_float+0x40a>
 8003888:	e6f9      	b.n	800367e <_printf_float+0x21e>
 800388a:	f04f 0800 	mov.w	r8, #0
 800388e:	f104 0919 	add.w	r9, r4, #25
 8003892:	e7f4      	b.n	800387e <_printf_float+0x41e>

08003894 <_printf_common>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	4616      	mov	r6, r2
 800389a:	4699      	mov	r9, r3
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfb8      	it	lt
 80038a8:	4613      	movlt	r3, r2
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b0:	4607      	mov	r7, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b10a      	cbz	r2, 80038ba <_printf_common+0x26>
 80038b6:	3301      	adds	r3, #1
 80038b8:	6033      	str	r3, [r6, #0]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	0699      	lsls	r1, r3, #26
 80038be:	bf42      	ittt	mi
 80038c0:	6833      	ldrmi	r3, [r6, #0]
 80038c2:	3302      	addmi	r3, #2
 80038c4:	6033      	strmi	r3, [r6, #0]
 80038c6:	6825      	ldr	r5, [r4, #0]
 80038c8:	f015 0506 	ands.w	r5, r5, #6
 80038cc:	d106      	bne.n	80038dc <_printf_common+0x48>
 80038ce:	f104 0a19 	add.w	sl, r4, #25
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	6832      	ldr	r2, [r6, #0]
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dc26      	bgt.n	800392a <_printf_common+0x96>
 80038dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e0:	1e13      	subs	r3, r2, #0
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	bf18      	it	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	0692      	lsls	r2, r2, #26
 80038ea:	d42b      	bmi.n	8003944 <_printf_common+0xb0>
 80038ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f0:	4649      	mov	r1, r9
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c0      	blx	r8
 80038f6:	3001      	adds	r0, #1
 80038f8:	d01e      	beq.n	8003938 <_printf_common+0xa4>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	6922      	ldr	r2, [r4, #16]
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf02      	ittt	eq
 8003906:	68e5      	ldreq	r5, [r4, #12]
 8003908:	6833      	ldreq	r3, [r6, #0]
 800390a:	1aed      	subeq	r5, r5, r3
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	bf0c      	ite	eq
 8003910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003914:	2500      	movne	r5, #0
 8003916:	4293      	cmp	r3, r2
 8003918:	bfc4      	itt	gt
 800391a:	1a9b      	subgt	r3, r3, r2
 800391c:	18ed      	addgt	r5, r5, r3
 800391e:	2600      	movs	r6, #0
 8003920:	341a      	adds	r4, #26
 8003922:	42b5      	cmp	r5, r6
 8003924:	d11a      	bne.n	800395c <_printf_common+0xc8>
 8003926:	2000      	movs	r0, #0
 8003928:	e008      	b.n	800393c <_printf_common+0xa8>
 800392a:	2301      	movs	r3, #1
 800392c:	4652      	mov	r2, sl
 800392e:	4649      	mov	r1, r9
 8003930:	4638      	mov	r0, r7
 8003932:	47c0      	blx	r8
 8003934:	3001      	adds	r0, #1
 8003936:	d103      	bne.n	8003940 <_printf_common+0xac>
 8003938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003940:	3501      	adds	r5, #1
 8003942:	e7c6      	b.n	80038d2 <_printf_common+0x3e>
 8003944:	18e1      	adds	r1, r4, r3
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	2030      	movs	r0, #48	; 0x30
 800394a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800394e:	4422      	add	r2, r4
 8003950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003958:	3302      	adds	r3, #2
 800395a:	e7c7      	b.n	80038ec <_printf_common+0x58>
 800395c:	2301      	movs	r3, #1
 800395e:	4622      	mov	r2, r4
 8003960:	4649      	mov	r1, r9
 8003962:	4638      	mov	r0, r7
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d0e6      	beq.n	8003938 <_printf_common+0xa4>
 800396a:	3601      	adds	r6, #1
 800396c:	e7d9      	b.n	8003922 <_printf_common+0x8e>
	...

08003970 <_printf_i>:
 8003970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003974:	7e0f      	ldrb	r7, [r1, #24]
 8003976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003978:	2f78      	cmp	r7, #120	; 0x78
 800397a:	4691      	mov	r9, r2
 800397c:	4680      	mov	r8, r0
 800397e:	460c      	mov	r4, r1
 8003980:	469a      	mov	sl, r3
 8003982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003986:	d807      	bhi.n	8003998 <_printf_i+0x28>
 8003988:	2f62      	cmp	r7, #98	; 0x62
 800398a:	d80a      	bhi.n	80039a2 <_printf_i+0x32>
 800398c:	2f00      	cmp	r7, #0
 800398e:	f000 80d4 	beq.w	8003b3a <_printf_i+0x1ca>
 8003992:	2f58      	cmp	r7, #88	; 0x58
 8003994:	f000 80c0 	beq.w	8003b18 <_printf_i+0x1a8>
 8003998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800399c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a0:	e03a      	b.n	8003a18 <_printf_i+0xa8>
 80039a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039a6:	2b15      	cmp	r3, #21
 80039a8:	d8f6      	bhi.n	8003998 <_printf_i+0x28>
 80039aa:	a101      	add	r1, pc, #4	; (adr r1, 80039b0 <_printf_i+0x40>)
 80039ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a1d 	.word	0x08003a1d
 80039b8:	08003999 	.word	0x08003999
 80039bc:	08003999 	.word	0x08003999
 80039c0:	08003999 	.word	0x08003999
 80039c4:	08003999 	.word	0x08003999
 80039c8:	08003a1d 	.word	0x08003a1d
 80039cc:	08003999 	.word	0x08003999
 80039d0:	08003999 	.word	0x08003999
 80039d4:	08003999 	.word	0x08003999
 80039d8:	08003999 	.word	0x08003999
 80039dc:	08003b21 	.word	0x08003b21
 80039e0:	08003a49 	.word	0x08003a49
 80039e4:	08003adb 	.word	0x08003adb
 80039e8:	08003999 	.word	0x08003999
 80039ec:	08003999 	.word	0x08003999
 80039f0:	08003b43 	.word	0x08003b43
 80039f4:	08003999 	.word	0x08003999
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003999 	.word	0x08003999
 8003a00:	08003999 	.word	0x08003999
 8003a04:	08003ae3 	.word	0x08003ae3
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	602a      	str	r2, [r5, #0]
 8003a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e09f      	b.n	8003b5c <_printf_i+0x1ec>
 8003a1c:	6820      	ldr	r0, [r4, #0]
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	0607      	lsls	r7, r0, #24
 8003a22:	f103 0104 	add.w	r1, r3, #4
 8003a26:	6029      	str	r1, [r5, #0]
 8003a28:	d501      	bpl.n	8003a2e <_printf_i+0xbe>
 8003a2a:	681e      	ldr	r6, [r3, #0]
 8003a2c:	e003      	b.n	8003a36 <_printf_i+0xc6>
 8003a2e:	0646      	lsls	r6, r0, #25
 8003a30:	d5fb      	bpl.n	8003a2a <_printf_i+0xba>
 8003a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	da03      	bge.n	8003a42 <_printf_i+0xd2>
 8003a3a:	232d      	movs	r3, #45	; 0x2d
 8003a3c:	4276      	negs	r6, r6
 8003a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a42:	485a      	ldr	r0, [pc, #360]	; (8003bac <_printf_i+0x23c>)
 8003a44:	230a      	movs	r3, #10
 8003a46:	e012      	b.n	8003a6e <_printf_i+0xfe>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	6820      	ldr	r0, [r4, #0]
 8003a4c:	1d19      	adds	r1, r3, #4
 8003a4e:	6029      	str	r1, [r5, #0]
 8003a50:	0605      	lsls	r5, r0, #24
 8003a52:	d501      	bpl.n	8003a58 <_printf_i+0xe8>
 8003a54:	681e      	ldr	r6, [r3, #0]
 8003a56:	e002      	b.n	8003a5e <_printf_i+0xee>
 8003a58:	0641      	lsls	r1, r0, #25
 8003a5a:	d5fb      	bpl.n	8003a54 <_printf_i+0xe4>
 8003a5c:	881e      	ldrh	r6, [r3, #0]
 8003a5e:	4853      	ldr	r0, [pc, #332]	; (8003bac <_printf_i+0x23c>)
 8003a60:	2f6f      	cmp	r7, #111	; 0x6f
 8003a62:	bf0c      	ite	eq
 8003a64:	2308      	moveq	r3, #8
 8003a66:	230a      	movne	r3, #10
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a6e:	6865      	ldr	r5, [r4, #4]
 8003a70:	60a5      	str	r5, [r4, #8]
 8003a72:	2d00      	cmp	r5, #0
 8003a74:	bfa2      	ittt	ge
 8003a76:	6821      	ldrge	r1, [r4, #0]
 8003a78:	f021 0104 	bicge.w	r1, r1, #4
 8003a7c:	6021      	strge	r1, [r4, #0]
 8003a7e:	b90e      	cbnz	r6, 8003a84 <_printf_i+0x114>
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	d04b      	beq.n	8003b1c <_printf_i+0x1ac>
 8003a84:	4615      	mov	r5, r2
 8003a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a8e:	5dc7      	ldrb	r7, [r0, r7]
 8003a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a94:	4637      	mov	r7, r6
 8003a96:	42bb      	cmp	r3, r7
 8003a98:	460e      	mov	r6, r1
 8003a9a:	d9f4      	bls.n	8003a86 <_printf_i+0x116>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d10b      	bne.n	8003ab8 <_printf_i+0x148>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	07de      	lsls	r6, r3, #31
 8003aa4:	d508      	bpl.n	8003ab8 <_printf_i+0x148>
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	6861      	ldr	r1, [r4, #4]
 8003aaa:	4299      	cmp	r1, r3
 8003aac:	bfde      	ittt	le
 8003aae:	2330      	movle	r3, #48	; 0x30
 8003ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ab4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ab8:	1b52      	subs	r2, r2, r5
 8003aba:	6122      	str	r2, [r4, #16]
 8003abc:	f8cd a000 	str.w	sl, [sp]
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	aa03      	add	r2, sp, #12
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	f7ff fee4 	bl	8003894 <_printf_common>
 8003acc:	3001      	adds	r0, #1
 8003ace:	d14a      	bne.n	8003b66 <_printf_i+0x1f6>
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ad4:	b004      	add	sp, #16
 8003ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	4833      	ldr	r0, [pc, #204]	; (8003bb0 <_printf_i+0x240>)
 8003ae4:	2778      	movs	r7, #120	; 0x78
 8003ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	6829      	ldr	r1, [r5, #0]
 8003aee:	061f      	lsls	r7, r3, #24
 8003af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003af4:	d402      	bmi.n	8003afc <_printf_i+0x18c>
 8003af6:	065f      	lsls	r7, r3, #25
 8003af8:	bf48      	it	mi
 8003afa:	b2b6      	uxthmi	r6, r6
 8003afc:	07df      	lsls	r7, r3, #31
 8003afe:	bf48      	it	mi
 8003b00:	f043 0320 	orrmi.w	r3, r3, #32
 8003b04:	6029      	str	r1, [r5, #0]
 8003b06:	bf48      	it	mi
 8003b08:	6023      	strmi	r3, [r4, #0]
 8003b0a:	b91e      	cbnz	r6, 8003b14 <_printf_i+0x1a4>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	2310      	movs	r3, #16
 8003b16:	e7a7      	b.n	8003a68 <_printf_i+0xf8>
 8003b18:	4824      	ldr	r0, [pc, #144]	; (8003bac <_printf_i+0x23c>)
 8003b1a:	e7e4      	b.n	8003ae6 <_printf_i+0x176>
 8003b1c:	4615      	mov	r5, r2
 8003b1e:	e7bd      	b.n	8003a9c <_printf_i+0x12c>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	6826      	ldr	r6, [r4, #0]
 8003b24:	6961      	ldr	r1, [r4, #20]
 8003b26:	1d18      	adds	r0, r3, #4
 8003b28:	6028      	str	r0, [r5, #0]
 8003b2a:	0635      	lsls	r5, r6, #24
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	d501      	bpl.n	8003b34 <_printf_i+0x1c4>
 8003b30:	6019      	str	r1, [r3, #0]
 8003b32:	e002      	b.n	8003b3a <_printf_i+0x1ca>
 8003b34:	0670      	lsls	r0, r6, #25
 8003b36:	d5fb      	bpl.n	8003b30 <_printf_i+0x1c0>
 8003b38:	8019      	strh	r1, [r3, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	4615      	mov	r5, r2
 8003b40:	e7bc      	b.n	8003abc <_printf_i+0x14c>
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	1d1a      	adds	r2, r3, #4
 8003b46:	602a      	str	r2, [r5, #0]
 8003b48:	681d      	ldr	r5, [r3, #0]
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f7fc fbde 	bl	8000310 <memchr>
 8003b54:	b108      	cbz	r0, 8003b5a <_printf_i+0x1ea>
 8003b56:	1b40      	subs	r0, r0, r5
 8003b58:	6060      	str	r0, [r4, #4]
 8003b5a:	6863      	ldr	r3, [r4, #4]
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b64:	e7aa      	b.n	8003abc <_printf_i+0x14c>
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	47d0      	blx	sl
 8003b70:	3001      	adds	r0, #1
 8003b72:	d0ad      	beq.n	8003ad0 <_printf_i+0x160>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	079b      	lsls	r3, r3, #30
 8003b78:	d413      	bmi.n	8003ba2 <_printf_i+0x232>
 8003b7a:	68e0      	ldr	r0, [r4, #12]
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	4298      	cmp	r0, r3
 8003b80:	bfb8      	it	lt
 8003b82:	4618      	movlt	r0, r3
 8003b84:	e7a6      	b.n	8003ad4 <_printf_i+0x164>
 8003b86:	2301      	movs	r3, #1
 8003b88:	4632      	mov	r2, r6
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	4640      	mov	r0, r8
 8003b8e:	47d0      	blx	sl
 8003b90:	3001      	adds	r0, #1
 8003b92:	d09d      	beq.n	8003ad0 <_printf_i+0x160>
 8003b94:	3501      	adds	r5, #1
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	9903      	ldr	r1, [sp, #12]
 8003b9a:	1a5b      	subs	r3, r3, r1
 8003b9c:	42ab      	cmp	r3, r5
 8003b9e:	dcf2      	bgt.n	8003b86 <_printf_i+0x216>
 8003ba0:	e7eb      	b.n	8003b7a <_printf_i+0x20a>
 8003ba2:	2500      	movs	r5, #0
 8003ba4:	f104 0619 	add.w	r6, r4, #25
 8003ba8:	e7f5      	b.n	8003b96 <_printf_i+0x226>
 8003baa:	bf00      	nop
 8003bac:	08036eba 	.word	0x08036eba
 8003bb0:	08036ecb 	.word	0x08036ecb

08003bb4 <std>:
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
 8003bba:	e9c0 3300 	strd	r3, r3, [r0]
 8003bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bc2:	6083      	str	r3, [r0, #8]
 8003bc4:	8181      	strh	r1, [r0, #12]
 8003bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8003bc8:	81c2      	strh	r2, [r0, #14]
 8003bca:	6183      	str	r3, [r0, #24]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2208      	movs	r2, #8
 8003bd0:	305c      	adds	r0, #92	; 0x5c
 8003bd2:	f000 f9f7 	bl	8003fc4 <memset>
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <std+0x58>)
 8003bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <std+0x5c>)
 8003bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <std+0x60>)
 8003be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <std+0x64>)
 8003be4:	6323      	str	r3, [r4, #48]	; 0x30
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <std+0x68>)
 8003be8:	6224      	str	r4, [r4, #32]
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d006      	beq.n	8003bfc <std+0x48>
 8003bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003bf2:	4294      	cmp	r4, r2
 8003bf4:	d002      	beq.n	8003bfc <std+0x48>
 8003bf6:	33d0      	adds	r3, #208	; 0xd0
 8003bf8:	429c      	cmp	r4, r3
 8003bfa:	d105      	bne.n	8003c08 <std+0x54>
 8003bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c04:	f000 ba6a 	b.w	80040dc <__retarget_lock_init_recursive>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08003e15 	.word	0x08003e15
 8003c10:	08003e37 	.word	0x08003e37
 8003c14:	08003e6f 	.word	0x08003e6f
 8003c18:	08003e93 	.word	0x08003e93
 8003c1c:	2400116c 	.word	0x2400116c

08003c20 <stdio_exit_handler>:
 8003c20:	4a02      	ldr	r2, [pc, #8]	; (8003c2c <stdio_exit_handler+0xc>)
 8003c22:	4903      	ldr	r1, [pc, #12]	; (8003c30 <stdio_exit_handler+0x10>)
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <stdio_exit_handler+0x14>)
 8003c26:	f000 b869 	b.w	8003cfc <_fwalk_sglue>
 8003c2a:	bf00      	nop
 8003c2c:	24000aa0 	.word	0x24000aa0
 8003c30:	0800580d 	.word	0x0800580d
 8003c34:	24000aac 	.word	0x24000aac

08003c38 <cleanup_stdio>:
 8003c38:	6841      	ldr	r1, [r0, #4]
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <cleanup_stdio+0x34>)
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	d001      	beq.n	8003c48 <cleanup_stdio+0x10>
 8003c44:	f001 fde2 	bl	800580c <_fflush_r>
 8003c48:	68a1      	ldr	r1, [r4, #8]
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <cleanup_stdio+0x38>)
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	d002      	beq.n	8003c56 <cleanup_stdio+0x1e>
 8003c50:	4620      	mov	r0, r4
 8003c52:	f001 fddb 	bl	800580c <_fflush_r>
 8003c56:	68e1      	ldr	r1, [r4, #12]
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <cleanup_stdio+0x3c>)
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	d004      	beq.n	8003c68 <cleanup_stdio+0x30>
 8003c5e:	4620      	mov	r0, r4
 8003c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c64:	f001 bdd2 	b.w	800580c <_fflush_r>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2400116c 	.word	0x2400116c
 8003c70:	240011d4 	.word	0x240011d4
 8003c74:	2400123c 	.word	0x2400123c

08003c78 <global_stdio_init.part.0>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <global_stdio_init.part.0+0x30>)
 8003c7c:	4c0b      	ldr	r4, [pc, #44]	; (8003cac <global_stdio_init.part.0+0x34>)
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <global_stdio_init.part.0+0x38>)
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	4620      	mov	r0, r4
 8003c84:	2200      	movs	r2, #0
 8003c86:	2104      	movs	r1, #4
 8003c88:	f7ff ff94 	bl	8003bb4 <std>
 8003c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c90:	2201      	movs	r2, #1
 8003c92:	2109      	movs	r1, #9
 8003c94:	f7ff ff8e 	bl	8003bb4 <std>
 8003c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca2:	2112      	movs	r1, #18
 8003ca4:	f7ff bf86 	b.w	8003bb4 <std>
 8003ca8:	240012a4 	.word	0x240012a4
 8003cac:	2400116c 	.word	0x2400116c
 8003cb0:	08003c21 	.word	0x08003c21

08003cb4 <__sfp_lock_acquire>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__sfp_lock_acquire+0x8>)
 8003cb6:	f000 ba12 	b.w	80040de <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	240012ad 	.word	0x240012ad

08003cc0 <__sfp_lock_release>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__sfp_lock_release+0x8>)
 8003cc2:	f000 ba0d 	b.w	80040e0 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	240012ad 	.word	0x240012ad

08003ccc <__sinit>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	f7ff fff0 	bl	8003cb4 <__sfp_lock_acquire>
 8003cd4:	6a23      	ldr	r3, [r4, #32]
 8003cd6:	b11b      	cbz	r3, 8003ce0 <__sinit+0x14>
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	f7ff bff0 	b.w	8003cc0 <__sfp_lock_release>
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__sinit+0x28>)
 8003ce2:	6223      	str	r3, [r4, #32]
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__sinit+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f5      	bne.n	8003cd8 <__sinit+0xc>
 8003cec:	f7ff ffc4 	bl	8003c78 <global_stdio_init.part.0>
 8003cf0:	e7f2      	b.n	8003cd8 <__sinit+0xc>
 8003cf2:	bf00      	nop
 8003cf4:	08003c39 	.word	0x08003c39
 8003cf8:	240012a4 	.word	0x240012a4

08003cfc <_fwalk_sglue>:
 8003cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4607      	mov	r7, r0
 8003d02:	4688      	mov	r8, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	2600      	movs	r6, #0
 8003d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d10:	d505      	bpl.n	8003d1e <_fwalk_sglue+0x22>
 8003d12:	6824      	ldr	r4, [r4, #0]
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d1f7      	bne.n	8003d08 <_fwalk_sglue+0xc>
 8003d18:	4630      	mov	r0, r6
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	89ab      	ldrh	r3, [r5, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d907      	bls.n	8003d34 <_fwalk_sglue+0x38>
 8003d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	d003      	beq.n	8003d34 <_fwalk_sglue+0x38>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	4306      	orrs	r6, r0
 8003d34:	3568      	adds	r5, #104	; 0x68
 8003d36:	e7e9      	b.n	8003d0c <_fwalk_sglue+0x10>

08003d38 <iprintf>:
 8003d38:	b40f      	push	{r0, r1, r2, r3}
 8003d3a:	b507      	push	{r0, r1, r2, lr}
 8003d3c:	4906      	ldr	r1, [pc, #24]	; (8003d58 <iprintf+0x20>)
 8003d3e:	ab04      	add	r3, sp, #16
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d46:	6881      	ldr	r1, [r0, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	f001 fbbf 	bl	80054cc <_vfiprintf_r>
 8003d4e:	b003      	add	sp, #12
 8003d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d54:	b004      	add	sp, #16
 8003d56:	4770      	bx	lr
 8003d58:	24000af8 	.word	0x24000af8

08003d5c <_puts_r>:
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	6884      	ldr	r4, [r0, #8]
 8003d62:	4605      	mov	r5, r0
 8003d64:	460e      	mov	r6, r1
 8003d66:	b90b      	cbnz	r3, 8003d6c <_puts_r+0x10>
 8003d68:	f7ff ffb0 	bl	8003ccc <__sinit>
 8003d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6e:	07db      	lsls	r3, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x22>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	0598      	lsls	r0, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x22>
 8003d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7a:	f000 f9b0 	bl	80040de <__retarget_lock_acquire_recursive>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	0719      	lsls	r1, r3, #28
 8003d82:	d513      	bpl.n	8003dac <_puts_r+0x50>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	b18b      	cbz	r3, 8003dac <_puts_r+0x50>
 8003d88:	3e01      	subs	r6, #1
 8003d8a:	68a3      	ldr	r3, [r4, #8]
 8003d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60a3      	str	r3, [r4, #8]
 8003d94:	b9e9      	cbnz	r1, 8003dd2 <_puts_r+0x76>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da2e      	bge.n	8003df8 <_puts_r+0x9c>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	210a      	movs	r1, #10
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f87b 	bl	8003e9a <__swbuf_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d007      	beq.n	8003db8 <_puts_r+0x5c>
 8003da8:	250a      	movs	r5, #10
 8003daa:	e007      	b.n	8003dbc <_puts_r+0x60>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f8b0 	bl	8003f14 <__swsetup_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0e7      	beq.n	8003d88 <_puts_r+0x2c>
 8003db8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dbe:	07da      	lsls	r2, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_puts_r+0x72>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	059b      	lsls	r3, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_puts_r+0x72>
 8003dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dca:	f000 f989 	bl	80040e0 <__retarget_lock_release_recursive>
 8003dce:	4628      	mov	r0, r5
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da04      	bge.n	8003de0 <_puts_r+0x84>
 8003dd6:	69a2      	ldr	r2, [r4, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dc06      	bgt.n	8003dea <_puts_r+0x8e>
 8003ddc:	290a      	cmp	r1, #10
 8003dde:	d004      	beq.n	8003dea <_puts_r+0x8e>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	6022      	str	r2, [r4, #0]
 8003de6:	7019      	strb	r1, [r3, #0]
 8003de8:	e7cf      	b.n	8003d8a <_puts_r+0x2e>
 8003dea:	4622      	mov	r2, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 f854 	bl	8003e9a <__swbuf_r>
 8003df2:	3001      	adds	r0, #1
 8003df4:	d1c9      	bne.n	8003d8a <_puts_r+0x2e>
 8003df6:	e7df      	b.n	8003db8 <_puts_r+0x5c>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	250a      	movs	r5, #10
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	6022      	str	r2, [r4, #0]
 8003e00:	701d      	strb	r5, [r3, #0]
 8003e02:	e7db      	b.n	8003dbc <_puts_r+0x60>

08003e04 <puts>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <puts+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f7ff bfa7 	b.w	8003d5c <_puts_r>
 8003e0e:	bf00      	nop
 8003e10:	24000af8 	.word	0x24000af8

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f900 	bl	8004020 <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	4605      	mov	r5, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f000 f8d4 	bl	8003ffc <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	4628      	mov	r0, r5
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b8fb 	b.w	8004064 <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f8c1 	bl	8003ffc <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b8a1 	b.w	8003fdc <_close_r>

08003e9a <__swbuf_r>:
 8003e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b118      	cbz	r0, 8003eac <__swbuf_r+0x12>
 8003ea4:	6a03      	ldr	r3, [r0, #32]
 8003ea6:	b90b      	cbnz	r3, 8003eac <__swbuf_r+0x12>
 8003ea8:	f7ff ff10 	bl	8003ccc <__sinit>
 8003eac:	69a3      	ldr	r3, [r4, #24]
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	071a      	lsls	r2, r3, #28
 8003eb4:	d525      	bpl.n	8003f02 <__swbuf_r+0x68>
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	b31b      	cbz	r3, 8003f02 <__swbuf_r+0x68>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	1a98      	subs	r0, r3, r2
 8003ec0:	6963      	ldr	r3, [r4, #20]
 8003ec2:	b2f6      	uxtb	r6, r6
 8003ec4:	4283      	cmp	r3, r0
 8003ec6:	4637      	mov	r7, r6
 8003ec8:	dc04      	bgt.n	8003ed4 <__swbuf_r+0x3a>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f001 fc9d 	bl	800580c <_fflush_r>
 8003ed2:	b9e0      	cbnz	r0, 8003f0e <__swbuf_r+0x74>
 8003ed4:	68a3      	ldr	r3, [r4, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60a3      	str	r3, [r4, #8]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	701e      	strb	r6, [r3, #0]
 8003ee2:	6962      	ldr	r2, [r4, #20]
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d004      	beq.n	8003ef4 <__swbuf_r+0x5a>
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	07db      	lsls	r3, r3, #31
 8003eee:	d506      	bpl.n	8003efe <__swbuf_r+0x64>
 8003ef0:	2e0a      	cmp	r6, #10
 8003ef2:	d104      	bne.n	8003efe <__swbuf_r+0x64>
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f001 fc88 	bl	800580c <_fflush_r>
 8003efc:	b938      	cbnz	r0, 8003f0e <__swbuf_r+0x74>
 8003efe:	4638      	mov	r0, r7
 8003f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 f805 	bl	8003f14 <__swsetup_r>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d0d5      	beq.n	8003eba <__swbuf_r+0x20>
 8003f0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f12:	e7f4      	b.n	8003efe <__swbuf_r+0x64>

08003f14 <__swsetup_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <__swsetup_r+0xac>)
 8003f18:	4605      	mov	r5, r0
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	b118      	cbz	r0, 8003f28 <__swsetup_r+0x14>
 8003f20:	6a03      	ldr	r3, [r0, #32]
 8003f22:	b90b      	cbnz	r3, 8003f28 <__swsetup_r+0x14>
 8003f24:	f7ff fed2 	bl	8003ccc <__sinit>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f2e:	0718      	lsls	r0, r3, #28
 8003f30:	d422      	bmi.n	8003f78 <__swsetup_r+0x64>
 8003f32:	06d9      	lsls	r1, r3, #27
 8003f34:	d407      	bmi.n	8003f46 <__swsetup_r+0x32>
 8003f36:	2309      	movs	r3, #9
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f44:	e034      	b.n	8003fb0 <__swsetup_r+0x9c>
 8003f46:	0758      	lsls	r0, r3, #29
 8003f48:	d512      	bpl.n	8003f70 <__swsetup_r+0x5c>
 8003f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4c:	b141      	cbz	r1, 8003f60 <__swsetup_r+0x4c>
 8003f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f52:	4299      	cmp	r1, r3
 8003f54:	d002      	beq.n	8003f5c <__swsetup_r+0x48>
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 fec6 	bl	8004ce8 <_free_r>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f043 0308 	orr.w	r3, r3, #8
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	b94b      	cbnz	r3, 8003f90 <__swsetup_r+0x7c>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f86:	d003      	beq.n	8003f90 <__swsetup_r+0x7c>
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f001 fc8c 	bl	80058a8 <__smakebuf_r>
 8003f90:	89a0      	ldrh	r0, [r4, #12]
 8003f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f96:	f010 0301 	ands.w	r3, r0, #1
 8003f9a:	d00a      	beq.n	8003fb2 <__swsetup_r+0x9e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60a3      	str	r3, [r4, #8]
 8003fa0:	6963      	ldr	r3, [r4, #20]
 8003fa2:	425b      	negs	r3, r3
 8003fa4:	61a3      	str	r3, [r4, #24]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	b943      	cbnz	r3, 8003fbc <__swsetup_r+0xa8>
 8003faa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fae:	d1c4      	bne.n	8003f3a <__swsetup_r+0x26>
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	0781      	lsls	r1, r0, #30
 8003fb4:	bf58      	it	pl
 8003fb6:	6963      	ldrpl	r3, [r4, #20]
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	e7f4      	b.n	8003fa6 <__swsetup_r+0x92>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e7f7      	b.n	8003fb0 <__swsetup_r+0x9c>
 8003fc0:	24000af8 	.word	0x24000af8

08003fc4 <memset>:
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <_localeconv_r>:
 8003fd4:	4800      	ldr	r0, [pc, #0]	; (8003fd8 <_localeconv_r+0x4>)
 8003fd6:	4770      	bx	lr
 8003fd8:	24000bec 	.word	0x24000bec

08003fdc <_close_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4d06      	ldr	r5, [pc, #24]	; (8003ff8 <_close_r+0x1c>)
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f001 fd6e 	bl	8005ac8 <_close>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_close_r+0x1a>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_close_r+0x1a>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	240012a8 	.word	0x240012a8

08003ffc <_lseek_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4d07      	ldr	r5, [pc, #28]	; (800401c <_lseek_r+0x20>)
 8004000:	4604      	mov	r4, r0
 8004002:	4608      	mov	r0, r1
 8004004:	4611      	mov	r1, r2
 8004006:	2200      	movs	r2, #0
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f001 fd84 	bl	8005b18 <_lseek>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_lseek_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_lseek_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	240012a8 	.word	0x240012a8

08004020 <_read_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d07      	ldr	r5, [pc, #28]	; (8004040 <_read_r+0x20>)
 8004024:	4604      	mov	r4, r0
 8004026:	4608      	mov	r0, r1
 8004028:	4611      	mov	r1, r2
 800402a:	2200      	movs	r2, #0
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f001 fd7a 	bl	8005b28 <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_read_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_read_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	240012a8 	.word	0x240012a8

08004044 <_sbrk_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d06      	ldr	r5, [pc, #24]	; (8004060 <_sbrk_r+0x1c>)
 8004048:	2300      	movs	r3, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	f7fc fa8c 	bl	800056c <_sbrk>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_sbrk_r+0x1a>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_sbrk_r+0x1a>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	240012a8 	.word	0x240012a8

08004064 <_write_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d07      	ldr	r5, [pc, #28]	; (8004084 <_write_r+0x20>)
 8004068:	4604      	mov	r4, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f001 fd60 	bl	8005b38 <_write>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_write_r+0x1e>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_write_r+0x1e>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	240012a8 	.word	0x240012a8

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	24000af8 	.word	0x24000af8

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f001 fd50 	bl	8005b4c <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	0803721c 	.word	0x0803721c
 80040d0:	0803721c 	.word	0x0803721c
 80040d4:	0803721c 	.word	0x0803721c
 80040d8:	08037220 	.word	0x08037220

080040dc <__retarget_lock_init_recursive>:
 80040dc:	4770      	bx	lr

080040de <__retarget_lock_acquire_recursive>:
 80040de:	4770      	bx	lr

080040e0 <__retarget_lock_release_recursive>:
 80040e0:	4770      	bx	lr

080040e2 <memcpy>:
 80040e2:	440a      	add	r2, r1
 80040e4:	4291      	cmp	r1, r2
 80040e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040ea:	d100      	bne.n	80040ee <memcpy+0xc>
 80040ec:	4770      	bx	lr
 80040ee:	b510      	push	{r4, lr}
 80040f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f8:	4291      	cmp	r1, r2
 80040fa:	d1f9      	bne.n	80040f0 <memcpy+0xe>
 80040fc:	bd10      	pop	{r4, pc}

080040fe <quorem>:
 80040fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004102:	6903      	ldr	r3, [r0, #16]
 8004104:	690c      	ldr	r4, [r1, #16]
 8004106:	42a3      	cmp	r3, r4
 8004108:	4607      	mov	r7, r0
 800410a:	db7e      	blt.n	800420a <quorem+0x10c>
 800410c:	3c01      	subs	r4, #1
 800410e:	f101 0814 	add.w	r8, r1, #20
 8004112:	f100 0514 	add.w	r5, r0, #20
 8004116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004124:	3301      	adds	r3, #1
 8004126:	429a      	cmp	r2, r3
 8004128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800412c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004130:	fbb2 f6f3 	udiv	r6, r2, r3
 8004134:	d331      	bcc.n	800419a <quorem+0x9c>
 8004136:	f04f 0e00 	mov.w	lr, #0
 800413a:	4640      	mov	r0, r8
 800413c:	46ac      	mov	ip, r5
 800413e:	46f2      	mov	sl, lr
 8004140:	f850 2b04 	ldr.w	r2, [r0], #4
 8004144:	b293      	uxth	r3, r2
 8004146:	fb06 e303 	mla	r3, r6, r3, lr
 800414a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800414e:	0c1a      	lsrs	r2, r3, #16
 8004150:	b29b      	uxth	r3, r3
 8004152:	ebaa 0303 	sub.w	r3, sl, r3
 8004156:	f8dc a000 	ldr.w	sl, [ip]
 800415a:	fa13 f38a 	uxtah	r3, r3, sl
 800415e:	fb06 220e 	mla	r2, r6, lr, r2
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	9b00      	ldr	r3, [sp, #0]
 8004166:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800416a:	b292      	uxth	r2, r2
 800416c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004174:	f8bd 3000 	ldrh.w	r3, [sp]
 8004178:	4581      	cmp	r9, r0
 800417a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800417e:	f84c 3b04 	str.w	r3, [ip], #4
 8004182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004186:	d2db      	bcs.n	8004140 <quorem+0x42>
 8004188:	f855 300b 	ldr.w	r3, [r5, fp]
 800418c:	b92b      	cbnz	r3, 800419a <quorem+0x9c>
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	3b04      	subs	r3, #4
 8004192:	429d      	cmp	r5, r3
 8004194:	461a      	mov	r2, r3
 8004196:	d32c      	bcc.n	80041f2 <quorem+0xf4>
 8004198:	613c      	str	r4, [r7, #16]
 800419a:	4638      	mov	r0, r7
 800419c:	f001 f86c 	bl	8005278 <__mcmp>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	db22      	blt.n	80041ea <quorem+0xec>
 80041a4:	3601      	adds	r6, #1
 80041a6:	4629      	mov	r1, r5
 80041a8:	2000      	movs	r0, #0
 80041aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80041ae:	f8d1 c000 	ldr.w	ip, [r1]
 80041b2:	b293      	uxth	r3, r2
 80041b4:	1ac3      	subs	r3, r0, r3
 80041b6:	0c12      	lsrs	r2, r2, #16
 80041b8:	fa13 f38c 	uxtah	r3, r3, ip
 80041bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80041c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ca:	45c1      	cmp	r9, r8
 80041cc:	f841 3b04 	str.w	r3, [r1], #4
 80041d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041d4:	d2e9      	bcs.n	80041aa <quorem+0xac>
 80041d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041de:	b922      	cbnz	r2, 80041ea <quorem+0xec>
 80041e0:	3b04      	subs	r3, #4
 80041e2:	429d      	cmp	r5, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	d30a      	bcc.n	80041fe <quorem+0x100>
 80041e8:	613c      	str	r4, [r7, #16]
 80041ea:	4630      	mov	r0, r6
 80041ec:	b003      	add	sp, #12
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	3b04      	subs	r3, #4
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	d1ce      	bne.n	8004198 <quorem+0x9a>
 80041fa:	3c01      	subs	r4, #1
 80041fc:	e7c9      	b.n	8004192 <quorem+0x94>
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	3b04      	subs	r3, #4
 8004202:	2a00      	cmp	r2, #0
 8004204:	d1f0      	bne.n	80041e8 <quorem+0xea>
 8004206:	3c01      	subs	r4, #1
 8004208:	e7eb      	b.n	80041e2 <quorem+0xe4>
 800420a:	2000      	movs	r0, #0
 800420c:	e7ee      	b.n	80041ec <quorem+0xee>
	...

08004210 <_dtoa_r>:
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	ed2d 8b02 	vpush	{d8}
 8004218:	69c5      	ldr	r5, [r0, #28]
 800421a:	b091      	sub	sp, #68	; 0x44
 800421c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004220:	ec59 8b10 	vmov	r8, r9, d0
 8004224:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004226:	9106      	str	r1, [sp, #24]
 8004228:	4606      	mov	r6, r0
 800422a:	9208      	str	r2, [sp, #32]
 800422c:	930c      	str	r3, [sp, #48]	; 0x30
 800422e:	b975      	cbnz	r5, 800424e <_dtoa_r+0x3e>
 8004230:	2010      	movs	r0, #16
 8004232:	f7fe ffcf 	bl	80031d4 <malloc>
 8004236:	4602      	mov	r2, r0
 8004238:	61f0      	str	r0, [r6, #28]
 800423a:	b920      	cbnz	r0, 8004246 <_dtoa_r+0x36>
 800423c:	4ba6      	ldr	r3, [pc, #664]	; (80044d8 <_dtoa_r+0x2c8>)
 800423e:	21ef      	movs	r1, #239	; 0xef
 8004240:	48a6      	ldr	r0, [pc, #664]	; (80044dc <_dtoa_r+0x2cc>)
 8004242:	f001 fb8f 	bl	8005964 <__assert_func>
 8004246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800424a:	6005      	str	r5, [r0, #0]
 800424c:	60c5      	str	r5, [r0, #12]
 800424e:	69f3      	ldr	r3, [r6, #28]
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	b151      	cbz	r1, 800426a <_dtoa_r+0x5a>
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	604a      	str	r2, [r1, #4]
 8004258:	2301      	movs	r3, #1
 800425a:	4093      	lsls	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
 800425e:	4630      	mov	r0, r6
 8004260:	f000 fdce 	bl	8004e00 <_Bfree>
 8004264:	69f3      	ldr	r3, [r6, #28]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	f1b9 0300 	subs.w	r3, r9, #0
 800426e:	bfbb      	ittet	lt
 8004270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004274:	9303      	strlt	r3, [sp, #12]
 8004276:	2300      	movge	r3, #0
 8004278:	2201      	movlt	r2, #1
 800427a:	bfac      	ite	ge
 800427c:	6023      	strge	r3, [r4, #0]
 800427e:	6022      	strlt	r2, [r4, #0]
 8004280:	4b97      	ldr	r3, [pc, #604]	; (80044e0 <_dtoa_r+0x2d0>)
 8004282:	9c03      	ldr	r4, [sp, #12]
 8004284:	43a3      	bics	r3, r4
 8004286:	d11c      	bne.n	80042c2 <_dtoa_r+0xb2>
 8004288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800428a:	f242 730f 	movw	r3, #9999	; 0x270f
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004294:	ea53 0308 	orrs.w	r3, r3, r8
 8004298:	f000 84fb 	beq.w	8004c92 <_dtoa_r+0xa82>
 800429c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800429e:	b963      	cbnz	r3, 80042ba <_dtoa_r+0xaa>
 80042a0:	4b90      	ldr	r3, [pc, #576]	; (80044e4 <_dtoa_r+0x2d4>)
 80042a2:	e020      	b.n	80042e6 <_dtoa_r+0xd6>
 80042a4:	4b90      	ldr	r3, [pc, #576]	; (80044e8 <_dtoa_r+0x2d8>)
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	3308      	adds	r3, #8
 80042aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	9801      	ldr	r0, [sp, #4]
 80042b0:	b011      	add	sp, #68	; 0x44
 80042b2:	ecbd 8b02 	vpop	{d8}
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	4b8a      	ldr	r3, [pc, #552]	; (80044e4 <_dtoa_r+0x2d4>)
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	3303      	adds	r3, #3
 80042c0:	e7f3      	b.n	80042aa <_dtoa_r+0x9a>
 80042c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80042c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80042ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ce:	d10c      	bne.n	80042ea <_dtoa_r+0xda>
 80042d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042d2:	2301      	movs	r3, #1
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 84d7 	beq.w	8004c8c <_dtoa_r+0xa7c>
 80042de:	4b83      	ldr	r3, [pc, #524]	; (80044ec <_dtoa_r+0x2dc>)
 80042e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	e7e1      	b.n	80042ae <_dtoa_r+0x9e>
 80042ea:	aa0e      	add	r2, sp, #56	; 0x38
 80042ec:	a90f      	add	r1, sp, #60	; 0x3c
 80042ee:	4630      	mov	r0, r6
 80042f0:	eeb0 0b48 	vmov.f64	d0, d8
 80042f4:	f001 f866 	bl	80053c4 <__d2b>
 80042f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80042fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042fe:	4605      	mov	r5, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d046      	beq.n	8004392 <_dtoa_r+0x182>
 8004304:	eeb0 7b48 	vmov.f64	d7, d8
 8004308:	ee18 1a90 	vmov	r1, s17
 800430c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004310:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004314:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800431c:	2000      	movs	r0, #0
 800431e:	ee07 1a90 	vmov	s15, r1
 8004322:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004326:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80044c0 <_dtoa_r+0x2b0>
 800432a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800432e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80044c8 <_dtoa_r+0x2b8>
 8004332:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004336:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80044d0 <_dtoa_r+0x2c0>
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004342:	eeb0 7b46 	vmov.f64	d7, d6
 8004346:	eea4 7b05 	vfma.f64	d7, d4, d5
 800434a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800434e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	ee16 ba90 	vmov	fp, s13
 800435a:	9009      	str	r0, [sp, #36]	; 0x24
 800435c:	d508      	bpl.n	8004370 <_dtoa_r+0x160>
 800435e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004362:	eeb4 6b47 	vcmp.f64	d6, d7
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	bf18      	it	ne
 800436c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8004370:	f1bb 0f16 	cmp.w	fp, #22
 8004374:	d82b      	bhi.n	80043ce <_dtoa_r+0x1be>
 8004376:	495e      	ldr	r1, [pc, #376]	; (80044f0 <_dtoa_r+0x2e0>)
 8004378:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800437c:	ed91 7b00 	vldr	d7, [r1]
 8004380:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004388:	d501      	bpl.n	800438e <_dtoa_r+0x17e>
 800438a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800438e:	2100      	movs	r1, #0
 8004390:	e01e      	b.n	80043d0 <_dtoa_r+0x1c0>
 8004392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004394:	4413      	add	r3, r2
 8004396:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800439a:	2920      	cmp	r1, #32
 800439c:	bfc1      	itttt	gt
 800439e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80043a2:	408c      	lslgt	r4, r1
 80043a4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80043a8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80043ac:	bfd6      	itet	le
 80043ae:	f1c1 0120 	rsble	r1, r1, #32
 80043b2:	4321      	orrgt	r1, r4
 80043b4:	fa08 f101 	lslle.w	r1, r8, r1
 80043b8:	ee07 1a90 	vmov	s15, r1
 80043bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80043c0:	3b01      	subs	r3, #1
 80043c2:	ee17 1a90 	vmov	r1, s15
 80043c6:	2001      	movs	r0, #1
 80043c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043cc:	e7a7      	b.n	800431e <_dtoa_r+0x10e>
 80043ce:	2101      	movs	r1, #1
 80043d0:	1ad2      	subs	r2, r2, r3
 80043d2:	1e53      	subs	r3, r2, #1
 80043d4:	9305      	str	r3, [sp, #20]
 80043d6:	bf45      	ittet	mi
 80043d8:	f1c2 0301 	rsbmi	r3, r2, #1
 80043dc:	9304      	strmi	r3, [sp, #16]
 80043de:	2300      	movpl	r3, #0
 80043e0:	2300      	movmi	r3, #0
 80043e2:	bf4c      	ite	mi
 80043e4:	9305      	strmi	r3, [sp, #20]
 80043e6:	9304      	strpl	r3, [sp, #16]
 80043e8:	f1bb 0f00 	cmp.w	fp, #0
 80043ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80043ee:	db18      	blt.n	8004422 <_dtoa_r+0x212>
 80043f0:	9b05      	ldr	r3, [sp, #20]
 80043f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80043f6:	445b      	add	r3, fp
 80043f8:	9305      	str	r3, [sp, #20]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9a06      	ldr	r2, [sp, #24]
 80043fe:	2a09      	cmp	r2, #9
 8004400:	d848      	bhi.n	8004494 <_dtoa_r+0x284>
 8004402:	2a05      	cmp	r2, #5
 8004404:	bfc4      	itt	gt
 8004406:	3a04      	subgt	r2, #4
 8004408:	9206      	strgt	r2, [sp, #24]
 800440a:	9a06      	ldr	r2, [sp, #24]
 800440c:	f1a2 0202 	sub.w	r2, r2, #2
 8004410:	bfcc      	ite	gt
 8004412:	2400      	movgt	r4, #0
 8004414:	2401      	movle	r4, #1
 8004416:	2a03      	cmp	r2, #3
 8004418:	d847      	bhi.n	80044aa <_dtoa_r+0x29a>
 800441a:	e8df f002 	tbb	[pc, r2]
 800441e:	2d0b      	.short	0x2d0b
 8004420:	392b      	.short	0x392b
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	2200      	movs	r2, #0
 8004426:	eba3 030b 	sub.w	r3, r3, fp
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	920a      	str	r2, [sp, #40]	; 0x28
 800442e:	f1cb 0300 	rsb	r3, fp, #0
 8004432:	e7e3      	b.n	80043fc <_dtoa_r+0x1ec>
 8004434:	2200      	movs	r2, #0
 8004436:	9207      	str	r2, [sp, #28]
 8004438:	9a08      	ldr	r2, [sp, #32]
 800443a:	2a00      	cmp	r2, #0
 800443c:	dc38      	bgt.n	80044b0 <_dtoa_r+0x2a0>
 800443e:	f04f 0a01 	mov.w	sl, #1
 8004442:	46d1      	mov	r9, sl
 8004444:	4652      	mov	r2, sl
 8004446:	f8cd a020 	str.w	sl, [sp, #32]
 800444a:	69f7      	ldr	r7, [r6, #28]
 800444c:	2100      	movs	r1, #0
 800444e:	2004      	movs	r0, #4
 8004450:	f100 0c14 	add.w	ip, r0, #20
 8004454:	4594      	cmp	ip, r2
 8004456:	d930      	bls.n	80044ba <_dtoa_r+0x2aa>
 8004458:	6079      	str	r1, [r7, #4]
 800445a:	4630      	mov	r0, r6
 800445c:	930d      	str	r3, [sp, #52]	; 0x34
 800445e:	f000 fc8f 	bl	8004d80 <_Balloc>
 8004462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004464:	9001      	str	r0, [sp, #4]
 8004466:	4602      	mov	r2, r0
 8004468:	2800      	cmp	r0, #0
 800446a:	d145      	bne.n	80044f8 <_dtoa_r+0x2e8>
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <_dtoa_r+0x2e4>)
 800446e:	f240 11af 	movw	r1, #431	; 0x1af
 8004472:	e6e5      	b.n	8004240 <_dtoa_r+0x30>
 8004474:	2201      	movs	r2, #1
 8004476:	e7de      	b.n	8004436 <_dtoa_r+0x226>
 8004478:	2200      	movs	r2, #0
 800447a:	9207      	str	r2, [sp, #28]
 800447c:	9a08      	ldr	r2, [sp, #32]
 800447e:	eb0b 0a02 	add.w	sl, fp, r2
 8004482:	f10a 0901 	add.w	r9, sl, #1
 8004486:	464a      	mov	r2, r9
 8004488:	2a01      	cmp	r2, #1
 800448a:	bfb8      	it	lt
 800448c:	2201      	movlt	r2, #1
 800448e:	e7dc      	b.n	800444a <_dtoa_r+0x23a>
 8004490:	2201      	movs	r2, #1
 8004492:	e7f2      	b.n	800447a <_dtoa_r+0x26a>
 8004494:	2401      	movs	r4, #1
 8004496:	2200      	movs	r2, #0
 8004498:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800449c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80044a0:	2100      	movs	r1, #0
 80044a2:	46d1      	mov	r9, sl
 80044a4:	2212      	movs	r2, #18
 80044a6:	9108      	str	r1, [sp, #32]
 80044a8:	e7cf      	b.n	800444a <_dtoa_r+0x23a>
 80044aa:	2201      	movs	r2, #1
 80044ac:	9207      	str	r2, [sp, #28]
 80044ae:	e7f5      	b.n	800449c <_dtoa_r+0x28c>
 80044b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80044b4:	46d1      	mov	r9, sl
 80044b6:	4652      	mov	r2, sl
 80044b8:	e7c7      	b.n	800444a <_dtoa_r+0x23a>
 80044ba:	3101      	adds	r1, #1
 80044bc:	0040      	lsls	r0, r0, #1
 80044be:	e7c7      	b.n	8004450 <_dtoa_r+0x240>
 80044c0:	636f4361 	.word	0x636f4361
 80044c4:	3fd287a7 	.word	0x3fd287a7
 80044c8:	8b60c8b3 	.word	0x8b60c8b3
 80044cc:	3fc68a28 	.word	0x3fc68a28
 80044d0:	509f79fb 	.word	0x509f79fb
 80044d4:	3fd34413 	.word	0x3fd34413
 80044d8:	08036ee9 	.word	0x08036ee9
 80044dc:	08036f00 	.word	0x08036f00
 80044e0:	7ff00000 	.word	0x7ff00000
 80044e4:	08036ee5 	.word	0x08036ee5
 80044e8:	08036edc 	.word	0x08036edc
 80044ec:	08036eb9 	.word	0x08036eb9
 80044f0:	08036ff0 	.word	0x08036ff0
 80044f4:	08036f58 	.word	0x08036f58
 80044f8:	69f2      	ldr	r2, [r6, #28]
 80044fa:	9901      	ldr	r1, [sp, #4]
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	f1b9 0f0e 	cmp.w	r9, #14
 8004502:	d86c      	bhi.n	80045de <_dtoa_r+0x3ce>
 8004504:	2c00      	cmp	r4, #0
 8004506:	d06a      	beq.n	80045de <_dtoa_r+0x3ce>
 8004508:	f1bb 0f00 	cmp.w	fp, #0
 800450c:	f340 80a0 	ble.w	8004650 <_dtoa_r+0x440>
 8004510:	4ac1      	ldr	r2, [pc, #772]	; (8004818 <_dtoa_r+0x608>)
 8004512:	f00b 010f 	and.w	r1, fp, #15
 8004516:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800451a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800451e:	ed92 7b00 	vldr	d7, [r2]
 8004522:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004526:	f000 8087 	beq.w	8004638 <_dtoa_r+0x428>
 800452a:	49bc      	ldr	r1, [pc, #752]	; (800481c <_dtoa_r+0x60c>)
 800452c:	ed91 6b08 	vldr	d6, [r1, #32]
 8004530:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004534:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004538:	f002 020f 	and.w	r2, r2, #15
 800453c:	2103      	movs	r1, #3
 800453e:	48b7      	ldr	r0, [pc, #732]	; (800481c <_dtoa_r+0x60c>)
 8004540:	2a00      	cmp	r2, #0
 8004542:	d17b      	bne.n	800463c <_dtoa_r+0x42c>
 8004544:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004548:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800454c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004552:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004556:	2a00      	cmp	r2, #0
 8004558:	f000 80a0 	beq.w	800469c <_dtoa_r+0x48c>
 800455c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004560:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004568:	f140 8098 	bpl.w	800469c <_dtoa_r+0x48c>
 800456c:	f1b9 0f00 	cmp.w	r9, #0
 8004570:	f000 8094 	beq.w	800469c <_dtoa_r+0x48c>
 8004574:	f1ba 0f00 	cmp.w	sl, #0
 8004578:	dd2f      	ble.n	80045da <_dtoa_r+0x3ca>
 800457a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800457e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004582:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004586:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800458a:	3101      	adds	r1, #1
 800458c:	4654      	mov	r4, sl
 800458e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004592:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004596:	ee07 1a90 	vmov	s15, r1
 800459a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800459e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80045a2:	ee15 7a90 	vmov	r7, s11
 80045a6:	ec51 0b15 	vmov	r0, r1, d5
 80045aa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	d177      	bne.n	80046a2 <_dtoa_r+0x492>
 80045b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80045b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80045ba:	ec41 0b17 	vmov	d7, r0, r1
 80045be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	f300 826a 	bgt.w	8004a9e <_dtoa_r+0x88e>
 80045ca:	eeb1 7b47 	vneg.f64	d7, d7
 80045ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	f100 8260 	bmi.w	8004a9a <_dtoa_r+0x88a>
 80045da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80045de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	f2c0 811d 	blt.w	8004820 <_dtoa_r+0x610>
 80045e6:	f1bb 0f0e 	cmp.w	fp, #14
 80045ea:	f300 8119 	bgt.w	8004820 <_dtoa_r+0x610>
 80045ee:	4b8a      	ldr	r3, [pc, #552]	; (8004818 <_dtoa_r+0x608>)
 80045f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80045f4:	ed93 6b00 	vldr	d6, [r3]
 80045f8:	9b08      	ldr	r3, [sp, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f280 80b7 	bge.w	800476e <_dtoa_r+0x55e>
 8004600:	f1b9 0f00 	cmp.w	r9, #0
 8004604:	f300 80b3 	bgt.w	800476e <_dtoa_r+0x55e>
 8004608:	f040 8246 	bne.w	8004a98 <_dtoa_r+0x888>
 800460c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004610:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004614:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004618:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	464c      	mov	r4, r9
 8004622:	464f      	mov	r7, r9
 8004624:	f280 821c 	bge.w	8004a60 <_dtoa_r+0x850>
 8004628:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800462c:	2331      	movs	r3, #49	; 0x31
 800462e:	f808 3b01 	strb.w	r3, [r8], #1
 8004632:	f10b 0b01 	add.w	fp, fp, #1
 8004636:	e218      	b.n	8004a6a <_dtoa_r+0x85a>
 8004638:	2102      	movs	r1, #2
 800463a:	e780      	b.n	800453e <_dtoa_r+0x32e>
 800463c:	07d4      	lsls	r4, r2, #31
 800463e:	d504      	bpl.n	800464a <_dtoa_r+0x43a>
 8004640:	ed90 6b00 	vldr	d6, [r0]
 8004644:	3101      	adds	r1, #1
 8004646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800464a:	1052      	asrs	r2, r2, #1
 800464c:	3008      	adds	r0, #8
 800464e:	e777      	b.n	8004540 <_dtoa_r+0x330>
 8004650:	d022      	beq.n	8004698 <_dtoa_r+0x488>
 8004652:	f1cb 0200 	rsb	r2, fp, #0
 8004656:	4970      	ldr	r1, [pc, #448]	; (8004818 <_dtoa_r+0x608>)
 8004658:	f002 000f 	and.w	r0, r2, #15
 800465c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004660:	ed91 7b00 	vldr	d7, [r1]
 8004664:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004668:	ed8d 7b02 	vstr	d7, [sp, #8]
 800466c:	486b      	ldr	r0, [pc, #428]	; (800481c <_dtoa_r+0x60c>)
 800466e:	1112      	asrs	r2, r2, #4
 8004670:	2400      	movs	r4, #0
 8004672:	2102      	movs	r1, #2
 8004674:	b92a      	cbnz	r2, 8004682 <_dtoa_r+0x472>
 8004676:	2c00      	cmp	r4, #0
 8004678:	f43f af6a 	beq.w	8004550 <_dtoa_r+0x340>
 800467c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004680:	e766      	b.n	8004550 <_dtoa_r+0x340>
 8004682:	07d7      	lsls	r7, r2, #31
 8004684:	d505      	bpl.n	8004692 <_dtoa_r+0x482>
 8004686:	ed90 6b00 	vldr	d6, [r0]
 800468a:	3101      	adds	r1, #1
 800468c:	2401      	movs	r4, #1
 800468e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004692:	1052      	asrs	r2, r2, #1
 8004694:	3008      	adds	r0, #8
 8004696:	e7ed      	b.n	8004674 <_dtoa_r+0x464>
 8004698:	2102      	movs	r1, #2
 800469a:	e759      	b.n	8004550 <_dtoa_r+0x340>
 800469c:	465a      	mov	r2, fp
 800469e:	464c      	mov	r4, r9
 80046a0:	e775      	b.n	800458e <_dtoa_r+0x37e>
 80046a2:	ec41 0b17 	vmov	d7, r0, r1
 80046a6:	495c      	ldr	r1, [pc, #368]	; (8004818 <_dtoa_r+0x608>)
 80046a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80046ac:	ed11 4b02 	vldr	d4, [r1, #-8]
 80046b0:	9901      	ldr	r1, [sp, #4]
 80046b2:	440c      	add	r4, r1
 80046b4:	9907      	ldr	r1, [sp, #28]
 80046b6:	b351      	cbz	r1, 800470e <_dtoa_r+0x4fe>
 80046b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80046bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80046c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80046c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80046cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80046d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80046d4:	ee14 1a90 	vmov	r1, s9
 80046d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80046dc:	3130      	adds	r1, #48	; 0x30
 80046de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80046e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	f808 1b01 	strb.w	r1, [r8], #1
 80046ee:	d439      	bmi.n	8004764 <_dtoa_r+0x554>
 80046f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80046f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	d472      	bmi.n	80047e4 <_dtoa_r+0x5d4>
 80046fe:	45a0      	cmp	r8, r4
 8004700:	f43f af6b 	beq.w	80045da <_dtoa_r+0x3ca>
 8004704:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004708:	ee26 6b03 	vmul.f64	d6, d6, d3
 800470c:	e7e0      	b.n	80046d0 <_dtoa_r+0x4c0>
 800470e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004712:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004716:	4620      	mov	r0, r4
 8004718:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800471c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004720:	ee14 1a90 	vmov	r1, s9
 8004724:	3130      	adds	r1, #48	; 0x30
 8004726:	f808 1b01 	strb.w	r1, [r8], #1
 800472a:	45a0      	cmp	r8, r4
 800472c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004730:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004734:	d118      	bne.n	8004768 <_dtoa_r+0x558>
 8004736:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800473a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800473e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	dc4d      	bgt.n	80047e4 <_dtoa_r+0x5d4>
 8004748:	ee35 5b47 	vsub.f64	d5, d5, d7
 800474c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	f57f af41 	bpl.w	80045da <_dtoa_r+0x3ca>
 8004758:	4680      	mov	r8, r0
 800475a:	3801      	subs	r0, #1
 800475c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d0f9      	beq.n	8004758 <_dtoa_r+0x548>
 8004764:	4693      	mov	fp, r2
 8004766:	e02a      	b.n	80047be <_dtoa_r+0x5ae>
 8004768:	ee26 6b03 	vmul.f64	d6, d6, d3
 800476c:	e7d6      	b.n	800471c <_dtoa_r+0x50c>
 800476e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004772:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004776:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800477a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800477e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004782:	ee15 3a10 	vmov	r3, s10
 8004786:	3330      	adds	r3, #48	; 0x30
 8004788:	f808 3b01 	strb.w	r3, [r8], #1
 800478c:	9b01      	ldr	r3, [sp, #4]
 800478e:	eba8 0303 	sub.w	r3, r8, r3
 8004792:	4599      	cmp	r9, r3
 8004794:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004798:	eea3 7b46 	vfms.f64	d7, d3, d6
 800479c:	d133      	bne.n	8004806 <_dtoa_r+0x5f6>
 800479e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80047a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	dc1a      	bgt.n	80047e2 <_dtoa_r+0x5d2>
 80047ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	d103      	bne.n	80047be <_dtoa_r+0x5ae>
 80047b6:	ee15 3a10 	vmov	r3, s10
 80047ba:	07d9      	lsls	r1, r3, #31
 80047bc:	d411      	bmi.n	80047e2 <_dtoa_r+0x5d2>
 80047be:	4629      	mov	r1, r5
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 fb1d 	bl	8004e00 <_Bfree>
 80047c6:	2300      	movs	r3, #0
 80047c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ca:	f888 3000 	strb.w	r3, [r8]
 80047ce:	f10b 0301 	add.w	r3, fp, #1
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f43f ad69 	beq.w	80042ae <_dtoa_r+0x9e>
 80047dc:	f8c3 8000 	str.w	r8, [r3]
 80047e0:	e565      	b.n	80042ae <_dtoa_r+0x9e>
 80047e2:	465a      	mov	r2, fp
 80047e4:	4643      	mov	r3, r8
 80047e6:	4698      	mov	r8, r3
 80047e8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80047ec:	2939      	cmp	r1, #57	; 0x39
 80047ee:	d106      	bne.n	80047fe <_dtoa_r+0x5ee>
 80047f0:	9901      	ldr	r1, [sp, #4]
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d1f7      	bne.n	80047e6 <_dtoa_r+0x5d6>
 80047f6:	9801      	ldr	r0, [sp, #4]
 80047f8:	2130      	movs	r1, #48	; 0x30
 80047fa:	3201      	adds	r2, #1
 80047fc:	7001      	strb	r1, [r0, #0]
 80047fe:	7819      	ldrb	r1, [r3, #0]
 8004800:	3101      	adds	r1, #1
 8004802:	7019      	strb	r1, [r3, #0]
 8004804:	e7ae      	b.n	8004764 <_dtoa_r+0x554>
 8004806:	ee27 7b04 	vmul.f64	d7, d7, d4
 800480a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	d1b2      	bne.n	800477a <_dtoa_r+0x56a>
 8004814:	e7d3      	b.n	80047be <_dtoa_r+0x5ae>
 8004816:	bf00      	nop
 8004818:	08036ff0 	.word	0x08036ff0
 800481c:	08036fc8 	.word	0x08036fc8
 8004820:	9907      	ldr	r1, [sp, #28]
 8004822:	2900      	cmp	r1, #0
 8004824:	f000 80d0 	beq.w	80049c8 <_dtoa_r+0x7b8>
 8004828:	9906      	ldr	r1, [sp, #24]
 800482a:	2901      	cmp	r1, #1
 800482c:	f300 80b4 	bgt.w	8004998 <_dtoa_r+0x788>
 8004830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004832:	2900      	cmp	r1, #0
 8004834:	f000 80ac 	beq.w	8004990 <_dtoa_r+0x780>
 8004838:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800483c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004840:	461c      	mov	r4, r3
 8004842:	9309      	str	r3, [sp, #36]	; 0x24
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	4413      	add	r3, r2
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	2101      	movs	r1, #1
 800484e:	4413      	add	r3, r2
 8004850:	4630      	mov	r0, r6
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	f000 fb8a 	bl	8004f6c <__i2b>
 8004858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485a:	4607      	mov	r7, r0
 800485c:	f1b8 0f00 	cmp.w	r8, #0
 8004860:	d00d      	beq.n	800487e <_dtoa_r+0x66e>
 8004862:	9a05      	ldr	r2, [sp, #20]
 8004864:	2a00      	cmp	r2, #0
 8004866:	dd0a      	ble.n	800487e <_dtoa_r+0x66e>
 8004868:	4542      	cmp	r2, r8
 800486a:	9904      	ldr	r1, [sp, #16]
 800486c:	bfa8      	it	ge
 800486e:	4642      	movge	r2, r8
 8004870:	1a89      	subs	r1, r1, r2
 8004872:	9104      	str	r1, [sp, #16]
 8004874:	9905      	ldr	r1, [sp, #20]
 8004876:	eba8 0802 	sub.w	r8, r8, r2
 800487a:	1a8a      	subs	r2, r1, r2
 800487c:	9205      	str	r2, [sp, #20]
 800487e:	b303      	cbz	r3, 80048c2 <_dtoa_r+0x6b2>
 8004880:	9a07      	ldr	r2, [sp, #28]
 8004882:	2a00      	cmp	r2, #0
 8004884:	f000 80a5 	beq.w	80049d2 <_dtoa_r+0x7c2>
 8004888:	2c00      	cmp	r4, #0
 800488a:	dd13      	ble.n	80048b4 <_dtoa_r+0x6a4>
 800488c:	4639      	mov	r1, r7
 800488e:	4622      	mov	r2, r4
 8004890:	4630      	mov	r0, r6
 8004892:	930d      	str	r3, [sp, #52]	; 0x34
 8004894:	f000 fc2a 	bl	80050ec <__pow5mult>
 8004898:	462a      	mov	r2, r5
 800489a:	4601      	mov	r1, r0
 800489c:	4607      	mov	r7, r0
 800489e:	4630      	mov	r0, r6
 80048a0:	f000 fb7a 	bl	8004f98 <__multiply>
 80048a4:	4629      	mov	r1, r5
 80048a6:	9009      	str	r0, [sp, #36]	; 0x24
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 faa9 	bl	8004e00 <_Bfree>
 80048ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048b2:	4615      	mov	r5, r2
 80048b4:	1b1a      	subs	r2, r3, r4
 80048b6:	d004      	beq.n	80048c2 <_dtoa_r+0x6b2>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4630      	mov	r0, r6
 80048bc:	f000 fc16 	bl	80050ec <__pow5mult>
 80048c0:	4605      	mov	r5, r0
 80048c2:	2101      	movs	r1, #1
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 fb51 	bl	8004f6c <__i2b>
 80048ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	f340 8081 	ble.w	80049d6 <_dtoa_r+0x7c6>
 80048d4:	461a      	mov	r2, r3
 80048d6:	4601      	mov	r1, r0
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 fc07 	bl	80050ec <__pow5mult>
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	4604      	mov	r4, r0
 80048e4:	dd7a      	ble.n	80049dc <_dtoa_r+0x7cc>
 80048e6:	2300      	movs	r3, #0
 80048e8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ea:	6922      	ldr	r2, [r4, #16]
 80048ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048f0:	6910      	ldr	r0, [r2, #16]
 80048f2:	f000 faed 	bl	8004ed0 <__hi0bits>
 80048f6:	f1c0 0020 	rsb	r0, r0, #32
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	4418      	add	r0, r3
 80048fe:	f010 001f 	ands.w	r0, r0, #31
 8004902:	f000 8093 	beq.w	8004a2c <_dtoa_r+0x81c>
 8004906:	f1c0 0220 	rsb	r2, r0, #32
 800490a:	2a04      	cmp	r2, #4
 800490c:	f340 8085 	ble.w	8004a1a <_dtoa_r+0x80a>
 8004910:	9b04      	ldr	r3, [sp, #16]
 8004912:	f1c0 001c 	rsb	r0, r0, #28
 8004916:	4403      	add	r3, r0
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	9b05      	ldr	r3, [sp, #20]
 800491c:	4480      	add	r8, r0
 800491e:	4403      	add	r3, r0
 8004920:	9305      	str	r3, [sp, #20]
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	dd05      	ble.n	8004934 <_dtoa_r+0x724>
 8004928:	4629      	mov	r1, r5
 800492a:	461a      	mov	r2, r3
 800492c:	4630      	mov	r0, r6
 800492e:	f000 fc37 	bl	80051a0 <__lshift>
 8004932:	4605      	mov	r5, r0
 8004934:	9b05      	ldr	r3, [sp, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	dd05      	ble.n	8004946 <_dtoa_r+0x736>
 800493a:	4621      	mov	r1, r4
 800493c:	461a      	mov	r2, r3
 800493e:	4630      	mov	r0, r6
 8004940:	f000 fc2e 	bl	80051a0 <__lshift>
 8004944:	4604      	mov	r4, r0
 8004946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d071      	beq.n	8004a30 <_dtoa_r+0x820>
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 fc92 	bl	8005278 <__mcmp>
 8004954:	2800      	cmp	r0, #0
 8004956:	da6b      	bge.n	8004a30 <_dtoa_r+0x820>
 8004958:	2300      	movs	r3, #0
 800495a:	4629      	mov	r1, r5
 800495c:	220a      	movs	r2, #10
 800495e:	4630      	mov	r0, r6
 8004960:	f000 fa70 	bl	8004e44 <__multadd>
 8004964:	9b07      	ldr	r3, [sp, #28]
 8004966:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800496a:	4605      	mov	r5, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8197 	beq.w	8004ca0 <_dtoa_r+0xa90>
 8004972:	4639      	mov	r1, r7
 8004974:	2300      	movs	r3, #0
 8004976:	220a      	movs	r2, #10
 8004978:	4630      	mov	r0, r6
 800497a:	f000 fa63 	bl	8004e44 <__multadd>
 800497e:	f1ba 0f00 	cmp.w	sl, #0
 8004982:	4607      	mov	r7, r0
 8004984:	f300 8093 	bgt.w	8004aae <_dtoa_r+0x89e>
 8004988:	9b06      	ldr	r3, [sp, #24]
 800498a:	2b02      	cmp	r3, #2
 800498c:	dc57      	bgt.n	8004a3e <_dtoa_r+0x82e>
 800498e:	e08e      	b.n	8004aae <_dtoa_r+0x89e>
 8004990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004992:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004996:	e751      	b.n	800483c <_dtoa_r+0x62c>
 8004998:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800499c:	42a3      	cmp	r3, r4
 800499e:	bfbf      	itttt	lt
 80049a0:	1ae2      	sublt	r2, r4, r3
 80049a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049a4:	189b      	addlt	r3, r3, r2
 80049a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049a8:	bfae      	itee	ge
 80049aa:	1b1c      	subge	r4, r3, r4
 80049ac:	4623      	movlt	r3, r4
 80049ae:	2400      	movlt	r4, #0
 80049b0:	f1b9 0f00 	cmp.w	r9, #0
 80049b4:	bfb5      	itete	lt
 80049b6:	9a04      	ldrlt	r2, [sp, #16]
 80049b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80049bc:	eba2 0809 	sublt.w	r8, r2, r9
 80049c0:	464a      	movge	r2, r9
 80049c2:	bfb8      	it	lt
 80049c4:	2200      	movlt	r2, #0
 80049c6:	e73c      	b.n	8004842 <_dtoa_r+0x632>
 80049c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80049cc:	9f07      	ldr	r7, [sp, #28]
 80049ce:	461c      	mov	r4, r3
 80049d0:	e744      	b.n	800485c <_dtoa_r+0x64c>
 80049d2:	461a      	mov	r2, r3
 80049d4:	e770      	b.n	80048b8 <_dtoa_r+0x6a8>
 80049d6:	9b06      	ldr	r3, [sp, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	dc18      	bgt.n	8004a0e <_dtoa_r+0x7fe>
 80049dc:	9b02      	ldr	r3, [sp, #8]
 80049de:	b9b3      	cbnz	r3, 8004a0e <_dtoa_r+0x7fe>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80049e6:	b9a2      	cbnz	r2, 8004a12 <_dtoa_r+0x802>
 80049e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ec:	0d12      	lsrs	r2, r2, #20
 80049ee:	0512      	lsls	r2, r2, #20
 80049f0:	b18a      	cbz	r2, 8004a16 <_dtoa_r+0x806>
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	3301      	adds	r3, #1
 80049f6:	9304      	str	r3, [sp, #16]
 80049f8:	9b05      	ldr	r3, [sp, #20]
 80049fa:	3301      	adds	r3, #1
 80049fc:	9305      	str	r3, [sp, #20]
 80049fe:	2301      	movs	r3, #1
 8004a00:	9309      	str	r3, [sp, #36]	; 0x24
 8004a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f47f af70 	bne.w	80048ea <_dtoa_r+0x6da>
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	e775      	b.n	80048fa <_dtoa_r+0x6ea>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e7f6      	b.n	8004a00 <_dtoa_r+0x7f0>
 8004a12:	9b02      	ldr	r3, [sp, #8]
 8004a14:	e7f4      	b.n	8004a00 <_dtoa_r+0x7f0>
 8004a16:	9209      	str	r2, [sp, #36]	; 0x24
 8004a18:	e7f3      	b.n	8004a02 <_dtoa_r+0x7f2>
 8004a1a:	d082      	beq.n	8004922 <_dtoa_r+0x712>
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	321c      	adds	r2, #28
 8004a20:	4413      	add	r3, r2
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	9b05      	ldr	r3, [sp, #20]
 8004a26:	4490      	add	r8, r2
 8004a28:	4413      	add	r3, r2
 8004a2a:	e779      	b.n	8004920 <_dtoa_r+0x710>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	e7f5      	b.n	8004a1c <_dtoa_r+0x80c>
 8004a30:	f1b9 0f00 	cmp.w	r9, #0
 8004a34:	dc36      	bgt.n	8004aa4 <_dtoa_r+0x894>
 8004a36:	9b06      	ldr	r3, [sp, #24]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	dd33      	ble.n	8004aa4 <_dtoa_r+0x894>
 8004a3c:	46ca      	mov	sl, r9
 8004a3e:	f1ba 0f00 	cmp.w	sl, #0
 8004a42:	d10d      	bne.n	8004a60 <_dtoa_r+0x850>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4653      	mov	r3, sl
 8004a48:	2205      	movs	r2, #5
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 f9fa 	bl	8004e44 <__multadd>
 8004a50:	4601      	mov	r1, r0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 fc0f 	bl	8005278 <__mcmp>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f73f ade4 	bgt.w	8004628 <_dtoa_r+0x418>
 8004a60:	9b08      	ldr	r3, [sp, #32]
 8004a62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a66:	ea6f 0b03 	mvn.w	fp, r3
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f9c5 	bl	8004e00 <_Bfree>
 8004a76:	2f00      	cmp	r7, #0
 8004a78:	f43f aea1 	beq.w	80047be <_dtoa_r+0x5ae>
 8004a7c:	f1b9 0f00 	cmp.w	r9, #0
 8004a80:	d005      	beq.n	8004a8e <_dtoa_r+0x87e>
 8004a82:	45b9      	cmp	r9, r7
 8004a84:	d003      	beq.n	8004a8e <_dtoa_r+0x87e>
 8004a86:	4649      	mov	r1, r9
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f000 f9b9 	bl	8004e00 <_Bfree>
 8004a8e:	4639      	mov	r1, r7
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f9b5 	bl	8004e00 <_Bfree>
 8004a96:	e692      	b.n	80047be <_dtoa_r+0x5ae>
 8004a98:	2400      	movs	r4, #0
 8004a9a:	4627      	mov	r7, r4
 8004a9c:	e7e0      	b.n	8004a60 <_dtoa_r+0x850>
 8004a9e:	4693      	mov	fp, r2
 8004aa0:	4627      	mov	r7, r4
 8004aa2:	e5c1      	b.n	8004628 <_dtoa_r+0x418>
 8004aa4:	9b07      	ldr	r3, [sp, #28]
 8004aa6:	46ca      	mov	sl, r9
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8100 	beq.w	8004cae <_dtoa_r+0xa9e>
 8004aae:	f1b8 0f00 	cmp.w	r8, #0
 8004ab2:	dd05      	ble.n	8004ac0 <_dtoa_r+0x8b0>
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 fb71 	bl	80051a0 <__lshift>
 8004abe:	4607      	mov	r7, r0
 8004ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d05d      	beq.n	8004b82 <_dtoa_r+0x972>
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f959 	bl	8004d80 <_Balloc>
 8004ace:	4680      	mov	r8, r0
 8004ad0:	b928      	cbnz	r0, 8004ade <_dtoa_r+0x8ce>
 8004ad2:	4b82      	ldr	r3, [pc, #520]	; (8004cdc <_dtoa_r+0xacc>)
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004ada:	f7ff bbb1 	b.w	8004240 <_dtoa_r+0x30>
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	3202      	adds	r2, #2
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	f107 010c 	add.w	r1, r7, #12
 8004ae8:	300c      	adds	r0, #12
 8004aea:	f7ff fafa 	bl	80040e2 <memcpy>
 8004aee:	2201      	movs	r2, #1
 8004af0:	4641      	mov	r1, r8
 8004af2:	4630      	mov	r0, r6
 8004af4:	f000 fb54 	bl	80051a0 <__lshift>
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	3301      	adds	r3, #1
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	4453      	add	r3, sl
 8004b02:	9308      	str	r3, [sp, #32]
 8004b04:	9b02      	ldr	r3, [sp, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	46b9      	mov	r9, r7
 8004b0c:	9307      	str	r3, [sp, #28]
 8004b0e:	4607      	mov	r7, r0
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	4621      	mov	r1, r4
 8004b14:	3b01      	subs	r3, #1
 8004b16:	4628      	mov	r0, r5
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	f7ff faf0 	bl	80040fe <quorem>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	3330      	adds	r3, #48	; 0x30
 8004b22:	9005      	str	r0, [sp, #20]
 8004b24:	4649      	mov	r1, r9
 8004b26:	4628      	mov	r0, r5
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	f000 fba5 	bl	8005278 <__mcmp>
 8004b2e:	463a      	mov	r2, r7
 8004b30:	4682      	mov	sl, r0
 8004b32:	4621      	mov	r1, r4
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 fbbb 	bl	80052b0 <__mdiff>
 8004b3a:	68c2      	ldr	r2, [r0, #12]
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	4680      	mov	r8, r0
 8004b40:	bb0a      	cbnz	r2, 8004b86 <_dtoa_r+0x976>
 8004b42:	4601      	mov	r1, r0
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 fb97 	bl	8005278 <__mcmp>
 8004b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4641      	mov	r1, r8
 8004b50:	4630      	mov	r0, r6
 8004b52:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8004b56:	f000 f953 	bl	8004e00 <_Bfree>
 8004b5a:	9b06      	ldr	r3, [sp, #24]
 8004b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b5e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004b62:	ea43 0102 	orr.w	r1, r3, r2
 8004b66:	9b07      	ldr	r3, [sp, #28]
 8004b68:	4319      	orrs	r1, r3
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	d10d      	bne.n	8004b8a <_dtoa_r+0x97a>
 8004b6e:	2b39      	cmp	r3, #57	; 0x39
 8004b70:	d029      	beq.n	8004bc6 <_dtoa_r+0x9b6>
 8004b72:	f1ba 0f00 	cmp.w	sl, #0
 8004b76:	dd01      	ble.n	8004b7c <_dtoa_r+0x96c>
 8004b78:	9b05      	ldr	r3, [sp, #20]
 8004b7a:	3331      	adds	r3, #49	; 0x31
 8004b7c:	9a02      	ldr	r2, [sp, #8]
 8004b7e:	7013      	strb	r3, [r2, #0]
 8004b80:	e775      	b.n	8004a6e <_dtoa_r+0x85e>
 8004b82:	4638      	mov	r0, r7
 8004b84:	e7b8      	b.n	8004af8 <_dtoa_r+0x8e8>
 8004b86:	2201      	movs	r2, #1
 8004b88:	e7e1      	b.n	8004b4e <_dtoa_r+0x93e>
 8004b8a:	f1ba 0f00 	cmp.w	sl, #0
 8004b8e:	db06      	blt.n	8004b9e <_dtoa_r+0x98e>
 8004b90:	9906      	ldr	r1, [sp, #24]
 8004b92:	ea41 0a0a 	orr.w	sl, r1, sl
 8004b96:	9907      	ldr	r1, [sp, #28]
 8004b98:	ea5a 0a01 	orrs.w	sl, sl, r1
 8004b9c:	d120      	bne.n	8004be0 <_dtoa_r+0x9d0>
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	ddec      	ble.n	8004b7c <_dtoa_r+0x96c>
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	9304      	str	r3, [sp, #16]
 8004baa:	f000 faf9 	bl	80051a0 <__lshift>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	f000 fb61 	bl	8005278 <__mcmp>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	9b04      	ldr	r3, [sp, #16]
 8004bba:	dc02      	bgt.n	8004bc2 <_dtoa_r+0x9b2>
 8004bbc:	d1de      	bne.n	8004b7c <_dtoa_r+0x96c>
 8004bbe:	07da      	lsls	r2, r3, #31
 8004bc0:	d5dc      	bpl.n	8004b7c <_dtoa_r+0x96c>
 8004bc2:	2b39      	cmp	r3, #57	; 0x39
 8004bc4:	d1d8      	bne.n	8004b78 <_dtoa_r+0x968>
 8004bc6:	9a02      	ldr	r2, [sp, #8]
 8004bc8:	2339      	movs	r3, #57	; 0x39
 8004bca:	7013      	strb	r3, [r2, #0]
 8004bcc:	4643      	mov	r3, r8
 8004bce:	4698      	mov	r8, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004bd6:	2a39      	cmp	r2, #57	; 0x39
 8004bd8:	d051      	beq.n	8004c7e <_dtoa_r+0xa6e>
 8004bda:	3201      	adds	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e746      	b.n	8004a6e <_dtoa_r+0x85e>
 8004be0:	2a00      	cmp	r2, #0
 8004be2:	dd03      	ble.n	8004bec <_dtoa_r+0x9dc>
 8004be4:	2b39      	cmp	r3, #57	; 0x39
 8004be6:	d0ee      	beq.n	8004bc6 <_dtoa_r+0x9b6>
 8004be8:	3301      	adds	r3, #1
 8004bea:	e7c7      	b.n	8004b7c <_dtoa_r+0x96c>
 8004bec:	9a04      	ldr	r2, [sp, #16]
 8004bee:	9908      	ldr	r1, [sp, #32]
 8004bf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004bf4:	428a      	cmp	r2, r1
 8004bf6:	d02b      	beq.n	8004c50 <_dtoa_r+0xa40>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f920 	bl	8004e44 <__multadd>
 8004c04:	45b9      	cmp	r9, r7
 8004c06:	4605      	mov	r5, r0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	f04f 020a 	mov.w	r2, #10
 8004c10:	4649      	mov	r1, r9
 8004c12:	4630      	mov	r0, r6
 8004c14:	d107      	bne.n	8004c26 <_dtoa_r+0xa16>
 8004c16:	f000 f915 	bl	8004e44 <__multadd>
 8004c1a:	4681      	mov	r9, r0
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	9304      	str	r3, [sp, #16]
 8004c24:	e774      	b.n	8004b10 <_dtoa_r+0x900>
 8004c26:	f000 f90d 	bl	8004e44 <__multadd>
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	4681      	mov	r9, r0
 8004c2e:	2300      	movs	r3, #0
 8004c30:	220a      	movs	r2, #10
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f906 	bl	8004e44 <__multadd>
 8004c38:	4607      	mov	r7, r0
 8004c3a:	e7f0      	b.n	8004c1e <_dtoa_r+0xa0e>
 8004c3c:	f1ba 0f00 	cmp.w	sl, #0
 8004c40:	9a01      	ldr	r2, [sp, #4]
 8004c42:	bfcc      	ite	gt
 8004c44:	46d0      	movgt	r8, sl
 8004c46:	f04f 0801 	movle.w	r8, #1
 8004c4a:	4490      	add	r8, r2
 8004c4c:	f04f 0900 	mov.w	r9, #0
 8004c50:	4629      	mov	r1, r5
 8004c52:	2201      	movs	r2, #1
 8004c54:	4630      	mov	r0, r6
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	f000 faa2 	bl	80051a0 <__lshift>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4605      	mov	r5, r0
 8004c60:	f000 fb0a 	bl	8005278 <__mcmp>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dcb1      	bgt.n	8004bcc <_dtoa_r+0x9bc>
 8004c68:	d102      	bne.n	8004c70 <_dtoa_r+0xa60>
 8004c6a:	9b02      	ldr	r3, [sp, #8]
 8004c6c:	07db      	lsls	r3, r3, #31
 8004c6e:	d4ad      	bmi.n	8004bcc <_dtoa_r+0x9bc>
 8004c70:	4643      	mov	r3, r8
 8004c72:	4698      	mov	r8, r3
 8004c74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c78:	2a30      	cmp	r2, #48	; 0x30
 8004c7a:	d0fa      	beq.n	8004c72 <_dtoa_r+0xa62>
 8004c7c:	e6f7      	b.n	8004a6e <_dtoa_r+0x85e>
 8004c7e:	9a01      	ldr	r2, [sp, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1a4      	bne.n	8004bce <_dtoa_r+0x9be>
 8004c84:	f10b 0b01 	add.w	fp, fp, #1
 8004c88:	2331      	movs	r3, #49	; 0x31
 8004c8a:	e778      	b.n	8004b7e <_dtoa_r+0x96e>
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <_dtoa_r+0xad0>)
 8004c8e:	f7ff bb2a 	b.w	80042e6 <_dtoa_r+0xd6>
 8004c92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f47f ab05 	bne.w	80042a4 <_dtoa_r+0x94>
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <_dtoa_r+0xad4>)
 8004c9c:	f7ff bb23 	b.w	80042e6 <_dtoa_r+0xd6>
 8004ca0:	f1ba 0f00 	cmp.w	sl, #0
 8004ca4:	dc03      	bgt.n	8004cae <_dtoa_r+0xa9e>
 8004ca6:	9b06      	ldr	r3, [sp, #24]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	f73f aec8 	bgt.w	8004a3e <_dtoa_r+0x82e>
 8004cae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f7ff fa22 	bl	80040fe <quorem>
 8004cba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004cbe:	f808 3b01 	strb.w	r3, [r8], #1
 8004cc2:	9a01      	ldr	r2, [sp, #4]
 8004cc4:	eba8 0202 	sub.w	r2, r8, r2
 8004cc8:	4592      	cmp	sl, r2
 8004cca:	ddb7      	ble.n	8004c3c <_dtoa_r+0xa2c>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	2300      	movs	r3, #0
 8004cd0:	220a      	movs	r2, #10
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f000 f8b6 	bl	8004e44 <__multadd>
 8004cd8:	4605      	mov	r5, r0
 8004cda:	e7ea      	b.n	8004cb2 <_dtoa_r+0xaa2>
 8004cdc:	08036f58 	.word	0x08036f58
 8004ce0:	08036eb8 	.word	0x08036eb8
 8004ce4:	08036edc 	.word	0x08036edc

08004ce8 <_free_r>:
 8004ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cea:	2900      	cmp	r1, #0
 8004cec:	d044      	beq.n	8004d78 <_free_r+0x90>
 8004cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf2:	9001      	str	r0, [sp, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cfa:	bfb8      	it	lt
 8004cfc:	18e4      	addlt	r4, r4, r3
 8004cfe:	f7fe fb11 	bl	8003324 <__malloc_lock>
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <_free_r+0x94>)
 8004d04:	9801      	ldr	r0, [sp, #4]
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	b933      	cbnz	r3, 8004d18 <_free_r+0x30>
 8004d0a:	6063      	str	r3, [r4, #4]
 8004d0c:	6014      	str	r4, [r2, #0]
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d14:	f7fe bb0c 	b.w	8003330 <__malloc_unlock>
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d908      	bls.n	8004d2e <_free_r+0x46>
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	1961      	adds	r1, r4, r5
 8004d20:	428b      	cmp	r3, r1
 8004d22:	bf01      	itttt	eq
 8004d24:	6819      	ldreq	r1, [r3, #0]
 8004d26:	685b      	ldreq	r3, [r3, #4]
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	e7ed      	b.n	8004d0a <_free_r+0x22>
 8004d2e:	461a      	mov	r2, r3
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b10b      	cbz	r3, 8004d38 <_free_r+0x50>
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d9fa      	bls.n	8004d2e <_free_r+0x46>
 8004d38:	6811      	ldr	r1, [r2, #0]
 8004d3a:	1855      	adds	r5, r2, r1
 8004d3c:	42a5      	cmp	r5, r4
 8004d3e:	d10b      	bne.n	8004d58 <_free_r+0x70>
 8004d40:	6824      	ldr	r4, [r4, #0]
 8004d42:	4421      	add	r1, r4
 8004d44:	1854      	adds	r4, r2, r1
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	d1e0      	bne.n	8004d0e <_free_r+0x26>
 8004d4c:	681c      	ldr	r4, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	6053      	str	r3, [r2, #4]
 8004d52:	440c      	add	r4, r1
 8004d54:	6014      	str	r4, [r2, #0]
 8004d56:	e7da      	b.n	8004d0e <_free_r+0x26>
 8004d58:	d902      	bls.n	8004d60 <_free_r+0x78>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6003      	str	r3, [r0, #0]
 8004d5e:	e7d6      	b.n	8004d0e <_free_r+0x26>
 8004d60:	6825      	ldr	r5, [r4, #0]
 8004d62:	1961      	adds	r1, r4, r5
 8004d64:	428b      	cmp	r3, r1
 8004d66:	bf04      	itt	eq
 8004d68:	6819      	ldreq	r1, [r3, #0]
 8004d6a:	685b      	ldreq	r3, [r3, #4]
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	bf04      	itt	eq
 8004d70:	1949      	addeq	r1, r1, r5
 8004d72:	6021      	streq	r1, [r4, #0]
 8004d74:	6054      	str	r4, [r2, #4]
 8004d76:	e7ca      	b.n	8004d0e <_free_r+0x26>
 8004d78:	b003      	add	sp, #12
 8004d7a:	bd30      	pop	{r4, r5, pc}
 8004d7c:	24001164 	.word	0x24001164

08004d80 <_Balloc>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	69c6      	ldr	r6, [r0, #28]
 8004d84:	4604      	mov	r4, r0
 8004d86:	460d      	mov	r5, r1
 8004d88:	b976      	cbnz	r6, 8004da8 <_Balloc+0x28>
 8004d8a:	2010      	movs	r0, #16
 8004d8c:	f7fe fa22 	bl	80031d4 <malloc>
 8004d90:	4602      	mov	r2, r0
 8004d92:	61e0      	str	r0, [r4, #28]
 8004d94:	b920      	cbnz	r0, 8004da0 <_Balloc+0x20>
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <_Balloc+0x78>)
 8004d98:	4818      	ldr	r0, [pc, #96]	; (8004dfc <_Balloc+0x7c>)
 8004d9a:	216b      	movs	r1, #107	; 0x6b
 8004d9c:	f000 fde2 	bl	8005964 <__assert_func>
 8004da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004da4:	6006      	str	r6, [r0, #0]
 8004da6:	60c6      	str	r6, [r0, #12]
 8004da8:	69e6      	ldr	r6, [r4, #28]
 8004daa:	68f3      	ldr	r3, [r6, #12]
 8004dac:	b183      	cbz	r3, 8004dd0 <_Balloc+0x50>
 8004dae:	69e3      	ldr	r3, [r4, #28]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004db6:	b9b8      	cbnz	r0, 8004de8 <_Balloc+0x68>
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f605 	lsl.w	r6, r1, r5
 8004dbe:	1d72      	adds	r2, r6, #5
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 fdec 	bl	80059a0 <_calloc_r>
 8004dc8:	b160      	cbz	r0, 8004de4 <_Balloc+0x64>
 8004dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dce:	e00e      	b.n	8004dee <_Balloc+0x6e>
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 fde3 	bl	80059a0 <_calloc_r>
 8004dda:	69e3      	ldr	r3, [r4, #28]
 8004ddc:	60f0      	str	r0, [r6, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e4      	bne.n	8004dae <_Balloc+0x2e>
 8004de4:	2000      	movs	r0, #0
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	6802      	ldr	r2, [r0, #0]
 8004dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004dee:	2300      	movs	r3, #0
 8004df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004df4:	e7f7      	b.n	8004de6 <_Balloc+0x66>
 8004df6:	bf00      	nop
 8004df8:	08036ee9 	.word	0x08036ee9
 8004dfc:	08036f69 	.word	0x08036f69

08004e00 <_Bfree>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	69c6      	ldr	r6, [r0, #28]
 8004e04:	4605      	mov	r5, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	b976      	cbnz	r6, 8004e28 <_Bfree+0x28>
 8004e0a:	2010      	movs	r0, #16
 8004e0c:	f7fe f9e2 	bl	80031d4 <malloc>
 8004e10:	4602      	mov	r2, r0
 8004e12:	61e8      	str	r0, [r5, #28]
 8004e14:	b920      	cbnz	r0, 8004e20 <_Bfree+0x20>
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <_Bfree+0x3c>)
 8004e18:	4809      	ldr	r0, [pc, #36]	; (8004e40 <_Bfree+0x40>)
 8004e1a:	218f      	movs	r1, #143	; 0x8f
 8004e1c:	f000 fda2 	bl	8005964 <__assert_func>
 8004e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e24:	6006      	str	r6, [r0, #0]
 8004e26:	60c6      	str	r6, [r0, #12]
 8004e28:	b13c      	cbz	r4, 8004e3a <_Bfree+0x3a>
 8004e2a:	69eb      	ldr	r3, [r5, #28]
 8004e2c:	6862      	ldr	r2, [r4, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e34:	6021      	str	r1, [r4, #0]
 8004e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	08036ee9 	.word	0x08036ee9
 8004e40:	08036f69 	.word	0x08036f69

08004e44 <__multadd>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	690d      	ldr	r5, [r1, #16]
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	461e      	mov	r6, r3
 8004e50:	f101 0c14 	add.w	ip, r1, #20
 8004e54:	2000      	movs	r0, #0
 8004e56:	f8dc 3000 	ldr.w	r3, [ip]
 8004e5a:	b299      	uxth	r1, r3
 8004e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e60:	0c1e      	lsrs	r6, r3, #16
 8004e62:	0c0b      	lsrs	r3, r1, #16
 8004e64:	fb02 3306 	mla	r3, r2, r6, r3
 8004e68:	b289      	uxth	r1, r1
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e70:	4285      	cmp	r5, r0
 8004e72:	f84c 1b04 	str.w	r1, [ip], #4
 8004e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e7a:	dcec      	bgt.n	8004e56 <__multadd+0x12>
 8004e7c:	b30e      	cbz	r6, 8004ec2 <__multadd+0x7e>
 8004e7e:	68a3      	ldr	r3, [r4, #8]
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc19      	bgt.n	8004eb8 <__multadd+0x74>
 8004e84:	6861      	ldr	r1, [r4, #4]
 8004e86:	4638      	mov	r0, r7
 8004e88:	3101      	adds	r1, #1
 8004e8a:	f7ff ff79 	bl	8004d80 <_Balloc>
 8004e8e:	4680      	mov	r8, r0
 8004e90:	b928      	cbnz	r0, 8004e9e <__multadd+0x5a>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <__multadd+0x84>)
 8004e96:	480d      	ldr	r0, [pc, #52]	; (8004ecc <__multadd+0x88>)
 8004e98:	21ba      	movs	r1, #186	; 0xba
 8004e9a:	f000 fd63 	bl	8005964 <__assert_func>
 8004e9e:	6922      	ldr	r2, [r4, #16]
 8004ea0:	3202      	adds	r2, #2
 8004ea2:	f104 010c 	add.w	r1, r4, #12
 8004ea6:	0092      	lsls	r2, r2, #2
 8004ea8:	300c      	adds	r0, #12
 8004eaa:	f7ff f91a 	bl	80040e2 <memcpy>
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff ffa5 	bl	8004e00 <_Bfree>
 8004eb6:	4644      	mov	r4, r8
 8004eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	615e      	str	r6, [r3, #20]
 8004ec0:	6125      	str	r5, [r4, #16]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	08036f58 	.word	0x08036f58
 8004ecc:	08036f69 	.word	0x08036f69

08004ed0 <__hi0bits>:
 8004ed0:	0c03      	lsrs	r3, r0, #16
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	b9d3      	cbnz	r3, 8004f0c <__hi0bits+0x3c>
 8004ed6:	0400      	lsls	r0, r0, #16
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004ede:	bf04      	itt	eq
 8004ee0:	0200      	lsleq	r0, r0, #8
 8004ee2:	3308      	addeq	r3, #8
 8004ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004ee8:	bf04      	itt	eq
 8004eea:	0100      	lsleq	r0, r0, #4
 8004eec:	3304      	addeq	r3, #4
 8004eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ef2:	bf04      	itt	eq
 8004ef4:	0080      	lsleq	r0, r0, #2
 8004ef6:	3302      	addeq	r3, #2
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	db05      	blt.n	8004f08 <__hi0bits+0x38>
 8004efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f00:	f103 0301 	add.w	r3, r3, #1
 8004f04:	bf08      	it	eq
 8004f06:	2320      	moveq	r3, #32
 8004f08:	4618      	mov	r0, r3
 8004f0a:	4770      	bx	lr
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e7e4      	b.n	8004eda <__hi0bits+0xa>

08004f10 <__lo0bits>:
 8004f10:	6803      	ldr	r3, [r0, #0]
 8004f12:	f013 0207 	ands.w	r2, r3, #7
 8004f16:	d00c      	beq.n	8004f32 <__lo0bits+0x22>
 8004f18:	07d9      	lsls	r1, r3, #31
 8004f1a:	d422      	bmi.n	8004f62 <__lo0bits+0x52>
 8004f1c:	079a      	lsls	r2, r3, #30
 8004f1e:	bf49      	itett	mi
 8004f20:	085b      	lsrmi	r3, r3, #1
 8004f22:	089b      	lsrpl	r3, r3, #2
 8004f24:	6003      	strmi	r3, [r0, #0]
 8004f26:	2201      	movmi	r2, #1
 8004f28:	bf5c      	itt	pl
 8004f2a:	6003      	strpl	r3, [r0, #0]
 8004f2c:	2202      	movpl	r2, #2
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4770      	bx	lr
 8004f32:	b299      	uxth	r1, r3
 8004f34:	b909      	cbnz	r1, 8004f3a <__lo0bits+0x2a>
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	2210      	movs	r2, #16
 8004f3a:	b2d9      	uxtb	r1, r3
 8004f3c:	b909      	cbnz	r1, 8004f42 <__lo0bits+0x32>
 8004f3e:	3208      	adds	r2, #8
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	0719      	lsls	r1, r3, #28
 8004f44:	bf04      	itt	eq
 8004f46:	091b      	lsreq	r3, r3, #4
 8004f48:	3204      	addeq	r2, #4
 8004f4a:	0799      	lsls	r1, r3, #30
 8004f4c:	bf04      	itt	eq
 8004f4e:	089b      	lsreq	r3, r3, #2
 8004f50:	3202      	addeq	r2, #2
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	d403      	bmi.n	8004f5e <__lo0bits+0x4e>
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	f102 0201 	add.w	r2, r2, #1
 8004f5c:	d003      	beq.n	8004f66 <__lo0bits+0x56>
 8004f5e:	6003      	str	r3, [r0, #0]
 8004f60:	e7e5      	b.n	8004f2e <__lo0bits+0x1e>
 8004f62:	2200      	movs	r2, #0
 8004f64:	e7e3      	b.n	8004f2e <__lo0bits+0x1e>
 8004f66:	2220      	movs	r2, #32
 8004f68:	e7e1      	b.n	8004f2e <__lo0bits+0x1e>
	...

08004f6c <__i2b>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	460c      	mov	r4, r1
 8004f70:	2101      	movs	r1, #1
 8004f72:	f7ff ff05 	bl	8004d80 <_Balloc>
 8004f76:	4602      	mov	r2, r0
 8004f78:	b928      	cbnz	r0, 8004f86 <__i2b+0x1a>
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <__i2b+0x24>)
 8004f7c:	4805      	ldr	r0, [pc, #20]	; (8004f94 <__i2b+0x28>)
 8004f7e:	f240 1145 	movw	r1, #325	; 0x145
 8004f82:	f000 fcef 	bl	8005964 <__assert_func>
 8004f86:	2301      	movs	r3, #1
 8004f88:	6144      	str	r4, [r0, #20]
 8004f8a:	6103      	str	r3, [r0, #16]
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	bf00      	nop
 8004f90:	08036f58 	.word	0x08036f58
 8004f94:	08036f69 	.word	0x08036f69

08004f98 <__multiply>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	690a      	ldr	r2, [r1, #16]
 8004fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	bfb8      	it	lt
 8004fa8:	460b      	movlt	r3, r1
 8004faa:	460c      	mov	r4, r1
 8004fac:	bfbc      	itt	lt
 8004fae:	464c      	movlt	r4, r9
 8004fb0:	4699      	movlt	r9, r3
 8004fb2:	6927      	ldr	r7, [r4, #16]
 8004fb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fb8:	68a3      	ldr	r3, [r4, #8]
 8004fba:	6861      	ldr	r1, [r4, #4]
 8004fbc:	eb07 060a 	add.w	r6, r7, sl
 8004fc0:	42b3      	cmp	r3, r6
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	bfb8      	it	lt
 8004fc6:	3101      	addlt	r1, #1
 8004fc8:	f7ff feda 	bl	8004d80 <_Balloc>
 8004fcc:	b930      	cbnz	r0, 8004fdc <__multiply+0x44>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <__multiply+0x14c>)
 8004fd2:	4845      	ldr	r0, [pc, #276]	; (80050e8 <__multiply+0x150>)
 8004fd4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004fd8:	f000 fcc4 	bl	8005964 <__assert_func>
 8004fdc:	f100 0514 	add.w	r5, r0, #20
 8004fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4543      	cmp	r3, r8
 8004fea:	d321      	bcc.n	8005030 <__multiply+0x98>
 8004fec:	f104 0314 	add.w	r3, r4, #20
 8004ff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ff4:	f109 0314 	add.w	r3, r9, #20
 8004ff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ffc:	9202      	str	r2, [sp, #8]
 8004ffe:	1b3a      	subs	r2, r7, r4
 8005000:	3a15      	subs	r2, #21
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	3204      	adds	r2, #4
 8005008:	f104 0115 	add.w	r1, r4, #21
 800500c:	428f      	cmp	r7, r1
 800500e:	bf38      	it	cc
 8005010:	2204      	movcc	r2, #4
 8005012:	9201      	str	r2, [sp, #4]
 8005014:	9a02      	ldr	r2, [sp, #8]
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d80c      	bhi.n	8005036 <__multiply+0x9e>
 800501c:	2e00      	cmp	r6, #0
 800501e:	dd03      	ble.n	8005028 <__multiply+0x90>
 8005020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05b      	beq.n	80050e0 <__multiply+0x148>
 8005028:	6106      	str	r6, [r0, #16]
 800502a:	b005      	add	sp, #20
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	f843 2b04 	str.w	r2, [r3], #4
 8005034:	e7d8      	b.n	8004fe8 <__multiply+0x50>
 8005036:	f8b3 a000 	ldrh.w	sl, [r3]
 800503a:	f1ba 0f00 	cmp.w	sl, #0
 800503e:	d024      	beq.n	800508a <__multiply+0xf2>
 8005040:	f104 0e14 	add.w	lr, r4, #20
 8005044:	46a9      	mov	r9, r5
 8005046:	f04f 0c00 	mov.w	ip, #0
 800504a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800504e:	f8d9 1000 	ldr.w	r1, [r9]
 8005052:	fa1f fb82 	uxth.w	fp, r2
 8005056:	b289      	uxth	r1, r1
 8005058:	fb0a 110b 	mla	r1, sl, fp, r1
 800505c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005060:	f8d9 2000 	ldr.w	r2, [r9]
 8005064:	4461      	add	r1, ip
 8005066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800506a:	fb0a c20b 	mla	r2, sl, fp, ip
 800506e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005072:	b289      	uxth	r1, r1
 8005074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005078:	4577      	cmp	r7, lr
 800507a:	f849 1b04 	str.w	r1, [r9], #4
 800507e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005082:	d8e2      	bhi.n	800504a <__multiply+0xb2>
 8005084:	9a01      	ldr	r2, [sp, #4]
 8005086:	f845 c002 	str.w	ip, [r5, r2]
 800508a:	9a03      	ldr	r2, [sp, #12]
 800508c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005090:	3304      	adds	r3, #4
 8005092:	f1b9 0f00 	cmp.w	r9, #0
 8005096:	d021      	beq.n	80050dc <__multiply+0x144>
 8005098:	6829      	ldr	r1, [r5, #0]
 800509a:	f104 0c14 	add.w	ip, r4, #20
 800509e:	46ae      	mov	lr, r5
 80050a0:	f04f 0a00 	mov.w	sl, #0
 80050a4:	f8bc b000 	ldrh.w	fp, [ip]
 80050a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050ac:	fb09 220b 	mla	r2, r9, fp, r2
 80050b0:	4452      	add	r2, sl
 80050b2:	b289      	uxth	r1, r1
 80050b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050b8:	f84e 1b04 	str.w	r1, [lr], #4
 80050bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80050c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050c4:	f8be 1000 	ldrh.w	r1, [lr]
 80050c8:	fb09 110a 	mla	r1, r9, sl, r1
 80050cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80050d0:	4567      	cmp	r7, ip
 80050d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050d6:	d8e5      	bhi.n	80050a4 <__multiply+0x10c>
 80050d8:	9a01      	ldr	r2, [sp, #4]
 80050da:	50a9      	str	r1, [r5, r2]
 80050dc:	3504      	adds	r5, #4
 80050de:	e799      	b.n	8005014 <__multiply+0x7c>
 80050e0:	3e01      	subs	r6, #1
 80050e2:	e79b      	b.n	800501c <__multiply+0x84>
 80050e4:	08036f58 	.word	0x08036f58
 80050e8:	08036f69 	.word	0x08036f69

080050ec <__pow5mult>:
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f0:	4615      	mov	r5, r2
 80050f2:	f012 0203 	ands.w	r2, r2, #3
 80050f6:	4606      	mov	r6, r0
 80050f8:	460f      	mov	r7, r1
 80050fa:	d007      	beq.n	800510c <__pow5mult+0x20>
 80050fc:	4c25      	ldr	r4, [pc, #148]	; (8005194 <__pow5mult+0xa8>)
 80050fe:	3a01      	subs	r2, #1
 8005100:	2300      	movs	r3, #0
 8005102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005106:	f7ff fe9d 	bl	8004e44 <__multadd>
 800510a:	4607      	mov	r7, r0
 800510c:	10ad      	asrs	r5, r5, #2
 800510e:	d03d      	beq.n	800518c <__pow5mult+0xa0>
 8005110:	69f4      	ldr	r4, [r6, #28]
 8005112:	b97c      	cbnz	r4, 8005134 <__pow5mult+0x48>
 8005114:	2010      	movs	r0, #16
 8005116:	f7fe f85d 	bl	80031d4 <malloc>
 800511a:	4602      	mov	r2, r0
 800511c:	61f0      	str	r0, [r6, #28]
 800511e:	b928      	cbnz	r0, 800512c <__pow5mult+0x40>
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <__pow5mult+0xac>)
 8005122:	481e      	ldr	r0, [pc, #120]	; (800519c <__pow5mult+0xb0>)
 8005124:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005128:	f000 fc1c 	bl	8005964 <__assert_func>
 800512c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005130:	6004      	str	r4, [r0, #0]
 8005132:	60c4      	str	r4, [r0, #12]
 8005134:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800513c:	b94c      	cbnz	r4, 8005152 <__pow5mult+0x66>
 800513e:	f240 2171 	movw	r1, #625	; 0x271
 8005142:	4630      	mov	r0, r6
 8005144:	f7ff ff12 	bl	8004f6c <__i2b>
 8005148:	2300      	movs	r3, #0
 800514a:	f8c8 0008 	str.w	r0, [r8, #8]
 800514e:	4604      	mov	r4, r0
 8005150:	6003      	str	r3, [r0, #0]
 8005152:	f04f 0900 	mov.w	r9, #0
 8005156:	07eb      	lsls	r3, r5, #31
 8005158:	d50a      	bpl.n	8005170 <__pow5mult+0x84>
 800515a:	4639      	mov	r1, r7
 800515c:	4622      	mov	r2, r4
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ff1a 	bl	8004f98 <__multiply>
 8005164:	4639      	mov	r1, r7
 8005166:	4680      	mov	r8, r0
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff fe49 	bl	8004e00 <_Bfree>
 800516e:	4647      	mov	r7, r8
 8005170:	106d      	asrs	r5, r5, #1
 8005172:	d00b      	beq.n	800518c <__pow5mult+0xa0>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	b938      	cbnz	r0, 8005188 <__pow5mult+0x9c>
 8005178:	4622      	mov	r2, r4
 800517a:	4621      	mov	r1, r4
 800517c:	4630      	mov	r0, r6
 800517e:	f7ff ff0b 	bl	8004f98 <__multiply>
 8005182:	6020      	str	r0, [r4, #0]
 8005184:	f8c0 9000 	str.w	r9, [r0]
 8005188:	4604      	mov	r4, r0
 800518a:	e7e4      	b.n	8005156 <__pow5mult+0x6a>
 800518c:	4638      	mov	r0, r7
 800518e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005192:	bf00      	nop
 8005194:	080370b8 	.word	0x080370b8
 8005198:	08036ee9 	.word	0x08036ee9
 800519c:	08036f69 	.word	0x08036f69

080051a0 <__lshift>:
 80051a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	6849      	ldr	r1, [r1, #4]
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	4607      	mov	r7, r0
 80051b2:	4691      	mov	r9, r2
 80051b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051b8:	f108 0601 	add.w	r6, r8, #1
 80051bc:	42b3      	cmp	r3, r6
 80051be:	db0b      	blt.n	80051d8 <__lshift+0x38>
 80051c0:	4638      	mov	r0, r7
 80051c2:	f7ff fddd 	bl	8004d80 <_Balloc>
 80051c6:	4605      	mov	r5, r0
 80051c8:	b948      	cbnz	r0, 80051de <__lshift+0x3e>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <__lshift+0xd0>)
 80051ce:	4829      	ldr	r0, [pc, #164]	; (8005274 <__lshift+0xd4>)
 80051d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80051d4:	f000 fbc6 	bl	8005964 <__assert_func>
 80051d8:	3101      	adds	r1, #1
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	e7ee      	b.n	80051bc <__lshift+0x1c>
 80051de:	2300      	movs	r3, #0
 80051e0:	f100 0114 	add.w	r1, r0, #20
 80051e4:	f100 0210 	add.w	r2, r0, #16
 80051e8:	4618      	mov	r0, r3
 80051ea:	4553      	cmp	r3, sl
 80051ec:	db33      	blt.n	8005256 <__lshift+0xb6>
 80051ee:	6920      	ldr	r0, [r4, #16]
 80051f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051f4:	f104 0314 	add.w	r3, r4, #20
 80051f8:	f019 091f 	ands.w	r9, r9, #31
 80051fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005200:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005204:	d02b      	beq.n	800525e <__lshift+0xbe>
 8005206:	f1c9 0e20 	rsb	lr, r9, #32
 800520a:	468a      	mov	sl, r1
 800520c:	2200      	movs	r2, #0
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	fa00 f009 	lsl.w	r0, r0, r9
 8005214:	4310      	orrs	r0, r2
 8005216:	f84a 0b04 	str.w	r0, [sl], #4
 800521a:	f853 2b04 	ldr.w	r2, [r3], #4
 800521e:	459c      	cmp	ip, r3
 8005220:	fa22 f20e 	lsr.w	r2, r2, lr
 8005224:	d8f3      	bhi.n	800520e <__lshift+0x6e>
 8005226:	ebac 0304 	sub.w	r3, ip, r4
 800522a:	3b15      	subs	r3, #21
 800522c:	f023 0303 	bic.w	r3, r3, #3
 8005230:	3304      	adds	r3, #4
 8005232:	f104 0015 	add.w	r0, r4, #21
 8005236:	4584      	cmp	ip, r0
 8005238:	bf38      	it	cc
 800523a:	2304      	movcc	r3, #4
 800523c:	50ca      	str	r2, [r1, r3]
 800523e:	b10a      	cbz	r2, 8005244 <__lshift+0xa4>
 8005240:	f108 0602 	add.w	r6, r8, #2
 8005244:	3e01      	subs	r6, #1
 8005246:	4638      	mov	r0, r7
 8005248:	612e      	str	r6, [r5, #16]
 800524a:	4621      	mov	r1, r4
 800524c:	f7ff fdd8 	bl	8004e00 <_Bfree>
 8005250:	4628      	mov	r0, r5
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005256:	f842 0f04 	str.w	r0, [r2, #4]!
 800525a:	3301      	adds	r3, #1
 800525c:	e7c5      	b.n	80051ea <__lshift+0x4a>
 800525e:	3904      	subs	r1, #4
 8005260:	f853 2b04 	ldr.w	r2, [r3], #4
 8005264:	f841 2f04 	str.w	r2, [r1, #4]!
 8005268:	459c      	cmp	ip, r3
 800526a:	d8f9      	bhi.n	8005260 <__lshift+0xc0>
 800526c:	e7ea      	b.n	8005244 <__lshift+0xa4>
 800526e:	bf00      	nop
 8005270:	08036f58 	.word	0x08036f58
 8005274:	08036f69 	.word	0x08036f69

08005278 <__mcmp>:
 8005278:	b530      	push	{r4, r5, lr}
 800527a:	6902      	ldr	r2, [r0, #16]
 800527c:	690c      	ldr	r4, [r1, #16]
 800527e:	1b12      	subs	r2, r2, r4
 8005280:	d10e      	bne.n	80052a0 <__mcmp+0x28>
 8005282:	f100 0314 	add.w	r3, r0, #20
 8005286:	3114      	adds	r1, #20
 8005288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800528c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005298:	42a5      	cmp	r5, r4
 800529a:	d003      	beq.n	80052a4 <__mcmp+0x2c>
 800529c:	d305      	bcc.n	80052aa <__mcmp+0x32>
 800529e:	2201      	movs	r2, #1
 80052a0:	4610      	mov	r0, r2
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	4283      	cmp	r3, r0
 80052a6:	d3f3      	bcc.n	8005290 <__mcmp+0x18>
 80052a8:	e7fa      	b.n	80052a0 <__mcmp+0x28>
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ae:	e7f7      	b.n	80052a0 <__mcmp+0x28>

080052b0 <__mdiff>:
 80052b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	460c      	mov	r4, r1
 80052b6:	4606      	mov	r6, r0
 80052b8:	4611      	mov	r1, r2
 80052ba:	4620      	mov	r0, r4
 80052bc:	4690      	mov	r8, r2
 80052be:	f7ff ffdb 	bl	8005278 <__mcmp>
 80052c2:	1e05      	subs	r5, r0, #0
 80052c4:	d110      	bne.n	80052e8 <__mdiff+0x38>
 80052c6:	4629      	mov	r1, r5
 80052c8:	4630      	mov	r0, r6
 80052ca:	f7ff fd59 	bl	8004d80 <_Balloc>
 80052ce:	b930      	cbnz	r0, 80052de <__mdiff+0x2e>
 80052d0:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <__mdiff+0x10c>)
 80052d2:	4602      	mov	r2, r0
 80052d4:	f240 2137 	movw	r1, #567	; 0x237
 80052d8:	4839      	ldr	r0, [pc, #228]	; (80053c0 <__mdiff+0x110>)
 80052da:	f000 fb43 	bl	8005964 <__assert_func>
 80052de:	2301      	movs	r3, #1
 80052e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	bfa4      	itt	ge
 80052ea:	4643      	movge	r3, r8
 80052ec:	46a0      	movge	r8, r4
 80052ee:	4630      	mov	r0, r6
 80052f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052f4:	bfa6      	itte	ge
 80052f6:	461c      	movge	r4, r3
 80052f8:	2500      	movge	r5, #0
 80052fa:	2501      	movlt	r5, #1
 80052fc:	f7ff fd40 	bl	8004d80 <_Balloc>
 8005300:	b920      	cbnz	r0, 800530c <__mdiff+0x5c>
 8005302:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <__mdiff+0x10c>)
 8005304:	4602      	mov	r2, r0
 8005306:	f240 2145 	movw	r1, #581	; 0x245
 800530a:	e7e5      	b.n	80052d8 <__mdiff+0x28>
 800530c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005310:	6926      	ldr	r6, [r4, #16]
 8005312:	60c5      	str	r5, [r0, #12]
 8005314:	f104 0914 	add.w	r9, r4, #20
 8005318:	f108 0514 	add.w	r5, r8, #20
 800531c:	f100 0e14 	add.w	lr, r0, #20
 8005320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005328:	f108 0210 	add.w	r2, r8, #16
 800532c:	46f2      	mov	sl, lr
 800532e:	2100      	movs	r1, #0
 8005330:	f859 3b04 	ldr.w	r3, [r9], #4
 8005334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005338:	fa11 f88b 	uxtah	r8, r1, fp
 800533c:	b299      	uxth	r1, r3
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	eba8 0801 	sub.w	r8, r8, r1
 8005344:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005348:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800534c:	fa1f f888 	uxth.w	r8, r8
 8005350:	1419      	asrs	r1, r3, #16
 8005352:	454e      	cmp	r6, r9
 8005354:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005358:	f84a 3b04 	str.w	r3, [sl], #4
 800535c:	d8e8      	bhi.n	8005330 <__mdiff+0x80>
 800535e:	1b33      	subs	r3, r6, r4
 8005360:	3b15      	subs	r3, #21
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	3304      	adds	r3, #4
 8005368:	3415      	adds	r4, #21
 800536a:	42a6      	cmp	r6, r4
 800536c:	bf38      	it	cc
 800536e:	2304      	movcc	r3, #4
 8005370:	441d      	add	r5, r3
 8005372:	4473      	add	r3, lr
 8005374:	469e      	mov	lr, r3
 8005376:	462e      	mov	r6, r5
 8005378:	4566      	cmp	r6, ip
 800537a:	d30e      	bcc.n	800539a <__mdiff+0xea>
 800537c:	f10c 0203 	add.w	r2, ip, #3
 8005380:	1b52      	subs	r2, r2, r5
 8005382:	f022 0203 	bic.w	r2, r2, #3
 8005386:	3d03      	subs	r5, #3
 8005388:	45ac      	cmp	ip, r5
 800538a:	bf38      	it	cc
 800538c:	2200      	movcc	r2, #0
 800538e:	4413      	add	r3, r2
 8005390:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005394:	b17a      	cbz	r2, 80053b6 <__mdiff+0x106>
 8005396:	6107      	str	r7, [r0, #16]
 8005398:	e7a4      	b.n	80052e4 <__mdiff+0x34>
 800539a:	f856 8b04 	ldr.w	r8, [r6], #4
 800539e:	fa11 f288 	uxtah	r2, r1, r8
 80053a2:	1414      	asrs	r4, r2, #16
 80053a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053a8:	b292      	uxth	r2, r2
 80053aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053ae:	f84e 2b04 	str.w	r2, [lr], #4
 80053b2:	1421      	asrs	r1, r4, #16
 80053b4:	e7e0      	b.n	8005378 <__mdiff+0xc8>
 80053b6:	3f01      	subs	r7, #1
 80053b8:	e7ea      	b.n	8005390 <__mdiff+0xe0>
 80053ba:	bf00      	nop
 80053bc:	08036f58 	.word	0x08036f58
 80053c0:	08036f69 	.word	0x08036f69

080053c4 <__d2b>:
 80053c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	460f      	mov	r7, r1
 80053ca:	2101      	movs	r1, #1
 80053cc:	ec59 8b10 	vmov	r8, r9, d0
 80053d0:	4616      	mov	r6, r2
 80053d2:	f7ff fcd5 	bl	8004d80 <_Balloc>
 80053d6:	4604      	mov	r4, r0
 80053d8:	b930      	cbnz	r0, 80053e8 <__d2b+0x24>
 80053da:	4602      	mov	r2, r0
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <__d2b+0xac>)
 80053de:	4825      	ldr	r0, [pc, #148]	; (8005474 <__d2b+0xb0>)
 80053e0:	f240 310f 	movw	r1, #783	; 0x30f
 80053e4:	f000 fabe 	bl	8005964 <__assert_func>
 80053e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053f0:	bb2d      	cbnz	r5, 800543e <__d2b+0x7a>
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	f1b8 0300 	subs.w	r3, r8, #0
 80053f8:	d026      	beq.n	8005448 <__d2b+0x84>
 80053fa:	4668      	mov	r0, sp
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f7ff fd87 	bl	8004f10 <__lo0bits>
 8005402:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005406:	b1e8      	cbz	r0, 8005444 <__d2b+0x80>
 8005408:	f1c0 0320 	rsb	r3, r0, #32
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	430b      	orrs	r3, r1
 8005412:	40c2      	lsrs	r2, r0
 8005414:	6163      	str	r3, [r4, #20]
 8005416:	9201      	str	r2, [sp, #4]
 8005418:	9b01      	ldr	r3, [sp, #4]
 800541a:	61a3      	str	r3, [r4, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf14      	ite	ne
 8005420:	2202      	movne	r2, #2
 8005422:	2201      	moveq	r2, #1
 8005424:	6122      	str	r2, [r4, #16]
 8005426:	b1bd      	cbz	r5, 8005458 <__d2b+0x94>
 8005428:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800542c:	4405      	add	r5, r0
 800542e:	603d      	str	r5, [r7, #0]
 8005430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	4620      	mov	r0, r4
 8005438:	b003      	add	sp, #12
 800543a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800543e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005442:	e7d6      	b.n	80053f2 <__d2b+0x2e>
 8005444:	6161      	str	r1, [r4, #20]
 8005446:	e7e7      	b.n	8005418 <__d2b+0x54>
 8005448:	a801      	add	r0, sp, #4
 800544a:	f7ff fd61 	bl	8004f10 <__lo0bits>
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	6163      	str	r3, [r4, #20]
 8005452:	3020      	adds	r0, #32
 8005454:	2201      	movs	r2, #1
 8005456:	e7e5      	b.n	8005424 <__d2b+0x60>
 8005458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800545c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005460:	6038      	str	r0, [r7, #0]
 8005462:	6918      	ldr	r0, [r3, #16]
 8005464:	f7ff fd34 	bl	8004ed0 <__hi0bits>
 8005468:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800546c:	e7e2      	b.n	8005434 <__d2b+0x70>
 800546e:	bf00      	nop
 8005470:	08036f58 	.word	0x08036f58
 8005474:	08036f69 	.word	0x08036f69

08005478 <__sfputc_r>:
 8005478:	6893      	ldr	r3, [r2, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	b410      	push	{r4}
 8005480:	6093      	str	r3, [r2, #8]
 8005482:	da08      	bge.n	8005496 <__sfputc_r+0x1e>
 8005484:	6994      	ldr	r4, [r2, #24]
 8005486:	42a3      	cmp	r3, r4
 8005488:	db01      	blt.n	800548e <__sfputc_r+0x16>
 800548a:	290a      	cmp	r1, #10
 800548c:	d103      	bne.n	8005496 <__sfputc_r+0x1e>
 800548e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005492:	f7fe bd02 	b.w	8003e9a <__swbuf_r>
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	1c58      	adds	r0, r3, #1
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	7019      	strb	r1, [r3, #0]
 800549e:	4608      	mov	r0, r1
 80054a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <__sfputs_r>:
 80054a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	4614      	mov	r4, r2
 80054ae:	18d5      	adds	r5, r2, r3
 80054b0:	42ac      	cmp	r4, r5
 80054b2:	d101      	bne.n	80054b8 <__sfputs_r+0x12>
 80054b4:	2000      	movs	r0, #0
 80054b6:	e007      	b.n	80054c8 <__sfputs_r+0x22>
 80054b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054bc:	463a      	mov	r2, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ffda 	bl	8005478 <__sfputc_r>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d1f3      	bne.n	80054b0 <__sfputs_r+0xa>
 80054c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054cc <_vfiprintf_r>:
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	460d      	mov	r5, r1
 80054d2:	b09d      	sub	sp, #116	; 0x74
 80054d4:	4614      	mov	r4, r2
 80054d6:	4698      	mov	r8, r3
 80054d8:	4606      	mov	r6, r0
 80054da:	b118      	cbz	r0, 80054e4 <_vfiprintf_r+0x18>
 80054dc:	6a03      	ldr	r3, [r0, #32]
 80054de:	b90b      	cbnz	r3, 80054e4 <_vfiprintf_r+0x18>
 80054e0:	f7fe fbf4 	bl	8003ccc <__sinit>
 80054e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054e6:	07d9      	lsls	r1, r3, #31
 80054e8:	d405      	bmi.n	80054f6 <_vfiprintf_r+0x2a>
 80054ea:	89ab      	ldrh	r3, [r5, #12]
 80054ec:	059a      	lsls	r2, r3, #22
 80054ee:	d402      	bmi.n	80054f6 <_vfiprintf_r+0x2a>
 80054f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054f2:	f7fe fdf4 	bl	80040de <__retarget_lock_acquire_recursive>
 80054f6:	89ab      	ldrh	r3, [r5, #12]
 80054f8:	071b      	lsls	r3, r3, #28
 80054fa:	d501      	bpl.n	8005500 <_vfiprintf_r+0x34>
 80054fc:	692b      	ldr	r3, [r5, #16]
 80054fe:	b99b      	cbnz	r3, 8005528 <_vfiprintf_r+0x5c>
 8005500:	4629      	mov	r1, r5
 8005502:	4630      	mov	r0, r6
 8005504:	f7fe fd06 	bl	8003f14 <__swsetup_r>
 8005508:	b170      	cbz	r0, 8005528 <_vfiprintf_r+0x5c>
 800550a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800550c:	07dc      	lsls	r4, r3, #31
 800550e:	d504      	bpl.n	800551a <_vfiprintf_r+0x4e>
 8005510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005514:	b01d      	add	sp, #116	; 0x74
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	0598      	lsls	r0, r3, #22
 800551e:	d4f7      	bmi.n	8005510 <_vfiprintf_r+0x44>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7fe fddd 	bl	80040e0 <__retarget_lock_release_recursive>
 8005526:	e7f3      	b.n	8005510 <_vfiprintf_r+0x44>
 8005528:	2300      	movs	r3, #0
 800552a:	9309      	str	r3, [sp, #36]	; 0x24
 800552c:	2320      	movs	r3, #32
 800552e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005532:	f8cd 800c 	str.w	r8, [sp, #12]
 8005536:	2330      	movs	r3, #48	; 0x30
 8005538:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056ec <_vfiprintf_r+0x220>
 800553c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	4623      	mov	r3, r4
 8005546:	469a      	mov	sl, r3
 8005548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800554c:	b10a      	cbz	r2, 8005552 <_vfiprintf_r+0x86>
 800554e:	2a25      	cmp	r2, #37	; 0x25
 8005550:	d1f9      	bne.n	8005546 <_vfiprintf_r+0x7a>
 8005552:	ebba 0b04 	subs.w	fp, sl, r4
 8005556:	d00b      	beq.n	8005570 <_vfiprintf_r+0xa4>
 8005558:	465b      	mov	r3, fp
 800555a:	4622      	mov	r2, r4
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ffa1 	bl	80054a6 <__sfputs_r>
 8005564:	3001      	adds	r0, #1
 8005566:	f000 80a9 	beq.w	80056bc <_vfiprintf_r+0x1f0>
 800556a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800556c:	445a      	add	r2, fp
 800556e:	9209      	str	r2, [sp, #36]	; 0x24
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a1 	beq.w	80056bc <_vfiprintf_r+0x1f0>
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	9307      	str	r3, [sp, #28]
 800558c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005590:	931a      	str	r3, [sp, #104]	; 0x68
 8005592:	4654      	mov	r4, sl
 8005594:	2205      	movs	r2, #5
 8005596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559a:	4854      	ldr	r0, [pc, #336]	; (80056ec <_vfiprintf_r+0x220>)
 800559c:	f7fa feb8 	bl	8000310 <memchr>
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	b9d8      	cbnz	r0, 80055dc <_vfiprintf_r+0x110>
 80055a4:	06d1      	lsls	r1, r2, #27
 80055a6:	bf44      	itt	mi
 80055a8:	2320      	movmi	r3, #32
 80055aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ae:	0713      	lsls	r3, r2, #28
 80055b0:	bf44      	itt	mi
 80055b2:	232b      	movmi	r3, #43	; 0x2b
 80055b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b2a      	cmp	r3, #42	; 0x2a
 80055be:	d015      	beq.n	80055ec <_vfiprintf_r+0x120>
 80055c0:	9a07      	ldr	r2, [sp, #28]
 80055c2:	4654      	mov	r4, sl
 80055c4:	2000      	movs	r0, #0
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4621      	mov	r1, r4
 80055cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d0:	3b30      	subs	r3, #48	; 0x30
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d94d      	bls.n	8005672 <_vfiprintf_r+0x1a6>
 80055d6:	b1b0      	cbz	r0, 8005606 <_vfiprintf_r+0x13a>
 80055d8:	9207      	str	r2, [sp, #28]
 80055da:	e014      	b.n	8005606 <_vfiprintf_r+0x13a>
 80055dc:	eba0 0308 	sub.w	r3, r0, r8
 80055e0:	fa09 f303 	lsl.w	r3, r9, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	46a2      	mov	sl, r4
 80055ea:	e7d2      	b.n	8005592 <_vfiprintf_r+0xc6>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9103      	str	r1, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbb      	ittet	lt
 80055f8:	425b      	neglt	r3, r3
 80055fa:	f042 0202 	orrlt.w	r2, r2, #2
 80055fe:	9307      	strge	r3, [sp, #28]
 8005600:	9307      	strlt	r3, [sp, #28]
 8005602:	bfb8      	it	lt
 8005604:	9204      	strlt	r2, [sp, #16]
 8005606:	7823      	ldrb	r3, [r4, #0]
 8005608:	2b2e      	cmp	r3, #46	; 0x2e
 800560a:	d10c      	bne.n	8005626 <_vfiprintf_r+0x15a>
 800560c:	7863      	ldrb	r3, [r4, #1]
 800560e:	2b2a      	cmp	r3, #42	; 0x2a
 8005610:	d134      	bne.n	800567c <_vfiprintf_r+0x1b0>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	9203      	str	r2, [sp, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfb8      	it	lt
 800561e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005622:	3402      	adds	r4, #2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056fc <_vfiprintf_r+0x230>
 800562a:	7821      	ldrb	r1, [r4, #0]
 800562c:	2203      	movs	r2, #3
 800562e:	4650      	mov	r0, sl
 8005630:	f7fa fe6e 	bl	8000310 <memchr>
 8005634:	b138      	cbz	r0, 8005646 <_vfiprintf_r+0x17a>
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	eba0 000a 	sub.w	r0, r0, sl
 800563c:	2240      	movs	r2, #64	; 0x40
 800563e:	4082      	lsls	r2, r0
 8005640:	4313      	orrs	r3, r2
 8005642:	3401      	adds	r4, #1
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564a:	4829      	ldr	r0, [pc, #164]	; (80056f0 <_vfiprintf_r+0x224>)
 800564c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005650:	2206      	movs	r2, #6
 8005652:	f7fa fe5d 	bl	8000310 <memchr>
 8005656:	2800      	cmp	r0, #0
 8005658:	d03f      	beq.n	80056da <_vfiprintf_r+0x20e>
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <_vfiprintf_r+0x228>)
 800565c:	bb1b      	cbnz	r3, 80056a6 <_vfiprintf_r+0x1da>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	3307      	adds	r3, #7
 8005662:	f023 0307 	bic.w	r3, r3, #7
 8005666:	3308      	adds	r3, #8
 8005668:	9303      	str	r3, [sp, #12]
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	443b      	add	r3, r7
 800566e:	9309      	str	r3, [sp, #36]	; 0x24
 8005670:	e768      	b.n	8005544 <_vfiprintf_r+0x78>
 8005672:	fb0c 3202 	mla	r2, ip, r2, r3
 8005676:	460c      	mov	r4, r1
 8005678:	2001      	movs	r0, #1
 800567a:	e7a6      	b.n	80055ca <_vfiprintf_r+0xfe>
 800567c:	2300      	movs	r3, #0
 800567e:	3401      	adds	r4, #1
 8005680:	9305      	str	r3, [sp, #20]
 8005682:	4619      	mov	r1, r3
 8005684:	f04f 0c0a 	mov.w	ip, #10
 8005688:	4620      	mov	r0, r4
 800568a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800568e:	3a30      	subs	r2, #48	; 0x30
 8005690:	2a09      	cmp	r2, #9
 8005692:	d903      	bls.n	800569c <_vfiprintf_r+0x1d0>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0c6      	beq.n	8005626 <_vfiprintf_r+0x15a>
 8005698:	9105      	str	r1, [sp, #20]
 800569a:	e7c4      	b.n	8005626 <_vfiprintf_r+0x15a>
 800569c:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a0:	4604      	mov	r4, r0
 80056a2:	2301      	movs	r3, #1
 80056a4:	e7f0      	b.n	8005688 <_vfiprintf_r+0x1bc>
 80056a6:	ab03      	add	r3, sp, #12
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	462a      	mov	r2, r5
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <_vfiprintf_r+0x22c>)
 80056ae:	a904      	add	r1, sp, #16
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7fd fed5 	bl	8003460 <_printf_float>
 80056b6:	4607      	mov	r7, r0
 80056b8:	1c78      	adds	r0, r7, #1
 80056ba:	d1d6      	bne.n	800566a <_vfiprintf_r+0x19e>
 80056bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056be:	07d9      	lsls	r1, r3, #31
 80056c0:	d405      	bmi.n	80056ce <_vfiprintf_r+0x202>
 80056c2:	89ab      	ldrh	r3, [r5, #12]
 80056c4:	059a      	lsls	r2, r3, #22
 80056c6:	d402      	bmi.n	80056ce <_vfiprintf_r+0x202>
 80056c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ca:	f7fe fd09 	bl	80040e0 <__retarget_lock_release_recursive>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	065b      	lsls	r3, r3, #25
 80056d2:	f53f af1d 	bmi.w	8005510 <_vfiprintf_r+0x44>
 80056d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d8:	e71c      	b.n	8005514 <_vfiprintf_r+0x48>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <_vfiprintf_r+0x22c>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4630      	mov	r0, r6
 80056e6:	f7fe f943 	bl	8003970 <_printf_i>
 80056ea:	e7e4      	b.n	80056b6 <_vfiprintf_r+0x1ea>
 80056ec:	080370c4 	.word	0x080370c4
 80056f0:	080370ce 	.word	0x080370ce
 80056f4:	08003461 	.word	0x08003461
 80056f8:	080054a7 	.word	0x080054a7
 80056fc:	080370ca 	.word	0x080370ca

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	6a21      	ldr	r1, [r4, #32]
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	d032      	beq.n	800579a <__sflush_r+0x9a>
 8005734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	075a      	lsls	r2, r3, #29
 800573a:	d505      	bpl.n	8005748 <__sflush_r+0x48>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005742:	b10b      	cbz	r3, 8005748 <__sflush_r+0x48>
 8005744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005746:	1ac0      	subs	r0, r0, r3
 8005748:	2300      	movs	r3, #0
 800574a:	4602      	mov	r2, r0
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	4628      	mov	r0, r5
 8005752:	47b0      	blx	r6
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	d106      	bne.n	8005768 <__sflush_r+0x68>
 800575a:	6829      	ldr	r1, [r5, #0]
 800575c:	291d      	cmp	r1, #29
 800575e:	d82b      	bhi.n	80057b8 <__sflush_r+0xb8>
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <__sflush_r+0x108>)
 8005762:	410a      	asrs	r2, r1
 8005764:	07d6      	lsls	r6, r2, #31
 8005766:	d427      	bmi.n	80057b8 <__sflush_r+0xb8>
 8005768:	2200      	movs	r2, #0
 800576a:	6062      	str	r2, [r4, #4]
 800576c:	04d9      	lsls	r1, r3, #19
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	d504      	bpl.n	800577e <__sflush_r+0x7e>
 8005774:	1c42      	adds	r2, r0, #1
 8005776:	d101      	bne.n	800577c <__sflush_r+0x7c>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b903      	cbnz	r3, 800577e <__sflush_r+0x7e>
 800577c:	6560      	str	r0, [r4, #84]	; 0x54
 800577e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005780:	602f      	str	r7, [r5, #0]
 8005782:	2900      	cmp	r1, #0
 8005784:	d0c9      	beq.n	800571a <__sflush_r+0x1a>
 8005786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578a:	4299      	cmp	r1, r3
 800578c:	d002      	beq.n	8005794 <__sflush_r+0x94>
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff faaa 	bl	8004ce8 <_free_r>
 8005794:	2000      	movs	r0, #0
 8005796:	6360      	str	r0, [r4, #52]	; 0x34
 8005798:	e7c0      	b.n	800571c <__sflush_r+0x1c>
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c8      	bne.n	8005736 <__sflush_r+0x36>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c5      	beq.n	8005736 <__sflush_r+0x36>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	680e      	ldr	r6, [r1, #0]
 80057ca:	bf08      	it	eq
 80057cc:	694b      	ldreq	r3, [r1, #20]
 80057ce:	600f      	str	r7, [r1, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2300      	movne	r3, #0
 80057d4:	eba6 0807 	sub.w	r8, r6, r7
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	6a21      	ldr	r1, [r4, #32]
 80057e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e4:	4643      	mov	r3, r8
 80057e6:	463a      	mov	r2, r7
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	dfbffffe 	.word	0xdfbffffe

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b913      	cbnz	r3, 800581c <_fflush_r+0x10>
 8005816:	2500      	movs	r5, #0
 8005818:	4628      	mov	r0, r5
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	b118      	cbz	r0, 8005826 <_fflush_r+0x1a>
 800581e:	6a03      	ldr	r3, [r0, #32]
 8005820:	b90b      	cbnz	r3, 8005826 <_fflush_r+0x1a>
 8005822:	f7fe fa53 	bl	8003ccc <__sinit>
 8005826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f3      	beq.n	8005816 <_fflush_r+0xa>
 800582e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005830:	07d0      	lsls	r0, r2, #31
 8005832:	d404      	bmi.n	800583e <_fflush_r+0x32>
 8005834:	0599      	lsls	r1, r3, #22
 8005836:	d402      	bmi.n	800583e <_fflush_r+0x32>
 8005838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583a:	f7fe fc50 	bl	80040de <__retarget_lock_acquire_recursive>
 800583e:	4628      	mov	r0, r5
 8005840:	4621      	mov	r1, r4
 8005842:	f7ff ff5d 	bl	8005700 <__sflush_r>
 8005846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005848:	07da      	lsls	r2, r3, #31
 800584a:	4605      	mov	r5, r0
 800584c:	d4e4      	bmi.n	8005818 <_fflush_r+0xc>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	059b      	lsls	r3, r3, #22
 8005852:	d4e1      	bmi.n	8005818 <_fflush_r+0xc>
 8005854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005856:	f7fe fc43 	bl	80040e0 <__retarget_lock_release_recursive>
 800585a:	e7dd      	b.n	8005818 <_fflush_r+0xc>

0800585c <__swhatbuf_r>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	2900      	cmp	r1, #0
 8005866:	b096      	sub	sp, #88	; 0x58
 8005868:	4615      	mov	r5, r2
 800586a:	461e      	mov	r6, r3
 800586c:	da0d      	bge.n	800588a <__swhatbuf_r+0x2e>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	bf0c      	ite	eq
 800587a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800587e:	2340      	movne	r3, #64	; 0x40
 8005880:	2000      	movs	r0, #0
 8005882:	6031      	str	r1, [r6, #0]
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	b016      	add	sp, #88	; 0x58
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	466a      	mov	r2, sp
 800588c:	f000 f848 	bl	8005920 <_fstat_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	dbec      	blt.n	800586e <__swhatbuf_r+0x12>
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800589a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800589e:	4259      	negs	r1, r3
 80058a0:	4159      	adcs	r1, r3
 80058a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a6:	e7eb      	b.n	8005880 <__swhatbuf_r+0x24>

080058a8 <__smakebuf_r>:
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058ac:	079d      	lsls	r5, r3, #30
 80058ae:	4606      	mov	r6, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	d507      	bpl.n	80058c4 <__smakebuf_r+0x1c>
 80058b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	2301      	movs	r3, #1
 80058be:	6163      	str	r3, [r4, #20]
 80058c0:	b002      	add	sp, #8
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	ab01      	add	r3, sp, #4
 80058c6:	466a      	mov	r2, sp
 80058c8:	f7ff ffc8 	bl	800585c <__swhatbuf_r>
 80058cc:	9900      	ldr	r1, [sp, #0]
 80058ce:	4605      	mov	r5, r0
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7fd fca7 	bl	8003224 <_malloc_r>
 80058d6:	b948      	cbnz	r0, 80058ec <__smakebuf_r+0x44>
 80058d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d4ef      	bmi.n	80058c0 <__smakebuf_r+0x18>
 80058e0:	f023 0303 	bic.w	r3, r3, #3
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	e7e3      	b.n	80058b4 <__smakebuf_r+0xc>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	6020      	str	r0, [r4, #0]
 80058f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	9b00      	ldr	r3, [sp, #0]
 80058f8:	6163      	str	r3, [r4, #20]
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	6120      	str	r0, [r4, #16]
 80058fe:	b15b      	cbz	r3, 8005918 <__smakebuf_r+0x70>
 8005900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005904:	4630      	mov	r0, r6
 8005906:	f000 f81d 	bl	8005944 <_isatty_r>
 800590a:	b128      	cbz	r0, 8005918 <__smakebuf_r+0x70>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	431d      	orrs	r5, r3
 800591c:	81a5      	strh	r5, [r4, #12]
 800591e:	e7cf      	b.n	80058c0 <__smakebuf_r+0x18>

08005920 <_fstat_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4d07      	ldr	r5, [pc, #28]	; (8005940 <_fstat_r+0x20>)
 8005924:	2300      	movs	r3, #0
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	f000 f8d3 	bl	8005ad8 <_fstat>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d102      	bne.n	800593c <_fstat_r+0x1c>
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	b103      	cbz	r3, 800593c <_fstat_r+0x1c>
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	240012a8 	.word	0x240012a8

08005944 <_isatty_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d06      	ldr	r5, [pc, #24]	; (8005960 <_isatty_r+0x1c>)
 8005948:	2300      	movs	r3, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	f000 f8d2 	bl	8005af8 <_isatty>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_isatty_r+0x1a>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_isatty_r+0x1a>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	240012a8 	.word	0x240012a8

08005964 <__assert_func>:
 8005964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005966:	4614      	mov	r4, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <__assert_func+0x2c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4605      	mov	r5, r0
 8005970:	68d8      	ldr	r0, [r3, #12]
 8005972:	b14c      	cbz	r4, 8005988 <__assert_func+0x24>
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <__assert_func+0x30>)
 8005976:	9100      	str	r1, [sp, #0]
 8005978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800597c:	4906      	ldr	r1, [pc, #24]	; (8005998 <__assert_func+0x34>)
 800597e:	462b      	mov	r3, r5
 8005980:	f000 f844 	bl	8005a0c <fiprintf>
 8005984:	f000 f854 	bl	8005a30 <abort>
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <__assert_func+0x38>)
 800598a:	461c      	mov	r4, r3
 800598c:	e7f3      	b.n	8005976 <__assert_func+0x12>
 800598e:	bf00      	nop
 8005990:	24000af8 	.word	0x24000af8
 8005994:	080370df 	.word	0x080370df
 8005998:	080370ec 	.word	0x080370ec
 800599c:	0803711a 	.word	0x0803711a

080059a0 <_calloc_r>:
 80059a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a2:	fba1 2402 	umull	r2, r4, r1, r2
 80059a6:	b94c      	cbnz	r4, 80059bc <_calloc_r+0x1c>
 80059a8:	4611      	mov	r1, r2
 80059aa:	9201      	str	r2, [sp, #4]
 80059ac:	f7fd fc3a 	bl	8003224 <_malloc_r>
 80059b0:	9a01      	ldr	r2, [sp, #4]
 80059b2:	4605      	mov	r5, r0
 80059b4:	b930      	cbnz	r0, 80059c4 <_calloc_r+0x24>
 80059b6:	4628      	mov	r0, r5
 80059b8:	b003      	add	sp, #12
 80059ba:	bd30      	pop	{r4, r5, pc}
 80059bc:	220c      	movs	r2, #12
 80059be:	6002      	str	r2, [r0, #0]
 80059c0:	2500      	movs	r5, #0
 80059c2:	e7f8      	b.n	80059b6 <_calloc_r+0x16>
 80059c4:	4621      	mov	r1, r4
 80059c6:	f7fe fafd 	bl	8003fc4 <memset>
 80059ca:	e7f4      	b.n	80059b6 <_calloc_r+0x16>

080059cc <__ascii_mbtowc>:
 80059cc:	b082      	sub	sp, #8
 80059ce:	b901      	cbnz	r1, 80059d2 <__ascii_mbtowc+0x6>
 80059d0:	a901      	add	r1, sp, #4
 80059d2:	b142      	cbz	r2, 80059e6 <__ascii_mbtowc+0x1a>
 80059d4:	b14b      	cbz	r3, 80059ea <__ascii_mbtowc+0x1e>
 80059d6:	7813      	ldrb	r3, [r2, #0]
 80059d8:	600b      	str	r3, [r1, #0]
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	1e10      	subs	r0, r2, #0
 80059de:	bf18      	it	ne
 80059e0:	2001      	movne	r0, #1
 80059e2:	b002      	add	sp, #8
 80059e4:	4770      	bx	lr
 80059e6:	4610      	mov	r0, r2
 80059e8:	e7fb      	b.n	80059e2 <__ascii_mbtowc+0x16>
 80059ea:	f06f 0001 	mvn.w	r0, #1
 80059ee:	e7f8      	b.n	80059e2 <__ascii_mbtowc+0x16>

080059f0 <__ascii_wctomb>:
 80059f0:	b149      	cbz	r1, 8005a06 <__ascii_wctomb+0x16>
 80059f2:	2aff      	cmp	r2, #255	; 0xff
 80059f4:	bf85      	ittet	hi
 80059f6:	238a      	movhi	r3, #138	; 0x8a
 80059f8:	6003      	strhi	r3, [r0, #0]
 80059fa:	700a      	strbls	r2, [r1, #0]
 80059fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a00:	bf98      	it	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	4770      	bx	lr
 8005a06:	4608      	mov	r0, r1
 8005a08:	4770      	bx	lr
	...

08005a0c <fiprintf>:
 8005a0c:	b40e      	push	{r1, r2, r3}
 8005a0e:	b503      	push	{r0, r1, lr}
 8005a10:	4601      	mov	r1, r0
 8005a12:	ab03      	add	r3, sp, #12
 8005a14:	4805      	ldr	r0, [pc, #20]	; (8005a2c <fiprintf+0x20>)
 8005a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	f7ff fd55 	bl	80054cc <_vfiprintf_r>
 8005a22:	b002      	add	sp, #8
 8005a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a28:	b003      	add	sp, #12
 8005a2a:	4770      	bx	lr
 8005a2c:	24000af8 	.word	0x24000af8

08005a30 <abort>:
 8005a30:	b508      	push	{r3, lr}
 8005a32:	2006      	movs	r0, #6
 8005a34:	f000 f82c 	bl	8005a90 <raise>
 8005a38:	2001      	movs	r0, #1
 8005a3a:	f000 f885 	bl	8005b48 <_exit>

08005a3e <_raise_r>:
 8005a3e:	291f      	cmp	r1, #31
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4604      	mov	r4, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	d904      	bls.n	8005a52 <_raise_r+0x14>
 8005a48:	2316      	movs	r3, #22
 8005a4a:	6003      	str	r3, [r0, #0]
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
 8005a52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a54:	b112      	cbz	r2, 8005a5c <_raise_r+0x1e>
 8005a56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a5a:	b94b      	cbnz	r3, 8005a70 <_raise_r+0x32>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f831 	bl	8005ac4 <_getpid_r>
 8005a62:	462a      	mov	r2, r5
 8005a64:	4601      	mov	r1, r0
 8005a66:	4620      	mov	r0, r4
 8005a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a6c:	f000 b818 	b.w	8005aa0 <_kill_r>
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d00a      	beq.n	8005a8a <_raise_r+0x4c>
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	d103      	bne.n	8005a80 <_raise_r+0x42>
 8005a78:	2316      	movs	r3, #22
 8005a7a:	6003      	str	r3, [r0, #0]
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	e7e7      	b.n	8005a50 <_raise_r+0x12>
 8005a80:	2400      	movs	r4, #0
 8005a82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a86:	4628      	mov	r0, r5
 8005a88:	4798      	blx	r3
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e7e0      	b.n	8005a50 <_raise_r+0x12>
	...

08005a90 <raise>:
 8005a90:	4b02      	ldr	r3, [pc, #8]	; (8005a9c <raise+0xc>)
 8005a92:	4601      	mov	r1, r0
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7ff bfd2 	b.w	8005a3e <_raise_r>
 8005a9a:	bf00      	nop
 8005a9c:	24000af8 	.word	0x24000af8

08005aa0 <_kill_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_kill_r+0x20>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	f000 f82b 	bl	8005b08 <_kill>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d102      	bne.n	8005abc <_kill_r+0x1c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b103      	cbz	r3, 8005abc <_kill_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	bf00      	nop
 8005ac0:	240012a8 	.word	0x240012a8

08005ac4 <_getpid_r>:
 8005ac4:	f000 b810 	b.w	8005ae8 <_getpid>

08005ac8 <_close>:
 8005ac8:	4b02      	ldr	r3, [pc, #8]	; (8005ad4 <_close+0xc>)
 8005aca:	2258      	movs	r2, #88	; 0x58
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad2:	4770      	bx	lr
 8005ad4:	240012a8 	.word	0x240012a8

08005ad8 <_fstat>:
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <_fstat+0xc>)
 8005ada:	2258      	movs	r2, #88	; 0x58
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae2:	4770      	bx	lr
 8005ae4:	240012a8 	.word	0x240012a8

08005ae8 <_getpid>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <_getpid+0xc>)
 8005aea:	2258      	movs	r2, #88	; 0x58
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af2:	4770      	bx	lr
 8005af4:	240012a8 	.word	0x240012a8

08005af8 <_isatty>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <_isatty+0xc>)
 8005afa:	2258      	movs	r2, #88	; 0x58
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	240012a8 	.word	0x240012a8

08005b08 <_kill>:
 8005b08:	4b02      	ldr	r3, [pc, #8]	; (8005b14 <_kill+0xc>)
 8005b0a:	2258      	movs	r2, #88	; 0x58
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b12:	4770      	bx	lr
 8005b14:	240012a8 	.word	0x240012a8

08005b18 <_lseek>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <_lseek+0xc>)
 8005b1a:	2258      	movs	r2, #88	; 0x58
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b22:	4770      	bx	lr
 8005b24:	240012a8 	.word	0x240012a8

08005b28 <_read>:
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <_read+0xc>)
 8005b2a:	2258      	movs	r2, #88	; 0x58
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b32:	4770      	bx	lr
 8005b34:	240012a8 	.word	0x240012a8

08005b38 <_write>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <_write+0xc>)
 8005b3a:	2258      	movs	r2, #88	; 0x58
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b42:	4770      	bx	lr
 8005b44:	240012a8 	.word	0x240012a8

08005b48 <_exit>:
 8005b48:	e7fe      	b.n	8005b48 <_exit>
	...

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
