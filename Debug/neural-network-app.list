
neural-network-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003165c  080055a0  080055a0  000155a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08036bfc  08036bfc  00046bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08036c00  08036c00  00046c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000c68  24000000  08036c04  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006ec  24000c80  0803786c  00050c80  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00060000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00050c68  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00050c96  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009e6c  00000000  00000000  00050cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d8b  00000000  00000000  0005ab45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00001a62  00000000  00000000  0005c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000638  00000000  00000000  0005e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000065a  00000000  00000000  0005e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000326ea  00000000  00000000  0005efca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000098dc  00000000  00000000  000916b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001435a5  00000000  00000000  0009af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001df8  00000000  00000000  001de538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001e0330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000c80 	.word	0x24000c80
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800557c 	.word	0x0800557c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000c84 	.word	0x24000c84
 800030c:	0800557c 	.word	0x0800557c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b510      	push	{r4, lr}
 80003c2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c4:	224c      	movs	r2, #76	; 0x4c
 80003c6:	2100      	movs	r1, #0
 80003c8:	a80a      	add	r0, sp, #40	; 0x28
 80003ca:	f003 fb13 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ce:	2220      	movs	r2, #32
 80003d0:	2100      	movs	r1, #0
 80003d2:	a802      	add	r0, sp, #8
 80003d4:	f003 fb0e 	bl	80039f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 fa37 	bl	800084c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003de:	4a20      	ldr	r2, [pc, #128]	; (8000460 <SystemClock_Config+0xa0>)
 80003e0:	2300      	movs	r3, #0
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	6993      	ldr	r3, [r2, #24]
 80003e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	6993      	ldr	r3, [r2, #24]
 80003ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f6:	6993      	ldr	r3, [r2, #24]
 80003f8:	049b      	lsls	r3, r3, #18
 80003fa:	d5fc      	bpl.n	80003f6 <SystemClock_Config+0x36>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003fc:	2001      	movs	r0, #1
 80003fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000402:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2202      	movs	r2, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 800040a:	f240 1113 	movw	r1, #275	; 0x113
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000410:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000414:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000418:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800041e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000420:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000422:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000426:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f000 fa34 	bl	8000894 <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	b108      	cbz	r0, 8000434 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	243f      	movs	r4, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000438:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000440:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000446:	2408      	movs	r4, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000448:	e9cd 2206 	strd	r2, r2, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800044c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800044e:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000452:	f000 fd6b 	bl	8000f2c <HAL_RCC_ClockConfig>
 8000456:	b108      	cbz	r0, 800045c <SystemClock_Config+0x9c>
 8000458:	b672      	cpsid	i
  while (1)
 800045a:	e7fe      	b.n	800045a <SystemClock_Config+0x9a>
}
 800045c:	b01e      	add	sp, #120	; 0x78
 800045e:	bd10      	pop	{r4, pc}
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000464:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <main+0xb4>)
 8000466:	6953      	ldr	r3, [r2, #20]
 8000468:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 800046c:	b510      	push	{r4, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	d111      	bne.n	8000496 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000476:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800047a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800047e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000482:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000486:	6953      	ldr	r3, [r2, #20]
 8000488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800048e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000492:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000496:	4820      	ldr	r0, [pc, #128]	; (8000518 <main+0xb4>)
 8000498:	6943      	ldr	r3, [r0, #20]
 800049a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800049e:	d126      	bne.n	80004ee <main+0x8a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004a8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ac:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004b0:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004b4:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 80004b8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004bc:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004c0:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004c6:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c8:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	d1f8      	bne.n	80004c2 <main+0x5e>
    } while(sets-- != 0U);
 80004d0:	f1ac 0c20 	sub.w	ip, ip, #32
 80004d4:	f11c 0f20 	cmn.w	ip, #32
 80004d8:	d1f0      	bne.n	80004bc <main+0x58>
 80004da:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004de:	6943      	ldr	r3, [r0, #20]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	6143      	str	r3, [r0, #20]
 80004e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004ea:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80004ee:	f000 f905 	bl	80006fc <HAL_Init>
  SystemClock_Config();
 80004f2:	f7ff ff65 	bl	80003c0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0xb8>)
 80004f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000500:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	9b01      	ldr	r3, [sp, #4]
  MX_X_CUBE_AI_Init();
 8000510:	f000 fe34 	bl	800117c <MX_X_CUBE_AI_Init>
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0xb0>
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	58024400 	.word	0x58024400

08000520 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <HAL_MspInit+0x20>)
{
 8000522:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000524:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000528:	f042 0202 	orr.w	r2, r2, #2
 800052c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053c:	b002      	add	sp, #8
 800053e:	4770      	bx	lr
 8000540:	58024400 	.word	0x58024400

08000544 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler>
 8000546:	bf00      	nop

08000548 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <HardFault_Handler>
 800054a:	bf00      	nop

0800054c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler>
 800054e:	bf00      	nop

08000550 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <BusFault_Handler>
 8000552:	bf00      	nop

08000554 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler>
 8000556:	bf00      	nop

08000558 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <DebugMon_Handler>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <PendSV_Handler>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000564:	f000 b8fa 	b.w	800075c <HAL_IncTick>

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056a:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <_sbrk+0x38>)
{
 800056c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <_sbrk+0x3c>)
 8000570:	4d0d      	ldr	r5, [pc, #52]	; (80005a8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000572:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000574:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8000576:	b12a      	cbz	r2, 8000584 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000578:	4413      	add	r3, r2
 800057a:	428b      	cmp	r3, r1
 800057c:	d808      	bhi.n	8000590 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800057e:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000580:	6023      	str	r3, [r4, #0]
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <_sbrk+0x44>)
 8000586:	4602      	mov	r2, r0
 8000588:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4413      	add	r3, r2
 800058c:	428b      	cmp	r3, r1
 800058e:	d9f6      	bls.n	800057e <_sbrk+0x16>
    errno = ENOMEM;
 8000590:	f003 fa92 	bl	8003ab8 <__errno>
 8000594:	230c      	movs	r3, #12
    return (void *)-1;
 8000596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800059a:	6003      	str	r3, [r0, #0]
}
 800059c:	4610      	mov	r0, r2
 800059e:	bd38      	pop	{r3, r4, r5, pc}
 80005a0:	24000c9c 	.word	0x24000c9c
 80005a4:	24050000 	.word	0x24050000
 80005a8:	00000800 	.word	0x00000800
 80005ac:	20000000 	.word	0x20000000

080005b0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b0:	4922      	ldr	r1, [pc, #136]	; (800063c <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80005bc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005c2:	6813      	ldr	r3, [r2, #0]
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d805      	bhi.n	80005d8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005cc:	6813      	ldr	r3, [r2, #0]
 80005ce:	f023 030f 	bic.w	r3, r3, #15
 80005d2:	f043 0307 	orr.w	r3, r3, #7
 80005d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005da:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80005de:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e0:	4817      	ldr	r0, [pc, #92]	; (8000640 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 80005e2:	f041 0101 	orr.w	r1, r1, #1
 80005e6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005e8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	400a      	ands	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	071b      	lsls	r3, r3, #28
 80005f4:	d505      	bpl.n	8000602 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f6:	6803      	ldr	r3, [r0, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	f043 0307 	orr.w	r3, r3, #7
 8000600:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <SystemInit+0x94>)
 8000604:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000606:	4911      	ldr	r1, [pc, #68]	; (800064c <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000608:	4c11      	ldr	r4, [pc, #68]	; (8000650 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 800060c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800060e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000610:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000612:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000614:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000618:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800061a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800061e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000620:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000622:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000624:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000626:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800062a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800062e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000630:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000632:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	52002000 	.word	0x52002000
 8000644:	58024400 	.word	0x58024400
 8000648:	eaf6ed7f 	.word	0xeaf6ed7f
 800064c:	01010280 	.word	0x01010280
 8000650:	02020200 	.word	0x02020200
 8000654:	01ff0000 	.word	0x01ff0000
 8000658:	52004000 	.word	0x52004000

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f7ff ffa6 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f003 fa1b 	bl	8003ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068e:	f7ff fee9 	bl	8000464 <main>
  bx  lr
 8000692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000698:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800069c:	24000c68 	.word	0x24000c68
  ldr r2, =_sidata
 80006a0:	08036c04 	.word	0x08036c04
  ldr r2, =_sbss
 80006a4:	24000c80 	.word	0x24000c80
  ldr r4, =_ebss
 80006a8:	2400136c 	.word	0x2400136c

080006ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC3_IRQHandler>
	...

080006b0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_InitTick+0x40>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b90b      	cbnz	r3, 80006ba <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80006b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006b8:	4770      	bx	lr
{
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_InitTick+0x44>)
 80006c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80006c8:	6810      	ldr	r0, [r2, #0]
 80006ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80006ce:	f000 f8a7 	bl	8000820 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	2c0f      	cmp	r4, #15
 80006d4:	d800      	bhi.n	80006d8 <HAL_InitTick+0x28>
 80006d6:	b108      	cbz	r0, 80006dc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
}
 80006da:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	4621      	mov	r1, r4
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e4:	f000 f85e 	bl	80007a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_InitTick+0x48>)
 80006ea:	2000      	movs	r0, #0
 80006ec:	601c      	str	r4, [r3, #0]
}
 80006ee:	bd10      	pop	{r4, pc}
 80006f0:	24000008 	.word	0x24000008
 80006f4:	24000000 	.word	0x24000000
 80006f8:	2400000c 	.word	0x2400000c

080006fc <HAL_Init>:
{
 80006fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fe:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000700:	4c12      	ldr	r4, [pc, #72]	; (800074c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000702:	f000 f83d 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000706:	f000 fb71 	bl	8000dec <HAL_RCC_GetSysClockFreq>
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_Init+0x54>)
 800070c:	4911      	ldr	r1, [pc, #68]	; (8000754 <HAL_Init+0x58>)
 800070e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000710:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000712:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000716:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800071a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800071c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800071e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000724:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000728:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800072a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800072e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000730:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000732:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000734:	f7ff ffbc 	bl	80006b0 <HAL_InitTick>
 8000738:	b110      	cbz	r0, 8000740 <HAL_Init+0x44>
    return HAL_ERROR;
 800073a:	2401      	movs	r4, #1
}
 800073c:	4620      	mov	r0, r4
 800073e:	bd10      	pop	{r4, pc}
 8000740:	4604      	mov	r4, r0
  HAL_MspInit();
 8000742:	f7ff feed 	bl	8000520 <HAL_MspInit>
}
 8000746:	4620      	mov	r0, r4
 8000748:	bd10      	pop	{r4, pc}
 800074a:	bf00      	nop
 800074c:	24000004 	.word	0x24000004
 8000750:	58024400 	.word	0x58024400
 8000754:	080055b0 	.word	0x080055b0
 8000758:	24000000 	.word	0x24000000

0800075c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <HAL_IncTick+0x10>)
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <HAL_IncTick+0x14>)
 8000760:	6811      	ldr	r1, [r2, #0]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	440b      	add	r3, r1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	24000ca0 	.word	0x24000ca0
 8000770:	24000008 	.word	0x24000008

08000774 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <HAL_GetTick+0x8>)
 8000776:	6818      	ldr	r0, [r3, #0]
}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	24000ca0 	.word	0x24000ca0

08000780 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000786:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800078a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000790:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000796:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000798:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	05fa0000 	.word	0x05fa0000

080007a4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_NVIC_SetPriority+0x70>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ae:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b6:	f1be 0f04 	cmp.w	lr, #4
 80007ba:	bf28      	it	cs
 80007bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c0:	f1bc 0f06 	cmp.w	ip, #6
 80007c4:	d91a      	bls.n	80007fc <HAL_NVIC_SetPriority+0x58>
 80007c6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007cc:	fa0c fc03 	lsl.w	ip, ip, r3
 80007d0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80007d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007da:	fa0c fc0e 	lsl.w	ip, ip, lr
 80007de:	ea21 010c 	bic.w	r1, r1, ip
 80007e2:	fa01 f103 	lsl.w	r1, r1, r3
 80007e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80007ea:	db0a      	blt.n	8000802 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	0109      	lsls	r1, r1, #4
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_NVIC_SetPriority+0x74>)
 80007f0:	b2c9      	uxtb	r1, r1
 80007f2:	4403      	add	r3, r0
 80007f4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80007fc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	4613      	mov	r3, r2
 8000800:	e7e8      	b.n	80007d4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	f000 000f 	and.w	r0, r0, #15
 8000806:	0109      	lsls	r1, r1, #4
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_NVIC_SetPriority+0x78>)
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4403      	add	r3, r0
 800080e:	7619      	strb	r1, [r3, #24]
 8000810:	f85d fb04 	ldr.w	pc, [sp], #4
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ecfc 	.word	0xe000ecfc

08000820 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	1e43      	subs	r3, r0, #1
 8000822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000826:	d20c      	bcs.n	8000842 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000828:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	4906      	ldr	r1, [pc, #24]	; (8000848 <HAL_SYSTICK_Config+0x28>)
 8000830:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000834:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800084c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800084e:	4c10      	ldr	r4, [pc, #64]	; (8000890 <HAL_PWREx_ConfigSupply+0x44>)
 8000850:	68e3      	ldr	r3, [r4, #12]
 8000852:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000856:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000858:	d105      	bne.n	8000866 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800085a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800085e:	1a18      	subs	r0, r3, r0
 8000860:	bf18      	it	ne
 8000862:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000864:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000866:	f023 0307 	bic.w	r3, r3, #7
 800086a:	4303      	orrs	r3, r0
 800086c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800086e:	f7ff ff81 	bl	8000774 <HAL_GetTick>
 8000872:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000874:	e005      	b.n	8000882 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000876:	f7ff ff7d 	bl	8000774 <HAL_GetTick>
 800087a:	1b40      	subs	r0, r0, r5
 800087c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000880:	d804      	bhi.n	800088c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	049b      	lsls	r3, r3, #18
 8000886:	d5f6      	bpl.n	8000876 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8000888:	2000      	movs	r0, #0
}
 800088a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
}
 800088e:	bd38      	pop	{r3, r4, r5, pc}
 8000890:	58024800 	.word	0x58024800

08000894 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000894:	2800      	cmp	r0, #0
 8000896:	f000 81bd 	beq.w	8000c14 <HAL_RCC_OscConfig+0x380>
{
 800089a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089c:	6803      	ldr	r3, [r0, #0]
 800089e:	4604      	mov	r4, r0
 80008a0:	07d9      	lsls	r1, r3, #31
 80008a2:	d52e      	bpl.n	8000902 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008a4:	4993      	ldr	r1, [pc, #588]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 80008a6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80008a8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008aa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80008ae:	2a10      	cmp	r2, #16
 80008b0:	f000 80f0 	beq.w	8000a94 <HAL_RCC_OscConfig+0x200>
 80008b4:	2a18      	cmp	r2, #24
 80008b6:	f000 80e8 	beq.w	8000a8a <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	6863      	ldr	r3, [r4, #4]
 80008bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c0:	f000 8108 	beq.w	8000ad4 <HAL_RCC_OscConfig+0x240>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 8146 	beq.w	8000b56 <HAL_RCC_OscConfig+0x2c2>
 80008ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ce:	4b89      	ldr	r3, [pc, #548]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	f000 8254 	beq.w	8000d7e <HAL_RCC_OscConfig+0x4ea>
 80008d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008e4:	f7ff ff46 	bl	8000774 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008e8:	4e82      	ldr	r6, [pc, #520]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80008ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008ec:	e005      	b.n	80008fa <HAL_RCC_OscConfig+0x66>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008ee:	f7ff ff41 	bl	8000774 <HAL_GetTick>
 80008f2:	1b40      	subs	r0, r0, r5
 80008f4:	2864      	cmp	r0, #100	; 0x64
 80008f6:	f200 812c 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008fa:	6833      	ldr	r3, [r6, #0]
 80008fc:	039b      	lsls	r3, r3, #14
 80008fe:	d5f6      	bpl.n	80008ee <HAL_RCC_OscConfig+0x5a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	079d      	lsls	r5, r3, #30
 8000904:	d47e      	bmi.n	8000a04 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000906:	06d9      	lsls	r1, r3, #27
 8000908:	d528      	bpl.n	800095c <HAL_RCC_OscConfig+0xc8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800090a:	497a      	ldr	r1, [pc, #488]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 800090c:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800090e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000910:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000914:	2a08      	cmp	r2, #8
 8000916:	f000 80cd 	beq.w	8000ab4 <HAL_RCC_OscConfig+0x220>
 800091a:	2a18      	cmp	r2, #24
 800091c:	f000 80c5 	beq.w	8000aaa <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000920:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000922:	4d74      	ldr	r5, [pc, #464]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 814e 	beq.w	8000bc6 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000932:	f7ff ff1f 	bl	8000774 <HAL_GetTick>
 8000936:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000938:	e005      	b.n	8000946 <HAL_RCC_OscConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800093a:	f7ff ff1b 	bl	8000774 <HAL_GetTick>
 800093e:	1b80      	subs	r0, r0, r6
 8000940:	2802      	cmp	r0, #2
 8000942:	f200 8106 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	d5f6      	bpl.n	800093a <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800094c:	68eb      	ldr	r3, [r5, #12]
 800094e:	6a22      	ldr	r2, [r4, #32]
 8000950:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000954:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000958:	60eb      	str	r3, [r5, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	071d      	lsls	r5, r3, #28
 800095e:	d516      	bpl.n	800098e <HAL_RCC_OscConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000960:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000962:	4d64      	ldr	r5, [pc, #400]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000964:	2b00      	cmp	r3, #0
 8000966:	f000 810c 	beq.w	8000b82 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 800096a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	676b      	str	r3, [r5, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000972:	f7ff feff 	bl	8000774 <HAL_GetTick>
 8000976:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000978:	e005      	b.n	8000986 <HAL_RCC_OscConfig+0xf2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097a:	f7ff fefb 	bl	8000774 <HAL_GetTick>
 800097e:	1b80      	subs	r0, r0, r6
 8000980:	2802      	cmp	r0, #2
 8000982:	f200 80e6 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000986:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000988:	0798      	lsls	r0, r3, #30
 800098a:	d5f6      	bpl.n	800097a <HAL_RCC_OscConfig+0xe6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	069a      	lsls	r2, r3, #26
 8000990:	d516      	bpl.n	80009c0 <HAL_RCC_OscConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000992:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000994:	4d57      	ldr	r5, [pc, #348]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 8104 	beq.w	8000ba4 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a2:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fee6 	bl	8000774 <HAL_GetTick>
 80009a8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80009aa:	e005      	b.n	80009b8 <HAL_RCC_OscConfig+0x124>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80009ac:	f7ff fee2 	bl	8000774 <HAL_GetTick>
 80009b0:	1b80      	subs	r0, r0, r6
 80009b2:	2802      	cmp	r0, #2
 80009b4:	f200 80cd 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	049f      	lsls	r7, r3, #18
 80009bc:	d5f6      	bpl.n	80009ac <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	f100 808d 	bmi.w	8000ae0 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009c8:	b1d0      	cbz	r0, 8000a00 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80009ca:	4d4a      	ldr	r5, [pc, #296]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 80009cc:	692b      	ldr	r3, [r5, #16]
 80009ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009d2:	2b18      	cmp	r3, #24
 80009d4:	f000 8185 	beq.w	8000ce2 <HAL_RCC_OscConfig+0x44e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009d8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009da:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009e2:	f000 8119 	beq.w	8000c18 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009e6:	f7ff fec5 	bl	8000774 <HAL_GetTick>
 80009ea:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80009ec:	e005      	b.n	80009fa <HAL_RCC_OscConfig+0x166>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009ee:	f7ff fec1 	bl	8000774 <HAL_GetTick>
 80009f2:	1b00      	subs	r0, r0, r4
 80009f4:	2802      	cmp	r0, #2
 80009f6:	f200 80ac 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	019b      	lsls	r3, r3, #6
 80009fe:	d4f6      	bmi.n	80009ee <HAL_RCC_OscConfig+0x15a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8000a00:	2000      	movs	r0, #0
}
 8000a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a04:	4a3b      	ldr	r2, [pc, #236]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000a06:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a08:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a0a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000a0e:	d122      	bne.n	8000a56 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000a12:	68e2      	ldr	r2, [r4, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d501      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x18a>
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d043      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a1e:	4d35      	ldr	r5, [pc, #212]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	f023 0319 	bic.w	r3, r3, #25
 8000a26:	4313      	orrs	r3, r2
 8000a28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fea3 	bl	8000774 <HAL_GetTick>
 8000a2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a30:	e005      	b.n	8000a3e <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a32:	f7ff fe9f 	bl	8000774 <HAL_GetTick>
 8000a36:	1b80      	subs	r0, r0, r6
 8000a38:	2802      	cmp	r0, #2
 8000a3a:	f200 808a 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	d5f6      	bpl.n	8000a32 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a44:	686b      	ldr	r3, [r5, #4]
 8000a46:	6922      	ldr	r2, [r4, #16]
 8000a48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000a4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a50:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	e757      	b.n	8000906 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a56:	2b18      	cmp	r3, #24
 8000a58:	f000 80d8 	beq.w	8000c0c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a5c:	4d25      	ldr	r5, [pc, #148]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a5e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a60:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 80c1 	beq.w	8000bea <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a68:	f023 0319 	bic.w	r3, r3, #25
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a70:	f7ff fe80 	bl	8000774 <HAL_GetTick>
 8000a74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a76:	e004      	b.n	8000a82 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a78:	f7ff fe7c 	bl	8000774 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d867      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	075f      	lsls	r7, r3, #29
 8000a86:	d5f7      	bpl.n	8000a78 <HAL_RCC_OscConfig+0x1e4>
 8000a88:	e7dc      	b.n	8000a44 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a8a:	f001 0103 	and.w	r1, r1, #3
 8000a8e:	2902      	cmp	r1, #2
 8000a90:	f47f af13 	bne.w	80008ba <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	0392      	lsls	r2, r2, #14
 8000a9a:	f57f af32 	bpl.w	8000902 <HAL_RCC_OscConfig+0x6e>
 8000a9e:	6862      	ldr	r2, [r4, #4]
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	f47f af2e 	bne.w	8000902 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8000aa6:	2001      	movs	r0, #1
}
 8000aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000aaa:	f001 0103 	and.w	r1, r1, #3
 8000aae:	2901      	cmp	r1, #1
 8000ab0:	f47f af36 	bne.w	8000920 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000ab6:	6812      	ldr	r2, [r2, #0]
 8000ab8:	05d2      	lsls	r2, r2, #23
 8000aba:	d502      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x22e>
 8000abc:	69e2      	ldr	r2, [r4, #28]
 8000abe:	2a80      	cmp	r2, #128	; 0x80
 8000ac0:	d1f1      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000ac4:	6a20      	ldr	r0, [r4, #32]
 8000ac6:	68ca      	ldr	r2, [r1, #12]
 8000ac8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000acc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000ad0:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ad2:	e743      	b.n	800095c <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_RCC_OscConfig+0x260>)
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000adc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ade:	e701      	b.n	80008e4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8000ae0:	4d05      	ldr	r5, [pc, #20]	; (8000af8 <HAL_RCC_OscConfig+0x264>)
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000aea:	f7ff fe43 	bl	8000774 <HAL_GetTick>
 8000aee:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000af0:	e009      	b.n	8000b06 <HAL_RCC_OscConfig+0x272>
 8000af2:	bf00      	nop
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afc:	f7ff fe3a 	bl	8000774 <HAL_GetTick>
 8000b00:	1b80      	subs	r0, r0, r6
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d825      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	05da      	lsls	r2, r3, #23
 8000b0a:	d5f7      	bpl.n	8000afc <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	68a3      	ldr	r3, [r4, #8]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	f000 815c 	beq.w	8000dcc <HAL_RCC_OscConfig+0x538>
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 813a 	beq.w	8000d8e <HAL_RCC_OscConfig+0x4fa>
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	4ba8      	ldr	r3, [pc, #672]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
 8000b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b20:	f000 815a 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x544>
 8000b24:	f022 0201 	bic.w	r2, r2, #1
 8000b28:	671a      	str	r2, [r3, #112]	; 0x70
 8000b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b2c:	f022 0204 	bic.w	r2, r2, #4
 8000b30:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b32:	f7ff fe1f 	bl	8000774 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b36:	4ea2      	ldr	r6, [pc, #648]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b38:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b3c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b3e:	e004      	b.n	8000b4a <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b40:	f7ff fe18 	bl	8000774 <HAL_GetTick>
 8000b44:	1b40      	subs	r0, r0, r5
 8000b46:	42b8      	cmp	r0, r7
 8000b48:	d803      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b4a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b4c:	079b      	lsls	r3, r3, #30
 8000b4e:	d5f7      	bpl.n	8000b40 <HAL_RCC_OscConfig+0x2ac>
 8000b50:	e739      	b.n	80009c6 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8000b52:	2003      	movs	r0, #3
}
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b56:	4d9a      	ldr	r5, [pc, #616]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5e:	602b      	str	r3, [r5, #0]
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b68:	f7ff fe04 	bl	8000774 <HAL_GetTick>
 8000b6c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b6e:	e004      	b.n	8000b7a <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b70:	f7ff fe00 	bl	8000774 <HAL_GetTick>
 8000b74:	1b80      	subs	r0, r0, r6
 8000b76:	2864      	cmp	r0, #100	; 0x64
 8000b78:	d8eb      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	039f      	lsls	r7, r3, #14
 8000b7e:	d4f7      	bmi.n	8000b70 <HAL_RCC_OscConfig+0x2dc>
 8000b80:	e6be      	b.n	8000900 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8000b82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b84:	f023 0301 	bic.w	r3, r3, #1
 8000b88:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fdf3 	bl	8000774 <HAL_GetTick>
 8000b8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b90:	e004      	b.n	8000b9c <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b92:	f7ff fdef 	bl	8000774 <HAL_GetTick>
 8000b96:	1b80      	subs	r0, r0, r6
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d8da      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b9e:	0799      	lsls	r1, r3, #30
 8000ba0:	d4f7      	bmi.n	8000b92 <HAL_RCC_OscConfig+0x2fe>
 8000ba2:	e6f3      	b.n	800098c <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000baa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000bac:	f7ff fde2 	bl	8000774 <HAL_GetTick>
 8000bb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bb2:	e004      	b.n	8000bbe <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bb4:	f7ff fdde 	bl	8000774 <HAL_GetTick>
 8000bb8:	1b80      	subs	r0, r0, r6
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d8c9      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	0498      	lsls	r0, r3, #18
 8000bc2:	d4f7      	bmi.n	8000bb4 <HAL_RCC_OscConfig+0x320>
 8000bc4:	e6fb      	b.n	80009be <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bce:	f7ff fdd1 	bl	8000774 <HAL_GetTick>
 8000bd2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000bd4:	e004      	b.n	8000be0 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000bd6:	f7ff fdcd 	bl	8000774 <HAL_GetTick>
 8000bda:	1b80      	subs	r0, r0, r6
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d8b8      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	05df      	lsls	r7, r3, #23
 8000be4:	d4f7      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	e6b8      	b.n	800095c <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8000bea:	f023 0301 	bic.w	r3, r3, #1
 8000bee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fdc0 	bl	8000774 <HAL_GetTick>
 8000bf4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bf6:	e004      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fdbc 	bl	8000774 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d8a7      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	0758      	lsls	r0, r3, #29
 8000c06:	d4f7      	bmi.n	8000bf8 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	e67c      	b.n	8000906 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c0c:	0790      	lsls	r0, r2, #30
 8000c0e:	f47f af25 	bne.w	8000a5c <HAL_RCC_OscConfig+0x1c8>
 8000c12:	e6fd      	b.n	8000a10 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8000c14:	2001      	movs	r0, #1
}
 8000c16:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000c18:	f7ff fdac 	bl	8000774 <HAL_GetTick>
 8000c1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c1e:	e004      	b.n	8000c2a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c20:	f7ff fda8 	bl	8000774 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d893      	bhi.n	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c2a:	682b      	ldr	r3, [r5, #0]
 8000c2c:	0199      	lsls	r1, r3, #6
 8000c2e:	d4f7      	bmi.n	8000c20 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c30:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000c32:	4b64      	ldr	r3, [pc, #400]	; (8000dc4 <HAL_RCC_OscConfig+0x530>)
 8000c34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c36:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000c38:	4963      	ldr	r1, [pc, #396]	; (8000dc8 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000c3a:	4e61      	ldr	r6, [pc, #388]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c44:	62ab      	str	r3, [r5, #40]	; 0x28
 8000c46:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	025b      	lsls	r3, r3, #9
 8000c50:	0412      	lsls	r2, r2, #16
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c62:	4313      	orrs	r3, r2
 8000c64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000c66:	3a01      	subs	r2, #1
 8000c68:	0612      	lsls	r2, r2, #24
 8000c6a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8000c72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000c7a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c7e:	4011      	ands	r1, r2
 8000c80:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000c84:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000c86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c8a:	f023 030c 	bic.w	r3, r3, #12
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000c92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c94:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000c9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000ca6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000cae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8000cb6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fd55 	bl	8000774 <HAL_GetTick>
 8000cca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ccc:	e005      	b.n	8000cda <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cce:	f7ff fd51 	bl	8000774 <HAL_GetTick>
 8000cd2:	1b00      	subs	r0, r0, r4
 8000cd4:	2802      	cmp	r0, #2
 8000cd6:	f63f af3c 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cda:	6833      	ldr	r3, [r6, #0]
 8000cdc:	019a      	lsls	r2, r3, #6
 8000cde:	d5f6      	bpl.n	8000cce <HAL_RCC_OscConfig+0x43a>
 8000ce0:	e68e      	b.n	8000a00 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ce2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000ce4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000ce6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ce8:	f43f ae8b 	beq.w	8000a02 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cec:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cf0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	f47f aed7 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000cf8:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f47f aed1 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d06:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8000d0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f47f aeca 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d14:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8000d18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	f47f aec3 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d22:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8000d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f47f aebc 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d30:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8000d34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d36:	429e      	cmp	r6, r3
 8000d38:	f47f aeb5 	bne.w	8000aa6 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000d3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000d3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000d40:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f43f ae5b 	beq.w	8000a00 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
 8000d4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8000d54:	f7ff fd0e 	bl	8000774 <HAL_GetTick>
 8000d58:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8000d5a:	f7ff fd0b 	bl	8000774 <HAL_GetTick>
 8000d5e:	42a8      	cmp	r0, r5
 8000d60:	d0fb      	beq.n	8000d5a <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8000d64:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000d66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_RCC_OscConfig+0x534>)
 8000d6a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8000d6c:	4023      	ands	r3, r4
 8000d6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d72:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8000d74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e5aa      	b.n	80008e4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d8e:	4d0c      	ldr	r5, [pc, #48]	; (8000dc0 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d90:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	672b      	str	r3, [r5, #112]	; 0x70
 8000d9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d9e:	f023 0304 	bic.w	r3, r3, #4
 8000da2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000da4:	f7ff fce6 	bl	8000774 <HAL_GetTick>
 8000da8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000daa:	e005      	b.n	8000db8 <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f7ff fce2 	bl	8000774 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	42b8      	cmp	r0, r7
 8000db4:	f63f aecd 	bhi.w	8000b52 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000db8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dba:	0798      	lsls	r0, r3, #30
 8000dbc:	d4f6      	bmi.n	8000dac <HAL_RCC_OscConfig+0x518>
 8000dbe:	e602      	b.n	80009c6 <HAL_RCC_OscConfig+0x132>
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	fffffc0c 	.word	0xfffffc0c
 8000dc8:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_RCC_OscConfig+0x554>)
 8000dce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dd6:	e6ac      	b.n	8000b32 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd8:	f042 0204 	orr.w	r2, r2, #4
 8000ddc:	671a      	str	r2, [r3, #112]	; 0x70
 8000dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000de0:	f042 0201 	orr.w	r2, r2, #1
 8000de4:	671a      	str	r2, [r3, #112]	; 0x70
 8000de6:	e6a4      	b.n	8000b32 <HAL_RCC_OscConfig+0x29e>
 8000de8:	58024400 	.word	0x58024400

08000dec <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dec:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <HAL_RCC_GetSysClockFreq+0x120>)
 8000dee:	6913      	ldr	r3, [r2, #16]
 8000df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000df4:	2b10      	cmp	r3, #16
 8000df6:	d004      	beq.n	8000e02 <HAL_RCC_GetSysClockFreq+0x16>
 8000df8:	2b18      	cmp	r3, #24
 8000dfa:	d00d      	beq.n	8000e18 <HAL_RCC_GetSysClockFreq+0x2c>
 8000dfc:	b11b      	cbz	r3, 8000e06 <HAL_RCC_GetSysClockFreq+0x1a>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8000dfe:	4844      	ldr	r0, [pc, #272]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x124>)
 8000e00:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e02:	4844      	ldr	r0, [pc, #272]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x128>)
 8000e04:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	0699      	lsls	r1, r3, #26
 8000e0a:	d54a      	bpl.n	8000ea2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	4842      	ldr	r0, [pc, #264]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000e10:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000e14:	40d8      	lsrs	r0, r3
 8000e16:	4770      	bx	lr
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e18:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8000e1a:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000e1c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000e1e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8000e20:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e24:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000e26:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8000e2a:	d038      	beq.n	8000e9e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e2c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000e30:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e34:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000e38:	fb05 f101 	mul.w	r1, r5, r1
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	ee07 1a90 	vmov	s15, r1
 8000e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8000e46:	d002      	beq.n	8000e4e <HAL_RCC_GetSysClockFreq+0x62>
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d02c      	beq.n	8000ea6 <HAL_RCC_GetSysClockFreq+0xba>
 8000e4c:	b393      	cbz	r3, 8000eb4 <HAL_RCC_GetSysClockFreq+0xc8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000e4e:	ee07 0a90 	vmov	s15, r0
 8000e52:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8000f1c <HAL_RCC_GetSysClockFreq+0x130>
 8000e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e5c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8000e60:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8000f20 <HAL_RCC_GetSysClockFreq+0x134>
 8000e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e74:	eee7 7a25 	vfma.f32	s15, s14, s11
 8000e78:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_RCC_GetSysClockFreq+0x120>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000e88:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9a:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8000e9e:	bc30      	pop	{r4, r5}
 8000ea0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000ea2:	481d      	ldr	r0, [pc, #116]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8000ea4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ea6:	ee07 0a90 	vmov	s15, r0
 8000eaa:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8000f24 <HAL_RCC_GetSysClockFreq+0x138>
 8000eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb2:	e7d2      	b.n	8000e5a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	069b      	lsls	r3, r3, #26
 8000eb8:	d520      	bpl.n	8000efc <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000eba:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ebc:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ec0:	4915      	ldr	r1, [pc, #84]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ec2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8000ec6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ec8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8000f20 <HAL_RCC_GetSysClockFreq+0x134>
 8000ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000ed8:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000eda:	ee06 3a90 	vmov	s13, r3
 8000ede:	ee06 1a10 	vmov	s12, r1
 8000ee2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000ee6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000eea:	eee7 6a05 	vfma.f32	s13, s14, s10
 8000eee:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000ef2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8000ef6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000efa:	e7c1      	b.n	8000e80 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000efc:	ee07 0a90 	vmov	s15, r0
 8000f00:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8000f28 <HAL_RCC_GetSysClockFreq+0x13c>
 8000f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f08:	e7a7      	b.n	8000e5a <HAL_RCC_GetSysClockFreq+0x6e>
 8000f0a:	bf00      	nop
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	003d0900 	.word	0x003d0900
 8000f14:	007a1200 	.word	0x007a1200
 8000f18:	03d09000 	.word	0x03d09000
 8000f1c:	4a742400 	.word	0x4a742400
 8000f20:	39000000 	.word	0x39000000
 8000f24:	4af42400 	.word	0x4af42400
 8000f28:	4c742400 	.word	0x4c742400

08000f2c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 810c 	beq.w	800114a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f32:	4a8c      	ldr	r2, [pc, #560]	; (8001164 <HAL_RCC_ClockConfig+0x238>)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	428b      	cmp	r3, r1
{
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	4604      	mov	r4, r0
 8000f42:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f44:	d20c      	bcs.n	8000f60 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d002      	beq.n	8000f60 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
}
 8000f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	075f      	lsls	r7, r3, #29
 8000f64:	d50b      	bpl.n	8000f7e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8000f66:	4980      	ldr	r1, [pc, #512]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000f68:	6920      	ldr	r0, [r4, #16]
 8000f6a:	698a      	ldr	r2, [r1, #24]
 8000f6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f70:	4290      	cmp	r0, r2
 8000f72:	d904      	bls.n	8000f7e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000f74:	698a      	ldr	r2, [r1, #24]
 8000f76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f7a:	4302      	orrs	r2, r0
 8000f7c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7e:	071e      	lsls	r6, r3, #28
 8000f80:	d50b      	bpl.n	8000f9a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000f82:	4979      	ldr	r1, [pc, #484]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000f84:	6960      	ldr	r0, [r4, #20]
 8000f86:	69ca      	ldr	r2, [r1, #28]
 8000f88:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d904      	bls.n	8000f9a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000f90:	69ca      	ldr	r2, [r1, #28]
 8000f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f96:	4302      	orrs	r2, r0
 8000f98:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f9a:	06d8      	lsls	r0, r3, #27
 8000f9c:	d50b      	bpl.n	8000fb6 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000f9e:	4972      	ldr	r1, [pc, #456]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000fa0:	69a0      	ldr	r0, [r4, #24]
 8000fa2:	69ca      	ldr	r2, [r1, #28]
 8000fa4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000fa8:	4290      	cmp	r0, r2
 8000faa:	d904      	bls.n	8000fb6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000fac:	69ca      	ldr	r2, [r1, #28]
 8000fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000fb6:	0699      	lsls	r1, r3, #26
 8000fb8:	d50b      	bpl.n	8000fd2 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000fba:	496b      	ldr	r1, [pc, #428]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000fbc:	69e0      	ldr	r0, [r4, #28]
 8000fbe:	6a0a      	ldr	r2, [r1, #32]
 8000fc0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d904      	bls.n	8000fd2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8000fc8:	6a0a      	ldr	r2, [r1, #32]
 8000fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fce:	4302      	orrs	r2, r0
 8000fd0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd2:	079a      	lsls	r2, r3, #30
 8000fd4:	f140 80ab 	bpl.w	800112e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8000fd8:	4863      	ldr	r0, [pc, #396]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000fda:	68e1      	ldr	r1, [r4, #12]
 8000fdc:	6982      	ldr	r2, [r0, #24]
 8000fde:	f002 020f 	and.w	r2, r2, #15
 8000fe2:	4291      	cmp	r1, r2
 8000fe4:	d904      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe6:	6982      	ldr	r2, [r0, #24]
 8000fe8:	f022 020f 	bic.w	r2, r2, #15
 8000fec:	430a      	orrs	r2, r1
 8000fee:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff0:	07d8      	lsls	r0, r3, #31
 8000ff2:	d530      	bpl.n	8001056 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8000ff4:	4a5c      	ldr	r2, [pc, #368]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8000ff6:	68a1      	ldr	r1, [r4, #8]
 8000ff8:	6993      	ldr	r3, [r2, #24]
 8000ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001002:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001004:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001006:	2902      	cmp	r1, #2
 8001008:	f000 80a1 	beq.w	800114e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100c:	2903      	cmp	r1, #3
 800100e:	f000 8098 	beq.w	8001142 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001012:	2901      	cmp	r1, #1
 8001014:	f000 80a1 	beq.w	800115a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001018:	0758      	lsls	r0, r3, #29
 800101a:	d59e      	bpl.n	8000f5a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800101c:	4e52      	ldr	r6, [pc, #328]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001022:	6933      	ldr	r3, [r6, #16]
 8001024:	f023 0307 	bic.w	r3, r3, #7
 8001028:	430b      	orrs	r3, r1
 800102a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800102c:	f7ff fba2 	bl	8000774 <HAL_GetTick>
 8001030:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	e005      	b.n	8001040 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fb9e 	bl	8000774 <HAL_GetTick>
 8001038:	1bc0      	subs	r0, r0, r7
 800103a:	4540      	cmp	r0, r8
 800103c:	f200 808b 	bhi.w	8001156 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001040:	6933      	ldr	r3, [r6, #16]
 8001042:	6862      	ldr	r2, [r4, #4]
 8001044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001048:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800104c:	d1f2      	bne.n	8001034 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	0799      	lsls	r1, r3, #30
 8001052:	d506      	bpl.n	8001062 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001054:	68e1      	ldr	r1, [r4, #12]
 8001056:	4844      	ldr	r0, [pc, #272]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 8001058:	6982      	ldr	r2, [r0, #24]
 800105a:	f002 020f 	and.w	r2, r2, #15
 800105e:	428a      	cmp	r2, r1
 8001060:	d869      	bhi.n	8001136 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001062:	4940      	ldr	r1, [pc, #256]	; (8001164 <HAL_RCC_ClockConfig+0x238>)
 8001064:	680a      	ldr	r2, [r1, #0]
 8001066:	f002 020f 	and.w	r2, r2, #15
 800106a:	42aa      	cmp	r2, r5
 800106c:	d90a      	bls.n	8001084 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	680a      	ldr	r2, [r1, #0]
 8001070:	f022 020f 	bic.w	r2, r2, #15
 8001074:	432a      	orrs	r2, r5
 8001076:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001078:	680a      	ldr	r2, [r1, #0]
 800107a:	f002 020f 	and.w	r2, r2, #15
 800107e:	42aa      	cmp	r2, r5
 8001080:	f47f af6b 	bne.w	8000f5a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	d50b      	bpl.n	80010a0 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001088:	4937      	ldr	r1, [pc, #220]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 800108a:	6920      	ldr	r0, [r4, #16]
 800108c:	698a      	ldr	r2, [r1, #24]
 800108e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001092:	4290      	cmp	r0, r2
 8001094:	d204      	bcs.n	80010a0 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001096:	698a      	ldr	r2, [r1, #24]
 8001098:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800109c:	4302      	orrs	r2, r0
 800109e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	071f      	lsls	r7, r3, #28
 80010a2:	d50b      	bpl.n	80010bc <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80010a4:	4930      	ldr	r1, [pc, #192]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 80010a6:	6960      	ldr	r0, [r4, #20]
 80010a8:	69ca      	ldr	r2, [r1, #28]
 80010aa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d204      	bcs.n	80010bc <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80010b2:	69ca      	ldr	r2, [r1, #28]
 80010b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010b8:	4302      	orrs	r2, r0
 80010ba:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010bc:	06de      	lsls	r6, r3, #27
 80010be:	d50b      	bpl.n	80010d8 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80010c0:	4929      	ldr	r1, [pc, #164]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 80010c2:	69a0      	ldr	r0, [r4, #24]
 80010c4:	69ca      	ldr	r2, [r1, #28]
 80010c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80010ca:	4290      	cmp	r0, r2
 80010cc:	d204      	bcs.n	80010d8 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80010ce:	69ca      	ldr	r2, [r1, #28]
 80010d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010d4:	4302      	orrs	r2, r0
 80010d6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80010d8:	069d      	lsls	r5, r3, #26
 80010da:	d50b      	bpl.n	80010f4 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 80010de:	69e1      	ldr	r1, [r4, #28]
 80010e0:	6a13      	ldr	r3, [r2, #32]
 80010e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010e6:	4299      	cmp	r1, r3
 80010e8:	d204      	bcs.n	80010f4 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80010ea:	6a13      	ldr	r3, [r2, #32]
 80010ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f4:	f7ff fe7a 	bl	8000dec <HAL_RCC_GetSysClockFreq>
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_RCC_ClockConfig+0x23c>)
 80010fa:	4603      	mov	r3, r0
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <HAL_RCC_ClockConfig+0x240>)
 80010fe:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001100:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001102:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8001106:	4d1a      	ldr	r5, [pc, #104]	; (8001170 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001108:	f002 020f 	and.w	r2, r2, #15
 800110c:	4c19      	ldr	r4, [pc, #100]	; (8001174 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800110e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001110:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001112:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001118:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800111c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800111e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8001120:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001122:	40d3      	lsrs	r3, r2
 8001124:	6023      	str	r3, [r4, #0]
}
 8001126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800112a:	f7ff bac1 	b.w	80006b0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112e:	07da      	lsls	r2, r3, #31
 8001130:	f53f af60 	bmi.w	8000ff4 <HAL_RCC_ClockConfig+0xc8>
 8001134:	e795      	b.n	8001062 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001136:	6982      	ldr	r2, [r0, #24]
 8001138:	f022 020f 	bic.w	r2, r2, #15
 800113c:	430a      	orrs	r2, r1
 800113e:	6182      	str	r2, [r0, #24]
 8001140:	e78f      	b.n	8001062 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001142:	019f      	lsls	r7, r3, #6
 8001144:	f53f af6a 	bmi.w	800101c <HAL_RCC_ClockConfig+0xf0>
 8001148:	e707      	b.n	8000f5a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
}
 800114c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800114e:	039b      	lsls	r3, r3, #14
 8001150:	f53f af64 	bmi.w	800101c <HAL_RCC_ClockConfig+0xf0>
 8001154:	e701      	b.n	8000f5a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
 8001158:	e700      	b.n	8000f5c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800115a:	05de      	lsls	r6, r3, #23
 800115c:	f53f af5e 	bmi.w	800101c <HAL_RCC_ClockConfig+0xf0>
 8001160:	e6fb      	b.n	8000f5a <HAL_RCC_ClockConfig+0x2e>
 8001162:	bf00      	nop
 8001164:	52002000 	.word	0x52002000
 8001168:	58024400 	.word	0x58024400
 800116c:	080055b0 	.word	0x080055b0
 8001170:	24000000 	.word	0x24000000
 8001174:	24000004 	.word	0x24000004
 8001178:	2400000c 	.word	0x2400000c

0800117c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800117c:	b530      	push	{r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800117e:	4c18      	ldr	r4, [pc, #96]	; (80011e0 <MX_X_CUBE_AI_Init+0x64>)
{
 8001180:	b083      	sub	sp, #12
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_X_CUBE_AI_Init+0x68>)
 8001184:	f002 fb56 	bl	8003834 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001188:	4917      	ldr	r1, [pc, #92]	; (80011e8 <MX_X_CUBE_AI_Init+0x6c>)
 800118a:	2200      	movs	r2, #0
 800118c:	4620      	mov	r0, r4
 800118e:	f000 f94f 	bl	8001430 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001192:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001196:	d11b      	bne.n	80011d0 <MX_X_CUBE_AI_Init+0x54>
  ai_input = ai_network_inputs_get(network, NULL);
 8001198:	6820      	ldr	r0, [r4, #0]
 800119a:	4d14      	ldr	r5, [pc, #80]	; (80011ec <MX_X_CUBE_AI_Init+0x70>)
 800119c:	9101      	str	r1, [sp, #4]
 800119e:	f000 f831 	bl	8001204 <ai_network_inputs_get>
 80011a2:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network, NULL);
 80011a4:	9901      	ldr	r1, [sp, #4]
 80011a6:	6820      	ldr	r0, [r4, #0]
  ai_input = ai_network_inputs_get(network, NULL);
 80011a8:	602b      	str	r3, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80011aa:	f000 f839 	bl	8001220 <ai_network_outputs_get>
	data_ins[idx] = ai_input[idx].data;
 80011ae:	682a      	ldr	r2, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_X_CUBE_AI_Init+0x74>)
	data_outs[idx] = ai_output[idx].data;
 80011b2:	6841      	ldr	r1, [r0, #4]
  ai_output = ai_network_outputs_get(network, NULL);
 80011b4:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 80011b6:	6a15      	ldr	r5, [r2, #32]
 80011b8:	6850      	ldr	r0, [r2, #4]
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_X_CUBE_AI_Init+0x78>)
 80011bc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80011be:	e9c3 0500 	strd	r0, r5, [r3]
 80011c2:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data_outs[idx] = ai_output[idx].data;
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <MX_X_CUBE_AI_Init+0x7c>)
	data_ins[idx] = ai_input[idx].data;
 80011c6:	e9c3 4002 	strd	r4, r0, [r3, #8]
	data_outs[idx] = ai_output[idx].data;
 80011ca:	6011      	str	r1, [r2, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 80011cc:	b003      	add	sp, #12
 80011ce:	bd30      	pop	{r4, r5, pc}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80011d0:	0a03      	lsrs	r3, r0, #8
 80011d2:	460a      	mov	r2, r1
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <MX_X_CUBE_AI_Init+0x80>)
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <MX_X_CUBE_AI_Init+0x84>)
 80011d8:	f002 fac6 	bl	8003768 <iprintf>
  do {} while (1);
 80011dc:	e7fe      	b.n	80011dc <MX_X_CUBE_AI_Init+0x60>
 80011de:	bf00      	nop
 80011e0:	24000cc0 	.word	0x24000cc0
 80011e4:	080055c0 	.word	0x080055c0
 80011e8:	24000010 	.word	0x24000010
 80011ec:	24000ca4 	.word	0x24000ca4
 80011f0:	24000ca8 	.word	0x24000ca8
 80011f4:	24000cac 	.word	0x24000cac
 80011f8:	24000cbc 	.word	0x24000cbc
 80011fc:	080055fc 	.word	0x080055fc
 8001200:	080055e0 	.word	0x080055e0

08001204 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001204:	b108      	cbz	r0, 800120a <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001206:	f000 bab1 	b.w	800176c <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800120a:	4b03      	ldr	r3, [pc, #12]	; (8001218 <ai_network_inputs_get+0x14>)
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800120e:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001210:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8001212:	f000 baab 	b.w	800176c <ai_platform_inputs_get>
 8001216:	bf00      	nop
 8001218:	24000544 	.word	0x24000544
 800121c:	a1c00100 	.word	0xa1c00100

08001220 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001220:	b108      	cbz	r0, 8001226 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8001222:	f000 bb1b 	b.w	800185c <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <ai_network_outputs_get+0x14>)
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800122a:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800122c:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 800122e:	f000 bb15 	b.w	800185c <ai_platform_outputs_get>
 8001232:	bf00      	nop
 8001234:	24000544 	.word	0x24000544
 8001238:	a1c00100 	.word	0xa1c00100

0800123c <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800123c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	4606      	mov	r6, r0
 8001242:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8001244:	f000 fbc2 	bl	80019cc <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8001248:	4604      	mov	r4, r0
 800124a:	2800      	cmp	r0, #0
 800124c:	f000 80af 	beq.w	80013ae <ai_network_init+0x172>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8001250:	4f5e      	ldr	r7, [pc, #376]	; (80013cc <ai_network_init+0x190>)
 8001252:	462a      	mov	r2, r5
 8001254:	2101      	movs	r1, #1
 8001256:	4638      	mov	r0, r7
 8001258:	f000 f9ac 	bl	80015b4 <ai_platform_get_weights_map>
 800125c:	4681      	mov	r9, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	f000 80a7 	beq.w	80013b2 <ai_network_init+0x176>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001264:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8001414 <ai_network_init+0x1d8>
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001268:	4959      	ldr	r1, [pc, #356]	; (80013d0 <ai_network_init+0x194>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800126a:	f8da 2000 	ldr.w	r2, [sl]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800126e:	683b      	ldr	r3, [r7, #0]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001270:	f042 4b80 	orr.w	fp, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001274:	680a      	ldr	r2, [r1, #0]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8001276:	4f57      	ldr	r7, [pc, #348]	; (80013d4 <ai_network_init+0x198>)
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001278:	f8ca b000 	str.w	fp, [sl]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800127c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001418 <ai_network_init+0x1dc>
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8001280:	f8df e198 	ldr.w	lr, [pc, #408]	; 800141c <ai_network_init+0x1e0>
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001284:	4854      	ldr	r0, [pc, #336]	; (80013d8 <ai_network_init+0x19c>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001286:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8001420 <ai_network_init+0x1e4>
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 800128a:	f8df b198 	ldr.w	fp, [pc, #408]	; 8001424 <ai_network_init+0x1e8>
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800128e:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001292:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001296:	4a51      	ldr	r2, [pc, #324]	; (80013dc <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001298:	449b      	add	fp, r3
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800129a:	6812      	ldr	r2, [r2, #0]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800129c:	f8c1 a000 	str.w	sl, [r1]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80012a0:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
 80012a4:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <ai_network_init+0x1a0>)
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 80012a6:	f8c8 b008 	str.w	fp, [r8, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80012aa:	f8c2 a000 	str.w	sl, [r2]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80012b4:	f8dc 2000 	ldr.w	r2, [ip]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80012b8:	f8c7 a000 	str.w	sl, [r7]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80012bc:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80012c0:	f8de 2000 	ldr.w	r2, [lr]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80012c4:	f8cc a000 	str.w	sl, [ip]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80012c8:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80012cc:	6802      	ldr	r2, [r0, #0]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80012ce:	f8ce a000 	str.w	sl, [lr]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80012d2:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80012d6:	f8d8 2000 	ldr.w	r2, [r8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80012da:	f8c0 a000 	str.w	sl, [r0]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80012de:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2048);
 80012e2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80012e6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 80012ea:	f503 6120 	add.w	r1, r3, #2560	; 0xa00
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <ai_network_init+0x1a0>)
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80012f0:	f8c8 a000 	str.w	sl, [r8]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 80012f4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001428 <ai_network_init+0x1ec>
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 80012f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 80012fc:	f503 3285 	add.w	r2, r3, #68096	; 0x10a00
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001300:	449a      	add	sl, r3
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 8001302:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 68608);
 8001306:	f503 3286 	add.w	r2, r3, #68608	; 0x10c00
 800130a:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 134144);
 800130e:	f503 3203 	add.w	r2, r3, #134144	; 0x20c00
 8001312:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <ai_network_init+0x1a4>)
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 134656);
 8001318:	e9c0 aa02 	strd	sl, sl, [r0, #8]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 800131c:	441a      	add	r2, r3
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800131e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800142c <ai_network_init+0x1f0>
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 8001322:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 200192);
 8001326:	f8c8 b00c 	str.w	fp, [r8, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800132a:	482e      	ldr	r0, [pc, #184]	; (80013e4 <ai_network_init+0x1a8>)
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 200704);
 800132c:	e9ca 3302 	strd	r3, r3, [sl, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8001330:	f8da 3000 	ldr.w	r3, [sl]
 8001334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001338:	f8ca 3000 	str.w	r3, [sl]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800133c:	6803      	ldr	r3, [r0, #0]
 800133e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 201216);
 8001342:	e9c0 2202 	strd	r2, r2, [r0, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8001346:	6003      	str	r3, [r0, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8001348:	4f27      	ldr	r7, [pc, #156]	; (80013e8 <ai_network_init+0x1ac>)
 800134a:	462a      	mov	r2, r5
 800134c:	2101      	movs	r1, #1
 800134e:	4638      	mov	r0, r7
 8001350:	f000 f988 	bl	8001664 <ai_platform_get_activations_map>
 8001354:	4605      	mov	r5, r0
 8001356:	b390      	cbz	r0, 80013be <ai_network_init+0x182>
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <ai_network_init+0x1b0>)
 800135c:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001360:	f503 7200 	add.w	r2, r3, #512	; 0x200
    serving_default_input_layer_280_output_array.data = AI_PTR(g_network_activations_map[0] + 496);
 8001364:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <ai_network_init+0x1b4>)
 800136a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800136e:	4921      	ldr	r1, [pc, #132]	; (80013f4 <ai_network_init+0x1b8>)
 8001370:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001374:	4920      	ldr	r1, [pc, #128]	; (80013f8 <ai_network_init+0x1bc>)
 8001376:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800137a:	4920      	ldr	r1, [pc, #128]	; (80013fc <ai_network_init+0x1c0>)
 800137c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001380:	491f      	ldr	r1, [pc, #124]	; (8001400 <ai_network_init+0x1c4>)
 8001382:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001386:	491f      	ldr	r1, [pc, #124]	; (8001404 <ai_network_init+0x1c8>)
 8001388:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800138c:	491e      	ldr	r1, [pc, #120]	; (8001408 <ai_network_init+0x1cc>)
 800138e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001392:	491e      	ldr	r1, [pc, #120]	; (800140c <ai_network_init+0x1d0>)
 8001394:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <ai_network_init+0x1d4>)
 800139a:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800139e:	4630      	mov	r0, r6
 80013a0:	f000 fbd4 	bl	8001b4c <ai_platform_network_post_init>
 80013a4:	4028      	ands	r0, r5
 80013a6:	ea09 0900 	and.w	r9, r9, r0
 80013aa:	fa5f f089 	uxtb.w	r0, r9

  return ok;
}
 80013ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80013b2:	2212      	movs	r2, #18
 80013b4:	2130      	movs	r1, #48	; 0x30
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 f9d2 	bl	8001760 <ai_platform_network_set_error>
  return false;
 80013bc:	e7c4      	b.n	8001348 <ai_network_init+0x10c>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80013be:	2213      	movs	r2, #19
 80013c0:	4620      	mov	r0, r4
 80013c2:	2130      	movs	r1, #48	; 0x30
 80013c4:	f000 f9cc 	bl	8001760 <ai_platform_network_set_error>
  return false;
 80013c8:	e7e9      	b.n	800139e <ai_network_init+0x162>
 80013ca:	bf00      	nop
 80013cc:	2400121c 	.word	0x2400121c
 80013d0:	240005b0 	.word	0x240005b0
 80013d4:	24000658 	.word	0x24000658
 80013d8:	24000820 	.word	0x24000820
 80013dc:	240006d0 	.word	0x240006d0
 80013e0:	00031200 	.word	0x00031200
 80013e4:	24000850 	.word	0x24000850
 80013e8:	24001218 	.word	0x24001218
 80013ec:	24000a38 	.word	0x24000a38
 80013f0:	240005f8 	.word	0x240005f8
 80013f4:	24000918 	.word	0x24000918
 80013f8:	240006a0 	.word	0x240006a0
 80013fc:	24000968 	.word	0x24000968
 8001400:	24000748 	.word	0x24000748
 8001404:	240009b8 	.word	0x240009b8
 8001408:	240007f0 	.word	0x240007f0
 800140c:	24000a08 	.word	0x24000a08
 8001410:	24000898 	.word	0x24000898
 8001414:	24000628 	.word	0x24000628
 8001418:	24000778 	.word	0x24000778
 800141c:	24000700 	.word	0x24000700
 8001420:	240007a8 	.word	0x240007a8
 8001424:	00030e00 	.word	0x00030e00
 8001428:	00020e00 	.word	0x00020e00
 800142c:	240008c8 	.word	0x240008c8

08001430 <ai_network_create_and_init>:
{
 8001430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 8001434:	2300      	movs	r3, #0
{
 8001436:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 8001438:	2405      	movs	r4, #5
{
 800143a:	4689      	mov	r9, r1
  return ai_platform_network_create(
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	4619      	mov	r1, r3
{
 8001440:	4616      	mov	r6, r2
  return ai_platform_network_create(
 8001442:	2301      	movs	r3, #1
 8001444:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <ai_network_create_and_init+0xb0>)
{
 8001446:	4607      	mov	r7, r0
  return ai_platform_network_create(
 8001448:	9400      	str	r4, [sp, #0]
 800144a:	f000 fa7d 	bl	8001948 <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 800144e:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 8001452:	4605      	mov	r5, r0
 8001454:	d003      	beq.n	800145e <ai_network_create_and_init+0x2e>
}
 8001456:	4628      	mov	r0, r5
 8001458:	b011      	add	sp, #68	; 0x44
 800145a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 800145e:	a802      	add	r0, sp, #8
 8001460:	f000 f840 	bl	80014e4 <ai_network_data_params_get>
 8001464:	2800      	cmp	r0, #0
 8001466:	d035      	beq.n	80014d4 <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001468:	f1b9 0f00 	cmp.w	r9, #0
 800146c:	d00f      	beq.n	800148e <ai_network_create_and_init+0x5e>
 800146e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001472:	b163      	cbz	r3, 800148e <ai_network_create_and_init+0x5e>
 8001474:	4644      	mov	r4, r8
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8001476:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001478:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800147a:	a805      	add	r0, sp, #20
 800147c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8001480:	f000 f888 	bl	8001594 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001484:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001488:	b2a3      	uxth	r3, r4
 800148a:	429a      	cmp	r2, r3
 800148c:	d8f3      	bhi.n	8001476 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800148e:	b17e      	cbz	r6, 80014b0 <ai_network_create_and_init+0x80>
 8001490:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001494:	b163      	cbz	r3, 80014b0 <ai_network_create_and_init+0x80>
 8001496:	2400      	movs	r4, #0
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001498:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800149a:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800149c:	a803      	add	r0, sp, #12
 800149e:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80014a2:	f000 f877 	bl	8001594 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80014a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80014aa:	b2a3      	uxth	r3, r4
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f3      	bhi.n	8001498 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 80014b0:	a902      	add	r1, sp, #8
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f7ff fec2 	bl	800123c <ai_network_init>
 80014b8:	b128      	cbz	r0, 80014c6 <ai_network_create_and_init+0x96>
  return err;
 80014ba:	f368 0507 	bfi	r5, r8, #0, #8
}
 80014be:	4628      	mov	r0, r5
 80014c0:	b011      	add	sp, #68	; 0x44
 80014c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 80014c6:	6838      	ldr	r0, [r7, #0]
 80014c8:	f000 f93e 	bl	8001748 <ai_platform_network_get_error>
 80014cc:	4605      	mov	r5, r0
 80014ce:	fa5f f880 	uxtb.w	r8, r0
 80014d2:	e7f2      	b.n	80014ba <ai_network_create_and_init+0x8a>
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f000 f937 	bl	8001748 <ai_platform_network_get_error>
 80014da:	4605      	mov	r5, r0
    return err;
 80014dc:	e7bb      	b.n	8001456 <ai_network_create_and_init+0x26>
 80014de:	bf00      	nop
 80014e0:	24000544 	.word	0x24000544

080014e4 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 80014e4:	4603      	mov	r3, r0
 80014e6:	b1a0      	cbz	r0, 8001512 <ai_network_data_params_get+0x2e>
{
 80014e8:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 80014ea:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <ai_network_data_params_get+0x30>)
{
 80014ec:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 80014ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80014f4:	3408      	adds	r4, #8
 80014f6:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 80014fa:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80014fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001502:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001506:	4661      	mov	r1, ip
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f903 	bl	8001714 <ai_platform_bind_network_params>
}
 800150e:	b004      	add	sp, #16
 8001510:	bd10      	pop	{r4, pc}
 8001512:	4770      	bx	lr
 8001514:	080055a0 	.word	0x080055a0

08001518 <ai_buffer_get_size>:
 8001518:	b368      	cbz	r0, 8001576 <ai_buffer_get_size+0x5e>
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <ai_buffer_get_size+0x60>)
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <ai_buffer_get_size+0x64>)
 800151e:	b410      	push	{r4}
 8001520:	6804      	ldr	r4, [r0, #0]
 8001522:	4023      	ands	r3, r4
 8001524:	4293      	cmp	r3, r2
 8001526:	d123      	bne.n	8001570 <ai_buffer_get_size+0x58>
 8001528:	b311      	cbz	r1, 8001570 <ai_buffer_get_size+0x58>
 800152a:	6984      	ldr	r4, [r0, #24]
 800152c:	6862      	ldr	r2, [r4, #4]
 800152e:	321f      	adds	r2, #31
 8001530:	f022 021f 	bic.w	r2, r2, #31
 8001534:	7d03      	ldrb	r3, [r0, #20]
 8001536:	6941      	ldr	r1, [r0, #20]
 8001538:	f1a3 0301 	sub.w	r3, r3, #1
 800153c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800154a:	da0c      	bge.n	8001566 <ai_buffer_get_size+0x4e>
 800154c:	2b01      	cmp	r3, #1
 800154e:	d103      	bne.n	8001558 <ai_buffer_get_size+0x40>
 8001550:	2802      	cmp	r0, #2
 8001552:	f04f 0302 	mov.w	r3, #2
 8001556:	d006      	beq.n	8001566 <ai_buffer_get_size+0x4e>
 8001558:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800155c:	3301      	adds	r3, #1
 800155e:	4298      	cmp	r0, r3
 8001560:	fb01 f202 	mul.w	r2, r1, r2
 8001564:	d1f2      	bne.n	800154c <ai_buffer_get_size+0x34>
 8001566:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800156a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	6984      	ldr	r4, [r0, #24]
 8001572:	6862      	ldr	r2, [r4, #4]
 8001574:	e7de      	b.n	8001534 <ai_buffer_get_size+0x1c>
 8001576:	4770      	bx	lr
 8001578:	017fffff 	.word	0x017fffff
 800157c:	000400c0 	.word	0x000400c0

08001580 <ai_buffer_array_sane>:
 8001580:	b138      	cbz	r0, 8001592 <ai_buffer_array_sane+0x12>
 8001582:	6843      	ldr	r3, [r0, #4]
 8001584:	b123      	cbz	r3, 8001590 <ai_buffer_array_sane+0x10>
 8001586:	8840      	ldrh	r0, [r0, #2]
 8001588:	3800      	subs	r0, #0
 800158a:	bf18      	it	ne
 800158c:	2001      	movne	r0, #1
 800158e:	4770      	bx	lr
 8001590:	4618      	mov	r0, r3
 8001592:	4770      	bx	lr

08001594 <ai_buffer_array_item_set_address>:
 8001594:	b150      	cbz	r0, 80015ac <ai_buffer_array_item_set_address+0x18>
 8001596:	6843      	ldr	r3, [r0, #4]
 8001598:	b14b      	cbz	r3, 80015ae <ai_buffer_array_item_set_address+0x1a>
 800159a:	8840      	ldrh	r0, [r0, #2]
 800159c:	b900      	cbnz	r0, 80015a0 <ai_buffer_array_item_set_address+0xc>
 800159e:	4770      	bx	lr
 80015a0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80015a4:	2001      	movs	r0, #1
 80015a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	4770      	bx	lr
 80015ae:	4618      	mov	r0, r3
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <ai_platform_get_weights_map>:
 80015b4:	2900      	cmp	r1, #0
 80015b6:	bf18      	it	ne
 80015b8:	2800      	cmpne	r0, #0
 80015ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015bc:	bf0c      	ite	eq
 80015be:	2401      	moveq	r4, #1
 80015c0:	2400      	movne	r4, #0
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	bf08      	it	eq
 80015c6:	f044 0401 	orreq.w	r4, r4, #1
 80015ca:	b114      	cbz	r4, 80015d2 <ai_platform_get_weights_map+0x1e>
 80015cc:	2400      	movs	r4, #0
 80015ce:	4620      	mov	r0, r4
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015d2:	4616      	mov	r6, r2
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <ai_platform_get_weights_map+0xac>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4605      	mov	r5, r0
 80015da:	460f      	mov	r7, r1
 80015dc:	429a      	cmp	r2, r3
 80015de:	d022      	beq.n	8001626 <ai_platform_get_weights_map+0x72>
 80015e0:	6870      	ldr	r0, [r6, #4]
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d0f2      	beq.n	80015cc <ai_platform_get_weights_map+0x18>
 80015e6:	6806      	ldr	r6, [r0, #0]
 80015e8:	429e      	cmp	r6, r3
 80015ea:	d006      	beq.n	80015fa <ai_platform_get_weights_map+0x46>
 80015ec:	f1a1 0401 	sub.w	r4, r1, #1
 80015f0:	6028      	str	r0, [r5, #0]
 80015f2:	fab4 f484 	clz	r4, r4
 80015f6:	0964      	lsrs	r4, r4, #5
 80015f8:	e7e9      	b.n	80015ce <ai_platform_get_weights_map+0x1a>
 80015fa:	3d04      	subs	r5, #4
 80015fc:	4602      	mov	r2, r0
 80015fe:	4621      	mov	r1, r4
 8001600:	e000      	b.n	8001604 <ai_platform_get_weights_map+0x50>
 8001602:	4619      	mov	r1, r3
 8001604:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001608:	42b3      	cmp	r3, r6
 800160a:	d025      	beq.n	8001658 <ai_platform_get_weights_map+0xa4>
 800160c:	f845 3f04 	str.w	r3, [r5, #4]!
 8001610:	1c4b      	adds	r3, r1, #1
 8001612:	429f      	cmp	r7, r3
 8001614:	d8f5      	bhi.n	8001602 <ai_platform_get_weights_map+0x4e>
 8001616:	d1da      	bne.n	80015ce <ai_platform_get_weights_map+0x1a>
 8001618:	3102      	adds	r1, #2
 800161a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800161e:	42b3      	cmp	r3, r6
 8001620:	d1d5      	bne.n	80015ce <ai_platform_get_weights_map+0x1a>
 8001622:	2401      	movs	r4, #1
 8001624:	e7d3      	b.n	80015ce <ai_platform_get_weights_map+0x1a>
 8001626:	1d30      	adds	r0, r6, #4
 8001628:	f7ff ffaa 	bl	8001580 <ai_buffer_array_sane>
 800162c:	2800      	cmp	r0, #0
 800162e:	d0cd      	beq.n	80015cc <ai_platform_get_weights_map+0x18>
 8001630:	88f3      	ldrh	r3, [r6, #6]
 8001632:	429f      	cmp	r7, r3
 8001634:	d1ca      	bne.n	80015cc <ai_platform_get_weights_map+0x18>
 8001636:	3d04      	subs	r5, #4
 8001638:	4622      	mov	r2, r4
 800163a:	68b3      	ldr	r3, [r6, #8]
 800163c:	4423      	add	r3, r4
 800163e:	341c      	adds	r4, #28
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	b123      	cbz	r3, 800164e <ai_platform_get_weights_map+0x9a>
 8001644:	3201      	adds	r2, #1
 8001646:	f845 3f04 	str.w	r3, [r5, #4]!
 800164a:	4297      	cmp	r7, r2
 800164c:	d8f5      	bhi.n	800163a <ai_platform_get_weights_map+0x86>
 800164e:	1abc      	subs	r4, r7, r2
 8001650:	fab4 f484 	clz	r4, r4
 8001654:	0964      	lsrs	r4, r4, #5
 8001656:	e7ba      	b.n	80015ce <ai_platform_get_weights_map+0x1a>
 8001658:	428f      	cmp	r7, r1
 800165a:	d1b8      	bne.n	80015ce <ai_platform_get_weights_map+0x1a>
 800165c:	e7e1      	b.n	8001622 <ai_platform_get_weights_map+0x6e>
 800165e:	bf00      	nop
 8001660:	a1facade 	.word	0xa1facade

08001664 <ai_platform_get_activations_map>:
 8001664:	2900      	cmp	r1, #0
 8001666:	bf18      	it	ne
 8001668:	2800      	cmpne	r0, #0
 800166a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166c:	bf0c      	ite	eq
 800166e:	2401      	moveq	r4, #1
 8001670:	2400      	movne	r4, #0
 8001672:	2a00      	cmp	r2, #0
 8001674:	bf08      	it	eq
 8001676:	f044 0401 	orreq.w	r4, r4, #1
 800167a:	b114      	cbz	r4, 8001682 <ai_platform_get_activations_map+0x1e>
 800167c:	2400      	movs	r4, #0
 800167e:	4620      	mov	r0, r4
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001682:	4616      	mov	r6, r2
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <ai_platform_get_activations_map+0xac>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4605      	mov	r5, r0
 800168a:	460f      	mov	r7, r1
 800168c:	429a      	cmp	r2, r3
 800168e:	d022      	beq.n	80016d6 <ai_platform_get_activations_map+0x72>
 8001690:	6a30      	ldr	r0, [r6, #32]
 8001692:	2800      	cmp	r0, #0
 8001694:	d0f2      	beq.n	800167c <ai_platform_get_activations_map+0x18>
 8001696:	6806      	ldr	r6, [r0, #0]
 8001698:	429e      	cmp	r6, r3
 800169a:	d006      	beq.n	80016aa <ai_platform_get_activations_map+0x46>
 800169c:	f1a1 0401 	sub.w	r4, r1, #1
 80016a0:	6028      	str	r0, [r5, #0]
 80016a2:	fab4 f484 	clz	r4, r4
 80016a6:	0964      	lsrs	r4, r4, #5
 80016a8:	e7e9      	b.n	800167e <ai_platform_get_activations_map+0x1a>
 80016aa:	3d04      	subs	r5, #4
 80016ac:	4602      	mov	r2, r0
 80016ae:	4621      	mov	r1, r4
 80016b0:	e000      	b.n	80016b4 <ai_platform_get_activations_map+0x50>
 80016b2:	4619      	mov	r1, r3
 80016b4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80016b8:	42b3      	cmp	r3, r6
 80016ba:	d026      	beq.n	800170a <ai_platform_get_activations_map+0xa6>
 80016bc:	f845 3f04 	str.w	r3, [r5, #4]!
 80016c0:	1c4b      	adds	r3, r1, #1
 80016c2:	429f      	cmp	r7, r3
 80016c4:	d8f5      	bhi.n	80016b2 <ai_platform_get_activations_map+0x4e>
 80016c6:	d1da      	bne.n	800167e <ai_platform_get_activations_map+0x1a>
 80016c8:	3102      	adds	r1, #2
 80016ca:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80016ce:	42b3      	cmp	r3, r6
 80016d0:	d1d5      	bne.n	800167e <ai_platform_get_activations_map+0x1a>
 80016d2:	2401      	movs	r4, #1
 80016d4:	e7d3      	b.n	800167e <ai_platform_get_activations_map+0x1a>
 80016d6:	f106 000c 	add.w	r0, r6, #12
 80016da:	f7ff ff51 	bl	8001580 <ai_buffer_array_sane>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d0cc      	beq.n	800167c <ai_platform_get_activations_map+0x18>
 80016e2:	89f3      	ldrh	r3, [r6, #14]
 80016e4:	429f      	cmp	r7, r3
 80016e6:	d1c9      	bne.n	800167c <ai_platform_get_activations_map+0x18>
 80016e8:	3d04      	subs	r5, #4
 80016ea:	4622      	mov	r2, r4
 80016ec:	6933      	ldr	r3, [r6, #16]
 80016ee:	4423      	add	r3, r4
 80016f0:	341c      	adds	r4, #28
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	b123      	cbz	r3, 8001700 <ai_platform_get_activations_map+0x9c>
 80016f6:	3201      	adds	r2, #1
 80016f8:	f845 3f04 	str.w	r3, [r5, #4]!
 80016fc:	4297      	cmp	r7, r2
 80016fe:	d8f5      	bhi.n	80016ec <ai_platform_get_activations_map+0x88>
 8001700:	1abc      	subs	r4, r7, r2
 8001702:	fab4 f484 	clz	r4, r4
 8001706:	0964      	lsrs	r4, r4, #5
 8001708:	e7b9      	b.n	800167e <ai_platform_get_activations_map+0x1a>
 800170a:	428f      	cmp	r7, r1
 800170c:	d1b7      	bne.n	800167e <ai_platform_get_activations_map+0x1a>
 800170e:	e7e0      	b.n	80016d2 <ai_platform_get_activations_map+0x6e>
 8001710:	a1facade 	.word	0xa1facade

08001714 <ai_platform_bind_network_params>:
 8001714:	2a00      	cmp	r2, #0
 8001716:	bf18      	it	ne
 8001718:	2900      	cmpne	r1, #0
 800171a:	d010      	beq.n	800173e <ai_platform_bind_network_params+0x2a>
 800171c:	b178      	cbz	r0, 800173e <ai_platform_bind_network_params+0x2a>
 800171e:	4603      	mov	r3, r0
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <ai_platform_bind_network_params+0x30>)
 8001722:	f103 0c0c 	add.w	ip, r3, #12
 8001726:	f843 0b04 	str.w	r0, [r3], #4
 800172a:	c903      	ldmia	r1, {r0, r1}
 800172c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001730:	2301      	movs	r3, #1
 8001732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001736:	e88c 0003 	stmia.w	ip, {r0, r1}
 800173a:	4618      	mov	r0, r3
 800173c:	4770      	bx	lr
 800173e:	2300      	movs	r3, #0
 8001740:	4618      	mov	r0, r3
 8001742:	4770      	bx	lr
 8001744:	a1facade 	.word	0xa1facade

08001748 <ai_platform_network_get_error>:
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <ai_platform_network_get_error+0x14>)
 800174a:	6802      	ldr	r2, [r0, #0]
 800174c:	4393      	bics	r3, r2
 800174e:	d102      	bne.n	8001756 <ai_platform_network_get_error+0xe>
 8001750:	300c      	adds	r0, #12
 8001752:	f000 ba2d 	b.w	8001bb0 <core_get_error>
 8001756:	f241 0010 	movw	r0, #4112	; 0x1010
 800175a:	4770      	bx	lr
 800175c:	a1c00100 	.word	0xa1c00100

08001760 <ai_platform_network_set_error>:
 8001760:	b110      	cbz	r0, 8001768 <ai_platform_network_set_error+0x8>
 8001762:	300c      	adds	r0, #12
 8001764:	f000 ba2a 	b.w	8001bbc <core_set_error>
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <ai_platform_inputs_get>:
 800176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <ai_platform_inputs_get+0xec>)
 8001772:	b085      	sub	sp, #20
 8001774:	6802      	ldr	r2, [r0, #0]
 8001776:	4393      	bics	r3, r2
 8001778:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800177c:	d162      	bne.n	8001844 <ai_platform_inputs_get+0xd8>
 800177e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001780:	2b00      	cmp	r3, #0
 8001782:	d051      	beq.n	8001828 <ai_platform_inputs_get+0xbc>
 8001784:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8001788:	f1ba 0f00 	cmp.w	sl, #0
 800178c:	d04c      	beq.n	8001828 <ai_platform_inputs_get+0xbc>
 800178e:	f04f 0900 	mov.w	r9, #0
 8001792:	464d      	mov	r5, r9
 8001794:	e016      	b.n	80017c4 <ai_platform_inputs_get+0x58>
 8001796:	9901      	ldr	r1, [sp, #4]
 8001798:	2301      	movs	r3, #1
 800179a:	f848 3001 	str.w	r3, [r8, r1]
 800179e:	69b1      	ldr	r1, [r6, #24]
 80017a0:	f04f 0301 	mov.w	r3, #1
 80017a4:	684e      	ldr	r6, [r1, #4]
 80017a6:	3501      	adds	r5, #1
 80017a8:	f109 091c 	add.w	r9, r9, #28
 80017ac:	7523      	strb	r3, [r4, #20]
 80017ae:	2300      	movs	r3, #0
 80017b0:	6961      	ldr	r1, [r4, #20]
 80017b2:	6020      	str	r0, [r4, #0]
 80017b4:	f36b 211f 	bfi	r1, fp, #8, #24
 80017b8:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80017bc:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80017c0:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80017c4:	f8ba 3000 	ldrh.w	r3, [sl]
 80017c8:	b2ac      	uxth	r4, r5
 80017ca:	42ab      	cmp	r3, r5
 80017cc:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	d93b      	bls.n	800184c <ai_platform_inputs_get+0xe0>
 80017d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d037      	beq.n	800184c <ai_platform_inputs_get+0xe0>
 80017dc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80017e0:	2e00      	cmp	r6, #0
 80017e2:	d033      	beq.n	800184c <ai_platform_inputs_get+0xe0>
 80017e4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80017e8:	69b2      	ldr	r2, [r6, #24]
 80017ea:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80017ee:	6810      	ldr	r0, [r2, #0]
 80017f0:	68b3      	ldr	r3, [r6, #8]
 80017f2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80017f6:	68f2      	ldr	r2, [r6, #12]
 80017f8:	444c      	add	r4, r9
 80017fa:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80017fe:	9200      	str	r2, [sp, #0]
 8001800:	f001 f98c 	bl	8002b1c <ai_array_to_buffer_fmt>
 8001804:	69b1      	ldr	r1, [r6, #24]
 8001806:	9a00      	ldr	r2, [sp, #0]
 8001808:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800180c:	2f00      	cmp	r7, #0
 800180e:	d0c7      	beq.n	80017a0 <ai_platform_inputs_get+0x34>
 8001810:	2100      	movs	r1, #0
 8001812:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001816:	6831      	ldr	r1, [r6, #0]
 8001818:	6079      	str	r1, [r7, #4]
 800181a:	b111      	cbz	r1, 8001822 <ai_platform_inputs_get+0xb6>
 800181c:	8849      	ldrh	r1, [r1, #2]
 800181e:	2900      	cmp	r1, #0
 8001820:	d1b9      	bne.n	8001796 <ai_platform_inputs_get+0x2a>
 8001822:	69b1      	ldr	r1, [r6, #24]
 8001824:	2700      	movs	r7, #0
 8001826:	e7bb      	b.n	80017a0 <ai_platform_inputs_get+0x34>
 8001828:	9803      	ldr	r0, [sp, #12]
 800182a:	2400      	movs	r4, #0
 800182c:	2218      	movs	r2, #24
 800182e:	2111      	movs	r1, #17
 8001830:	300c      	adds	r0, #12
 8001832:	f000 f9c3 	bl	8001bbc <core_set_error>
 8001836:	4620      	mov	r0, r4
 8001838:	9b02      	ldr	r3, [sp, #8]
 800183a:	b103      	cbz	r3, 800183e <ai_platform_inputs_get+0xd2>
 800183c:	801c      	strh	r4, [r3, #0]
 800183e:	b005      	add	sp, #20
 8001840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001844:	2000      	movs	r0, #0
 8001846:	b005      	add	sp, #20
 8001848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800184c:	2c00      	cmp	r4, #0
 800184e:	d0eb      	beq.n	8001828 <ai_platform_inputs_get+0xbc>
 8001850:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001854:	6858      	ldr	r0, [r3, #4]
 8001856:	e7ef      	b.n	8001838 <ai_platform_inputs_get+0xcc>
 8001858:	a1c00100 	.word	0xa1c00100

0800185c <ai_platform_outputs_get>:
 800185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <ai_platform_outputs_get+0xe8>)
 8001862:	b085      	sub	sp, #20
 8001864:	6802      	ldr	r2, [r0, #0]
 8001866:	4393      	bics	r3, r2
 8001868:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800186c:	d15f      	bne.n	800192e <ai_platform_outputs_get+0xd2>
 800186e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001870:	2b01      	cmp	r3, #1
 8001872:	d94e      	bls.n	8001912 <ai_platform_outputs_get+0xb6>
 8001874:	f04f 0900 	mov.w	r9, #0
 8001878:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800187c:	464d      	mov	r5, r9
 800187e:	e016      	b.n	80018ae <ai_platform_outputs_get+0x52>
 8001880:	9901      	ldr	r1, [sp, #4]
 8001882:	2301      	movs	r3, #1
 8001884:	f848 3001 	str.w	r3, [r8, r1]
 8001888:	69b1      	ldr	r1, [r6, #24]
 800188a:	f04f 0301 	mov.w	r3, #1
 800188e:	684e      	ldr	r6, [r1, #4]
 8001890:	3501      	adds	r5, #1
 8001892:	f109 091c 	add.w	r9, r9, #28
 8001896:	7523      	strb	r3, [r4, #20]
 8001898:	2300      	movs	r3, #0
 800189a:	6961      	ldr	r1, [r4, #20]
 800189c:	6020      	str	r0, [r4, #0]
 800189e:	f36b 211f 	bfi	r1, fp, #8, #24
 80018a2:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80018a6:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80018aa:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80018ae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80018b2:	b2ac      	uxth	r4, r5
 80018b4:	42ab      	cmp	r3, r5
 80018b6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	d93b      	bls.n	8001936 <ai_platform_outputs_get+0xda>
 80018be:	f8da 3010 	ldr.w	r3, [sl, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d037      	beq.n	8001936 <ai_platform_outputs_get+0xda>
 80018c6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80018ca:	2e00      	cmp	r6, #0
 80018cc:	d033      	beq.n	8001936 <ai_platform_outputs_get+0xda>
 80018ce:	f8da 3014 	ldr.w	r3, [sl, #20]
 80018d2:	69b2      	ldr	r2, [r6, #24]
 80018d4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80018d8:	6810      	ldr	r0, [r2, #0]
 80018da:	68b3      	ldr	r3, [r6, #8]
 80018dc:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80018e0:	68f2      	ldr	r2, [r6, #12]
 80018e2:	444c      	add	r4, r9
 80018e4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	f001 f917 	bl	8002b1c <ai_array_to_buffer_fmt>
 80018ee:	69b1      	ldr	r1, [r6, #24]
 80018f0:	9a00      	ldr	r2, [sp, #0]
 80018f2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80018f6:	2f00      	cmp	r7, #0
 80018f8:	d0c7      	beq.n	800188a <ai_platform_outputs_get+0x2e>
 80018fa:	2100      	movs	r1, #0
 80018fc:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8001900:	6831      	ldr	r1, [r6, #0]
 8001902:	6079      	str	r1, [r7, #4]
 8001904:	b111      	cbz	r1, 800190c <ai_platform_outputs_get+0xb0>
 8001906:	8849      	ldrh	r1, [r1, #2]
 8001908:	2900      	cmp	r1, #0
 800190a:	d1b9      	bne.n	8001880 <ai_platform_outputs_get+0x24>
 800190c:	69b1      	ldr	r1, [r6, #24]
 800190e:	2700      	movs	r7, #0
 8001910:	e7bb      	b.n	800188a <ai_platform_outputs_get+0x2e>
 8001912:	9803      	ldr	r0, [sp, #12]
 8001914:	2400      	movs	r4, #0
 8001916:	2218      	movs	r2, #24
 8001918:	2111      	movs	r1, #17
 800191a:	300c      	adds	r0, #12
 800191c:	f000 f94e 	bl	8001bbc <core_set_error>
 8001920:	4620      	mov	r0, r4
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	b103      	cbz	r3, 8001928 <ai_platform_outputs_get+0xcc>
 8001926:	801c      	strh	r4, [r3, #0]
 8001928:	b005      	add	sp, #20
 800192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800192e:	2000      	movs	r0, #0
 8001930:	b005      	add	sp, #20
 8001932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001936:	2c00      	cmp	r4, #0
 8001938:	d0eb      	beq.n	8001912 <ai_platform_outputs_get+0xb6>
 800193a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800193e:	6858      	ldr	r0, [r3, #4]
 8001940:	e7ef      	b.n	8001922 <ai_platform_outputs_get+0xc6>
 8001942:	bf00      	nop
 8001944:	a1c00100 	.word	0xa1c00100

08001948 <ai_platform_network_create>:
 8001948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800194c:	b083      	sub	sp, #12
 800194e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8001952:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8001956:	b320      	cbz	r0, 80019a2 <ai_platform_network_create+0x5a>
 8001958:	6002      	str	r2, [r0, #0]
 800195a:	4616      	mov	r6, r2
 800195c:	461f      	mov	r7, r3
 800195e:	4604      	mov	r4, r0
 8001960:	f000 f924 	bl	8001bac <core_init>
 8001964:	b970      	cbnz	r0, 8001984 <ai_platform_network_create+0x3c>
 8001966:	2530      	movs	r5, #48	; 0x30
 8001968:	2300      	movs	r3, #0
 800196a:	6023      	str	r3, [r4, #0]
 800196c:	2410      	movs	r4, #16
 800196e:	464a      	mov	r2, r9
 8001970:	4641      	mov	r1, r8
 8001972:	4638      	mov	r0, r7
 8001974:	f001 f942 	bl	8002bfc <ai_version_get>
 8001978:	60b0      	str	r0, [r6, #8]
 800197a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800197e:	b003      	add	sp, #12
 8001980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001984:	2200      	movs	r2, #0
 8001986:	4641      	mov	r1, r8
 8001988:	4638      	mov	r0, r7
 800198a:	f001 f937 	bl	8002bfc <ai_version_get>
 800198e:	4605      	mov	r5, r0
 8001990:	2200      	movs	r2, #0
 8001992:	2105      	movs	r1, #5
 8001994:	2001      	movs	r0, #1
 8001996:	f001 f931 	bl	8002bfc <ai_version_get>
 800199a:	4285      	cmp	r5, r0
 800199c:	d008      	beq.n	80019b0 <ai_platform_network_create+0x68>
 800199e:	2501      	movs	r5, #1
 80019a0:	e7e2      	b.n	8001968 <ai_platform_network_create+0x20>
 80019a2:	2510      	movs	r5, #16
 80019a4:	462c      	mov	r4, r5
 80019a6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80019aa:	b003      	add	sp, #12
 80019ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <ai_platform_network_create+0x80>)
 80019b2:	a801      	add	r0, sp, #4
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	f000 f90d 	bl	8001bd4 <ai_check_custom_types>
 80019ba:	b110      	cbz	r0, 80019c2 <ai_platform_network_create+0x7a>
 80019bc:	2400      	movs	r4, #0
 80019be:	4625      	mov	r5, r4
 80019c0:	e7d5      	b.n	800196e <ai_platform_network_create+0x26>
 80019c2:	2502      	movs	r5, #2
 80019c4:	e7d0      	b.n	8001968 <ai_platform_network_create+0x20>
 80019c6:	bf00      	nop
 80019c8:	84048403 	.word	0x84048403

080019cc <ai_platform_network_init>:
 80019cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d0:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <ai_platform_network_init+0x178>)
 80019d2:	460c      	mov	r4, r1
 80019d4:	6801      	ldr	r1, [r0, #0]
 80019d6:	438a      	bics	r2, r1
 80019d8:	d133      	bne.n	8001a42 <ai_platform_network_init+0x76>
 80019da:	4605      	mov	r5, r0
 80019dc:	2c00      	cmp	r4, #0
 80019de:	f000 8093 	beq.w	8001b08 <ai_platform_network_init+0x13c>
 80019e2:	f8d4 b000 	ldr.w	fp, [r4]
 80019e6:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <ai_platform_network_init+0x17c>)
 80019e8:	4593      	cmp	fp, r2
 80019ea:	d10f      	bne.n	8001a0c <ai_platform_network_init+0x40>
 80019ec:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 80019f0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <ai_platform_network_init+0x178>)
 80019f6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 80019fa:	0c32      	lsrs	r2, r6, #16
 80019fc:	4299      	cmp	r1, r3
 80019fe:	d02c      	beq.n	8001a5a <ai_platform_network_init+0x8e>
 8001a00:	2303      	movs	r3, #3
 8001a02:	462c      	mov	r4, r5
 8001a04:	612b      	str	r3, [r5, #16]
 8001a06:	4620      	mov	r0, r4
 8001a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a0c:	4627      	mov	r7, r4
 8001a0e:	2101      	movs	r1, #1
 8001a10:	6864      	ldr	r4, [r4, #4]
 8001a12:	4638      	mov	r0, r7
 8001a14:	f107 081c 	add.w	r8, r7, #28
 8001a18:	f7ff fd7e 	bl	8001518 <ai_buffer_get_size>
 8001a1c:	4606      	mov	r6, r0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4640      	mov	r0, r8
 8001a22:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8001a26:	f7ff fd77 	bl	8001518 <ai_buffer_get_size>
 8001a2a:	b976      	cbnz	r6, 8001a4a <ai_platform_network_init+0x7e>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d150      	bne.n	8001ad2 <ai_platform_network_init+0x106>
 8001a30:	4680      	mov	r8, r0
 8001a32:	4686      	mov	lr, r0
 8001a34:	4606      	mov	r6, r0
 8001a36:	4607      	mov	r7, r0
 8001a38:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8001a3c:	6829      	ldr	r1, [r5, #0]
 8001a3e:	0436      	lsls	r6, r6, #16
 8001a40:	e7d8      	b.n	80019f4 <ai_platform_network_init+0x28>
 8001a42:	2400      	movs	r4, #0
 8001a44:	4620      	mov	r0, r4
 8001a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d13b      	bne.n	8001ac6 <ai_platform_network_init+0xfa>
 8001a4e:	4680      	mov	r8, r0
 8001a50:	4686      	mov	lr, r0
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	d05e      	beq.n	8001b14 <ai_platform_network_init+0x148>
 8001a56:	2601      	movs	r6, #1
 8001a58:	e7ee      	b.n	8001a38 <ai_platform_network_init+0x6c>
 8001a5a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <ai_platform_network_init+0x17c>)
 8001a60:	d33e      	bcc.n	8001ae0 <ai_platform_network_init+0x114>
 8001a62:	459b      	cmp	fp, r3
 8001a64:	d03e      	beq.n	8001ae4 <ai_platform_network_init+0x118>
 8001a66:	b1a2      	cbz	r2, 8001a92 <ai_platform_network_init+0xc6>
 8001a68:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001a6c:	f04f 0c00 	mov.w	ip, #0
 8001a70:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001a74:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001a76:	eb07 0b0c 	add.w	fp, r7, ip
 8001a7a:	4464      	add	r4, ip
 8001a7c:	f10c 0c1c 	add.w	ip, ip, #28
 8001a80:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8001a84:	45cc      	cmp	ip, r9
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8001a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a90:	d1f0      	bne.n	8001a74 <ai_platform_network_init+0xa8>
 8001a92:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001a94:	622e      	str	r6, [r5, #32]
 8001a96:	4553      	cmp	r3, sl
 8001a98:	d34b      	bcc.n	8001b32 <ai_platform_network_init+0x166>
 8001a9a:	f1ba 0f00 	cmp.w	sl, #0
 8001a9e:	d025      	beq.n	8001aec <ai_platform_network_init+0x120>
 8001aa0:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001aaa:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001aac:	eb08 0607 	add.w	r6, r8, r7
 8001ab0:	443c      	add	r4, r7
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ab6:	4557      	cmp	r7, sl
 8001ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ac2:	d1f2      	bne.n	8001aaa <ai_platform_network_init+0xde>
 8001ac4:	e012      	b.n	8001aec <ai_platform_network_init+0x120>
 8001ac6:	f1b9 0f00 	cmp.w	r9, #0
 8001aca:	d015      	beq.n	8001af8 <ai_platform_network_init+0x12c>
 8001acc:	f04f 0e01 	mov.w	lr, #1
 8001ad0:	e7bf      	b.n	8001a52 <ai_platform_network_init+0x86>
 8001ad2:	f1b9 0f00 	cmp.w	r9, #0
 8001ad6:	d00f      	beq.n	8001af8 <ai_platform_network_init+0x12c>
 8001ad8:	f04f 0e01 	mov.w	lr, #1
 8001adc:	4637      	mov	r7, r6
 8001ade:	e7ab      	b.n	8001a38 <ai_platform_network_init+0x6c>
 8001ae0:	459b      	cmp	fp, r3
 8001ae2:	d11e      	bne.n	8001b22 <ai_platform_network_init+0x156>
 8001ae4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8001ae8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8001aec:	4628      	mov	r0, r5
 8001aee:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8001af2:	f000 f897 	bl	8001c24 <ai_layers_init_all>
 8001af6:	e783      	b.n	8001a00 <ai_platform_network_init+0x34>
 8001af8:	2213      	movs	r2, #19
 8001afa:	2110      	movs	r1, #16
 8001afc:	f105 000c 	add.w	r0, r5, #12
 8001b00:	2400      	movs	r4, #0
 8001b02:	f000 f85b 	bl	8001bbc <core_set_error>
 8001b06:	e77e      	b.n	8001a06 <ai_platform_network_init+0x3a>
 8001b08:	2211      	movs	r2, #17
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	300c      	adds	r0, #12
 8001b0e:	f000 f855 	bl	8001bbc <core_set_error>
 8001b12:	e778      	b.n	8001a06 <ai_platform_network_init+0x3a>
 8001b14:	2212      	movs	r2, #18
 8001b16:	2110      	movs	r1, #16
 8001b18:	f105 000c 	add.w	r0, r5, #12
 8001b1c:	f000 f84e 	bl	8001bbc <core_set_error>
 8001b20:	e771      	b.n	8001a06 <ai_platform_network_init+0x3a>
 8001b22:	2212      	movs	r2, #18
 8001b24:	2116      	movs	r1, #22
 8001b26:	f105 000c 	add.w	r0, r5, #12
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	f000 f846 	bl	8001bbc <core_set_error>
 8001b30:	e769      	b.n	8001a06 <ai_platform_network_init+0x3a>
 8001b32:	2213      	movs	r2, #19
 8001b34:	2116      	movs	r1, #22
 8001b36:	f105 000c 	add.w	r0, r5, #12
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	f000 f83e 	bl	8001bbc <core_set_error>
 8001b40:	e761      	b.n	8001a06 <ai_platform_network_init+0x3a>
 8001b42:	bf00      	nop
 8001b44:	a1c00100 	.word	0xa1c00100
 8001b48:	a1facade 	.word	0xa1facade

08001b4c <ai_platform_network_post_init>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <ai_platform_network_post_init+0x5c>)
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	ea02 0103 	and.w	r1, r2, r3
 8001b56:	4393      	bics	r3, r2
 8001b58:	d108      	bne.n	8001b6c <ai_platform_network_post_init+0x20>
 8001b5a:	6903      	ldr	r3, [r0, #16]
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	f013 0502 	ands.w	r5, r3, #2
 8001b62:	d005      	beq.n	8001b70 <ai_platform_network_post_init+0x24>
 8001b64:	428a      	cmp	r2, r1
 8001b66:	d00a      	beq.n	8001b7e <ai_platform_network_post_init+0x32>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
 8001b70:	2210      	movs	r2, #16
 8001b72:	2111      	movs	r1, #17
 8001b74:	300c      	adds	r0, #12
 8001b76:	f000 f821 	bl	8001bbc <core_set_error>
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
 8001b7e:	f000 f85f 	bl	8001c40 <ai_layers_post_init_all>
 8001b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ef      	beq.n	8001b68 <ai_platform_network_post_init+0x1c>
 8001b88:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001b8a:	e008      	b.n	8001b9e <ai_platform_network_post_init+0x52>
 8001b8c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8001b90:	4798      	blx	r3
 8001b92:	692b      	ldr	r3, [r5, #16]
 8001b94:	42ab      	cmp	r3, r5
 8001b96:	461d      	mov	r5, r3
 8001b98:	d0e6      	beq.n	8001b68 <ai_platform_network_post_init+0x1c>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0e4      	beq.n	8001b68 <ai_platform_network_post_init+0x1c>
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	d1f2      	bne.n	8001b8c <ai_platform_network_post_init+0x40>
 8001ba6:	e7df      	b.n	8001b68 <ai_platform_network_post_init+0x1c>
 8001ba8:	a1c00100 	.word	0xa1c00100

08001bac <core_init>:
 8001bac:	2001      	movs	r0, #1
 8001bae:	4770      	bx	lr

08001bb0 <core_get_error>:
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	6800      	ldr	r0, [r0, #0]
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop

08001bbc <core_set_error>:
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	7800      	ldrb	r0, [r0, #0]
 8001bc0:	b108      	cbz	r0, 8001bc6 <core_set_error+0xa>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	4770      	bx	lr
 8001bc6:	7019      	strb	r1, [r3, #0]
 8001bc8:	2001      	movs	r0, #1
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	f362 211f 	bfi	r1, r2, #8, #24
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	4770      	bx	lr

08001bd4 <ai_check_custom_types>:
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <ai_check_custom_types+0x4c>)
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	b118      	cbz	r0, 8001be4 <ai_check_custom_types+0x10>
 8001bdc:	7803      	ldrb	r3, [r0, #0]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d002      	beq.n	8001be8 <ai_check_custom_types+0x14>
 8001be2:	2000      	movs	r0, #0
 8001be4:	b002      	add	sp, #8
 8001be6:	4770      	bx	lr
 8001be8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <ai_check_custom_types+0x26>
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f080 0001 	eor.w	r0, r0, #1
 8001bf6:	b002      	add	sp, #8
 8001bf8:	4770      	bx	lr
 8001bfa:	7842      	ldrb	r2, [r0, #1]
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d1f4      	bne.n	8001bf0 <ai_check_custom_types+0x1c>
 8001c06:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001c0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d1ee      	bne.n	8001bf0 <ai_check_custom_types+0x1c>
 8001c12:	7842      	ldrb	r2, [r0, #1]
 8001c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1e9      	bne.n	8001bf0 <ai_check_custom_types+0x1c>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e7e8      	b.n	8001bf2 <ai_check_custom_types+0x1e>
 8001c20:	84048403 	.word	0x84048403

08001c24 <ai_layers_init_all>:
 8001c24:	2100      	movs	r1, #0
 8001c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c28:	b13b      	cbz	r3, 8001c3a <ai_layers_init_all+0x16>
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	3101      	adds	r1, #1
 8001c2e:	60d8      	str	r0, [r3, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	4613      	mov	r3, r2
 8001c34:	d001      	beq.n	8001c3a <ai_layers_init_all+0x16>
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d1f6      	bne.n	8001c28 <ai_layers_init_all+0x4>
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <ai_layers_post_init_all>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	2500      	movs	r5, #0
 8001c44:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c46:	b16c      	cbz	r4, 8001c64 <ai_layers_post_init_all+0x24>
 8001c48:	6863      	ldr	r3, [r4, #4]
 8001c4a:	07db      	lsls	r3, r3, #31
 8001c4c:	d504      	bpl.n	8001c58 <ai_layers_post_init_all+0x18>
 8001c4e:	6a23      	ldr	r3, [r4, #32]
 8001c50:	4620      	mov	r0, r4
 8001c52:	b10b      	cbz	r3, 8001c58 <ai_layers_post_init_all+0x18>
 8001c54:	3501      	adds	r5, #1
 8001c56:	4798      	blx	r3
 8001c58:	6923      	ldr	r3, [r4, #16]
 8001c5a:	42a3      	cmp	r3, r4
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	d001      	beq.n	8001c64 <ai_layers_post_init_all+0x24>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <ai_layers_post_init_all+0x6>
 8001c64:	4628      	mov	r0, r5
 8001c66:	bd38      	pop	{r3, r4, r5, pc}

08001c68 <forward_dense>:
 8001c68:	6982      	ldr	r2, [r0, #24]
 8001c6a:	8813      	ldrh	r3, [r2, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d043      	beq.n	8001cf8 <forward_dense+0x90>
 8001c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c74:	6855      	ldr	r5, [r2, #4]
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	6869      	ldr	r1, [r5, #4]
 8001c7a:	b101      	cbz	r1, 8001c7e <forward_dense+0x16>
 8001c7c:	6809      	ldr	r1, [r1, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d069      	beq.n	8001d56 <forward_dense+0xee>
 8001c82:	692a      	ldr	r2, [r5, #16]
 8001c84:	b102      	cbz	r2, 8001c88 <forward_dense+0x20>
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d061      	beq.n	8001d50 <forward_dense+0xe8>
 8001c8c:	69ec      	ldr	r4, [r5, #28]
 8001c8e:	2c00      	cmp	r4, #0
 8001c90:	d057      	beq.n	8001d42 <forward_dense+0xda>
 8001c92:	8b2e      	ldrh	r6, [r5, #24]
 8001c94:	6820      	ldr	r0, [r4, #0]
 8001c96:	2e01      	cmp	r6, #1
 8001c98:	d955      	bls.n	8001d46 <forward_dense+0xde>
 8001c9a:	6864      	ldr	r4, [r4, #4]
 8001c9c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	68d0      	ldr	r0, [r2, #12]
 8001ca4:	68cf      	ldr	r7, [r1, #12]
 8001ca6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001caa:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8001cae:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8001cb2:	f8d9 0000 	ldr.w	r0, [r9]
 8001cb6:	fb06 f807 	mul.w	r8, r6, r7
 8001cba:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 8001cbe:	d044      	beq.n	8001d4a <forward_dense+0xe2>
 8001cc0:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8001cc2:	b11d      	cbz	r5, 8001ccc <forward_dense+0x64>
 8001cc4:	682d      	ldr	r5, [r5, #0]
 8001cc6:	b10d      	cbz	r5, 8001ccc <forward_dense+0x64>
 8001cc8:	69ab      	ldr	r3, [r5, #24]
 8001cca:	689d      	ldr	r5, [r3, #8]
 8001ccc:	6992      	ldr	r2, [r2, #24]
 8001cce:	698b      	ldr	r3, [r1, #24]
 8001cd0:	6890      	ldr	r0, [r2, #8]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	b10c      	cbz	r4, 8001cda <forward_dense+0x72>
 8001cd6:	69a3      	ldr	r3, [r4, #24]
 8001cd8:	689c      	ldr	r4, [r3, #8]
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <forward_dense+0xf4>)
 8001cdc:	459c      	cmp	ip, r3
 8001cde:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8001ce2:	d023      	beq.n	8001d2c <forward_dense+0xc4>
 8001ce4:	4e1e      	ldr	r6, [pc, #120]	; (8001d60 <forward_dense+0xf8>)
 8001ce6:	45b4      	cmp	ip, r6
 8001ce8:	d015      	beq.n	8001d16 <forward_dense+0xae>
 8001cea:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 8001cee:	459c      	cmp	ip, r3
 8001cf0:	d004      	beq.n	8001cfc <forward_dense+0x94>
 8001cf2:	b00e      	add	sp, #56	; 0x38
 8001cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	deff      	udf	#255	; 0xff
 8001cfc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8001d00:	a807      	add	r0, sp, #28
 8001d02:	9209      	str	r2, [sp, #36]	; 0x24
 8001d04:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8001d08:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8001d0c:	f000 f946 	bl	8001f9c <forward_lite_dense_if32of32wf32>
 8001d10:	b00e      	add	sp, #56	; 0x38
 8001d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d16:	464b      	mov	r3, r9
 8001d18:	9500      	str	r5, [sp, #0]
 8001d1a:	e9cd e803 	strd	lr, r8, [sp, #12]
 8001d1e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8001d22:	f000 fa99 	bl	8002258 <forward_lite_dense_if32of32wf32_lut4>
 8001d26:	b00e      	add	sp, #56	; 0x38
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	464b      	mov	r3, r9
 8001d2e:	9500      	str	r5, [sp, #0]
 8001d30:	e9cd e803 	strd	lr, r8, [sp, #12]
 8001d34:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8001d38:	f000 fbb8 	bl	80024ac <forward_lite_dense_if32of32wf32_lut8>
 8001d3c:	b00e      	add	sp, #56	; 0x38
 8001d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d42:	4620      	mov	r0, r4
 8001d44:	e7aa      	b.n	8001c9c <forward_dense+0x34>
 8001d46:	2400      	movs	r4, #0
 8001d48:	e7a8      	b.n	8001c9c <forward_dense+0x34>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	deff      	udf	#255	; 0xff
 8001d50:	2300      	movs	r3, #0
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	deff      	udf	#255	; 0xff
 8001d56:	2300      	movs	r3, #0
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	deff      	udf	#255	; 0xff
 8001d5c:	01d01040 	.word	0x01d01040
 8001d60:	01e81040 	.word	0x01e81040

08001d64 <forward_relu>:
 8001d64:	6982      	ldr	r2, [r0, #24]
 8001d66:	8813      	ldrh	r3, [r2, #0]
 8001d68:	b323      	cbz	r3, 8001db4 <forward_relu+0x50>
 8001d6a:	6851      	ldr	r1, [r2, #4]
 8001d6c:	684a      	ldr	r2, [r1, #4]
 8001d6e:	b102      	cbz	r2, 8001d72 <forward_relu+0xe>
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	f000 8086 	beq.w	8001e84 <forward_relu+0x120>
 8001d78:	b470      	push	{r4, r5, r6}
 8001d7a:	690b      	ldr	r3, [r1, #16]
 8001d7c:	b103      	cbz	r3, 8001d80 <forward_relu+0x1c>
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69c6      	ldr	r6, [r0, #28]
 8001d82:	b1ce      	cbz	r6, 8001db8 <forward_relu+0x54>
 8001d84:	6871      	ldr	r1, [r6, #4]
 8001d86:	6998      	ldr	r0, [r3, #24]
 8001d88:	2901      	cmp	r1, #1
 8001d8a:	d03f      	beq.n	8001e0c <forward_relu+0xa8>
 8001d8c:	6893      	ldr	r3, [r2, #8]
 8001d8e:	6991      	ldr	r1, [r2, #24]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	6880      	ldr	r0, [r0, #8]
 8001d94:	6889      	ldr	r1, [r1, #8]
 8001d96:	d06c      	beq.n	8001e72 <forward_relu+0x10e>
 8001d98:	68d5      	ldr	r5, [r2, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001da0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8001da4:	429d      	cmp	r5, r3
 8001da6:	fb04 f202 	mul.w	r2, r4, r2
 8001daa:	d1f9      	bne.n	8001da0 <forward_relu+0x3c>
 8001dac:	68b3      	ldr	r3, [r6, #8]
 8001dae:	bc70      	pop	{r4, r5, r6}
 8001db0:	f000 b86e 	b.w	8001e90 <forward_lite_nl_relu_generic_if32of32_kernel>
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	deff      	udf	#255	; 0xff
 8001db8:	6999      	ldr	r1, [r3, #24]
 8001dba:	6893      	ldr	r3, [r2, #8]
 8001dbc:	6990      	ldr	r0, [r2, #24]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	6889      	ldr	r1, [r1, #8]
 8001dc2:	6884      	ldr	r4, [r0, #8]
 8001dc4:	d057      	beq.n	8001e76 <forward_relu+0x112>
 8001dc6:	68d5      	ldr	r5, [r2, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001dce:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8001dd2:	429d      	cmp	r5, r3
 8001dd4:	fb00 f202 	mul.w	r2, r0, r2
 8001dd8:	d1f9      	bne.n	8001dce <forward_relu+0x6a>
 8001dda:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001dde:	4413      	add	r3, r2
 8001de0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8001de4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001de8:	4294      	cmp	r4, r2
 8001dea:	d80d      	bhi.n	8001e08 <forward_relu+0xa4>
 8001dec:	3204      	adds	r2, #4
 8001dee:	3104      	adds	r1, #4
 8001df0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e8c <forward_relu+0x128>
 8001df4:	4613      	mov	r3, r2
 8001df6:	ed72 7a01 	vldmdb	r2!, {s15}
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8001e00:	ed61 7a01 	vstmdb	r1!, {s15}
 8001e04:	429c      	cmp	r4, r3
 8001e06:	d9f5      	bls.n	8001df4 <forward_relu+0x90>
 8001e08:	bc70      	pop	{r4, r5, r6}
 8001e0a:	4770      	bx	lr
 8001e0c:	6993      	ldr	r3, [r2, #24]
 8001e0e:	6880      	ldr	r0, [r0, #8]
 8001e10:	689c      	ldr	r4, [r3, #8]
 8001e12:	6893      	ldr	r3, [r2, #8]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	d030      	beq.n	8001e7a <forward_relu+0x116>
 8001e18:	68d5      	ldr	r5, [r2, #12]
 8001e1a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001e1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8001e22:	429d      	cmp	r5, r3
 8001e24:	fb02 f101 	mul.w	r1, r2, r1
 8001e28:	d1f9      	bne.n	8001e1e <forward_relu+0xba>
 8001e2a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001e2e:	68b3      	ldr	r3, [r6, #8]
 8001e30:	440a      	add	r2, r1
 8001e32:	ed93 7a00 	vldr	s14, [r3]
 8001e36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8001e3a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d8e2      	bhi.n	8001e08 <forward_relu+0xa4>
 8001e42:	1d02      	adds	r2, r0, #4
 8001e44:	3304      	adds	r3, #4
 8001e46:	2000      	movs	r0, #0
 8001e48:	ed53 7a01 	vldr	s15, [r3, #-4]
 8001e4c:	1f19      	subs	r1, r3, #4
 8001e4e:	3b08      	subs	r3, #8
 8001e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	d405      	bmi.n	8001e66 <forward_relu+0x102>
 8001e5a:	429c      	cmp	r4, r3
 8001e5c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8001e60:	d8d2      	bhi.n	8001e08 <forward_relu+0xa4>
 8001e62:	460b      	mov	r3, r1
 8001e64:	e7f0      	b.n	8001e48 <forward_relu+0xe4>
 8001e66:	429c      	cmp	r4, r3
 8001e68:	ed62 7a01 	vstmdb	r2!, {s15}
 8001e6c:	d8cc      	bhi.n	8001e08 <forward_relu+0xa4>
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e7ea      	b.n	8001e48 <forward_relu+0xe4>
 8001e72:	2201      	movs	r2, #1
 8001e74:	e79a      	b.n	8001dac <forward_relu+0x48>
 8001e76:	4622      	mov	r2, r4
 8001e78:	e7b8      	b.n	8001dec <forward_relu+0x88>
 8001e7a:	68b2      	ldr	r2, [r6, #8]
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	ed92 7a00 	vldr	s14, [r2]
 8001e82:	e7de      	b.n	8001e42 <forward_relu+0xde>
 8001e84:	2300      	movs	r3, #0
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	deff      	udf	#255	; 0xff
 8001e8a:	bf00      	nop
 8001e8c:	00000000 	.word	0x00000000

08001e90 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8001e90:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001e9c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d42b      	bmi.n	8001efe <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8001ea6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001eaa:	4413      	add	r3, r2
 8001eac:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8001eb0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8001eb4:	4291      	cmp	r1, r2
 8001eb6:	d821      	bhi.n	8001efc <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8001eb8:	f10c 0104 	add.w	r1, ip, #4
 8001ebc:	1d13      	adds	r3, r2, #4
 8001ebe:	eba2 020c 	sub.w	r2, r2, ip
 8001ec2:	4408      	add	r0, r1
 8001ec4:	e00c      	b.n	8001ee0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8001ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eca:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	db01      	blt.n	8001ed8 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8001ed4:	ee65 7a86 	vmul.f32	s15, s11, s12
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	ed60 7a01 	vstmdb	r0!, {s15}
 8001ede:	d00c      	beq.n	8001efa <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8001ee0:	ed73 7a01 	vldmdb	r3!, {s15}
 8001ee4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	daeb      	bge.n	8001ec6 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8001eee:	eef0 7a66 	vmov.f32	s15, s13
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	ed60 7a01 	vstmdb	r0!, {s15}
 8001ef8:	d1f2      	bne.n	8001ee0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8001efa:	4770      	bx	lr
 8001efc:	4770      	bx	lr
 8001efe:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8001f02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001f06:	4413      	add	r3, r2
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8001f10:	b500      	push	{lr}
 8001f12:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8001f16:	d019      	beq.n	8001f4c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8001f18:	4561      	cmp	r1, ip
 8001f1a:	d815      	bhi.n	8001f48 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8001f1c:	f10e 0204 	add.w	r2, lr, #4
 8001f20:	f10c 0304 	add.w	r3, ip, #4
 8001f24:	ebac 010e 	sub.w	r1, ip, lr
 8001f28:	4402      	add	r2, r0
 8001f2a:	ed73 7a01 	vldmdb	r3!, {s15}
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001f3e:	d827      	bhi.n	8001f90 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8001f40:	428b      	cmp	r3, r1
 8001f42:	ed62 6a01 	vstmdb	r2!, {s13}
 8001f46:	d1f0      	bne.n	8001f2a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8001f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4c:	4561      	cmp	r1, ip
 8001f4e:	d8fb      	bhi.n	8001f48 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8001f50:	f10e 0204 	add.w	r2, lr, #4
 8001f54:	f10c 0304 	add.w	r3, ip, #4
 8001f58:	ebac 010e 	sub.w	r1, ip, lr
 8001f5c:	f04f 0c00 	mov.w	ip, #0
 8001f60:	4402      	add	r2, r0
 8001f62:	ed73 7a01 	vldmdb	r3!, {s15}
 8001f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d40a      	bmi.n	8001f86 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8001f70:	428b      	cmp	r3, r1
 8001f72:	f842 cd04 	str.w	ip, [r2, #-4]!
 8001f76:	d0e7      	beq.n	8001f48 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8001f78:	ed73 7a01 	vldmdb	r3!, {s15}
 8001f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	d5f4      	bpl.n	8001f70 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8001f86:	428b      	cmp	r3, r1
 8001f88:	ed62 7a01 	vstmdb	r2!, {s15}
 8001f8c:	d1e9      	bne.n	8001f62 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8001f8e:	e7db      	b.n	8001f48 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8001f90:	428b      	cmp	r3, r1
 8001f92:	ed62 7a01 	vstmdb	r2!, {s15}
 8001f96:	d1c8      	bne.n	8001f2a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8001f98:	e7d6      	b.n	8001f48 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8001f9a:	bf00      	nop

08001f9c <forward_lite_dense_if32of32wf32>:
 8001f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa0:	ed2d 8b0c 	vpush	{d8-d13}
 8001fa4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8001fa8:	6801      	ldr	r1, [r0, #0]
 8001faa:	b083      	sub	sp, #12
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001fb4:	9100      	str	r1, [sp, #0]
 8001fb6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001fba:	4299      	cmp	r1, r3
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f080 811c 	bcs.w	80021fa <forward_lite_dense_if32of32wf32+0x25e>
 8001fc2:	4607      	mov	r7, r0
 8001fc4:	6904      	ldr	r4, [r0, #16]
 8001fc6:	0096      	lsls	r6, r2, #2
 8001fc8:	9b00      	ldr	r3, [sp, #0]
 8001fca:	68bd      	ldr	r5, [r7, #8]
 8001fcc:	eb03 0e06 	add.w	lr, r3, r6
 8001fd0:	461e      	mov	r6, r3
 8001fd2:	459e      	cmp	lr, r3
 8001fd4:	f240 8103 	bls.w	80021de <forward_lite_dense_if32of32wf32+0x242>
 8001fd8:	f1a4 0c10 	sub.w	ip, r4, #16
 8001fdc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8001fe0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8001fe4:	f10c 0c01 	add.w	ip, ip, #1
 8001fe8:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8001fec:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8001ff0:	2c0f      	cmp	r4, #15
 8001ff2:	f240 8107 	bls.w	8002204 <forward_lite_dense_if32of32wf32+0x268>
 8001ff6:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8001ffa:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8001ffe:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002254 <forward_lite_dense_if32of32wf32+0x2b8>
 8002002:	4621      	mov	r1, r4
 8002004:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8002008:	3910      	subs	r1, #16
 800200a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800200e:	3340      	adds	r3, #64	; 0x40
 8002010:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8002014:	290f      	cmp	r1, #15
 8002016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800201a:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800201e:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8002022:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8002026:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800202a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800202e:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8002032:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 8002036:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 800203a:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 800203e:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 8002042:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 8002046:	eee5 7a86 	vfma.f32	s15, s11, s12
 800204a:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 800204e:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 8002052:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 8002056:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 800205a:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 800205e:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 8002062:	eeed 7a26 	vfma.f32	s15, s26, s13
 8002066:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800206a:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800206e:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8002072:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8002076:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800207a:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800207e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8002082:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8002086:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800208a:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800208e:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8002092:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8002096:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800209a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800209e:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80020a2:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80020a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80020aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 80020ae:	eee8 7a88 	vfma.f32	s15, s17, s16
 80020b2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80020b6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80020ba:	eee2 7a22 	vfma.f32	s15, s4, s5
 80020be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80020c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80020c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80020ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80020ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d2:	d897      	bhi.n	8002004 <forward_lite_dense_if32of32wf32+0x68>
 80020d4:	eb05 020b 	add.w	r2, r5, fp
 80020d8:	f004 010f 	and.w	r1, r4, #15
 80020dc:	4663      	mov	r3, ip
 80020de:	2903      	cmp	r1, #3
 80020e0:	d95f      	bls.n	80021a2 <forward_lite_dense_if32of32wf32+0x206>
 80020e2:	edd2 6a01 	vldr	s13, [r2, #4]
 80020e6:	1f08      	subs	r0, r1, #4
 80020e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ec:	ed93 4a00 	vldr	s8, [r3]
 80020f0:	2803      	cmp	r0, #3
 80020f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020f6:	edd2 4a00 	vldr	s9, [r2]
 80020fa:	ed93 5a02 	vldr	s10, [r3, #8]
 80020fe:	edd2 5a02 	vldr	s11, [r2, #8]
 8002102:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002106:	ed93 6a03 	vldr	s12, [r3, #12]
 800210a:	edd2 6a03 	vldr	s13, [r2, #12]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002116:	eee6 7a26 	vfma.f32	s15, s12, s13
 800211a:	eeb0 7a67 	vmov.f32	s14, s15
 800211e:	d938      	bls.n	8002192 <forward_lite_dense_if32of32wf32+0x1f6>
 8002120:	edd2 6a05 	vldr	s13, [r2, #20]
 8002124:	f1a1 0a08 	sub.w	sl, r1, #8
 8002128:	edd3 7a05 	vldr	s15, [r3, #20]
 800212c:	ed93 4a04 	vldr	s8, [r3, #16]
 8002130:	f1ba 0f03 	cmp.w	sl, #3
 8002134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002138:	edd2 4a04 	vldr	s9, [r2, #16]
 800213c:	ed93 5a06 	vldr	s10, [r3, #24]
 8002140:	edd2 5a06 	vldr	s11, [r2, #24]
 8002144:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002148:	ed93 6a07 	vldr	s12, [r3, #28]
 800214c:	edd2 6a07 	vldr	s13, [r2, #28]
 8002150:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002154:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215c:	d919      	bls.n	8002192 <forward_lite_dense_if32of32wf32+0x1f6>
 800215e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002162:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8002166:	ed92 4a08 	vldr	s8, [r2, #32]
 800216a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800216e:	edd3 4a08 	vldr	s9, [r3, #32]
 8002172:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8002176:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800217a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800217e:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8002182:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002186:	eee5 7a25 	vfma.f32	s15, s10, s11
 800218a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800218e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002192:	0880      	lsrs	r0, r0, #2
 8002194:	f001 0103 	and.w	r1, r1, #3
 8002198:	3001      	adds	r0, #1
 800219a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800219e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80021a2:	b1a9      	cbz	r1, 80021d0 <forward_lite_dense_if32of32wf32+0x234>
 80021a4:	edd3 6a00 	vldr	s13, [r3]
 80021a8:	3901      	subs	r1, #1
 80021aa:	edd2 7a00 	vldr	s15, [r2]
 80021ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80021b2:	d00d      	beq.n	80021d0 <forward_lite_dense_if32of32wf32+0x234>
 80021b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80021b8:	2901      	cmp	r1, #1
 80021ba:	edd2 7a01 	vldr	s15, [r2, #4]
 80021be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80021c2:	d005      	beq.n	80021d0 <forward_lite_dense_if32of32wf32+0x234>
 80021c4:	edd2 6a02 	vldr	s13, [r2, #8]
 80021c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80021cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80021d0:	eca6 7a01 	vstmia	r6!, {s14}
 80021d4:	45b6      	cmp	lr, r6
 80021d6:	444d      	add	r5, r9
 80021d8:	f63f af0a 	bhi.w	8001ff0 <forward_lite_dense_if32of32wf32+0x54>
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	b9b3      	cbnz	r3, 8002210 <forward_lite_dense_if32of32wf32+0x274>
 80021e2:	9b00      	ldr	r3, [sp, #0]
 80021e4:	0096      	lsls	r6, r2, #2
 80021e6:	9901      	ldr	r1, [sp, #4]
 80021e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80021ec:	693c      	ldr	r4, [r7, #16]
 80021ee:	4299      	cmp	r1, r3
 80021f0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f63f aee7 	bhi.w	8001fc8 <forward_lite_dense_if32of32wf32+0x2c>
 80021fa:	b003      	add	sp, #12
 80021fc:	ecbd 8b0c 	vpop	{d8-d13}
 8002200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002204:	4621      	mov	r1, r4
 8002206:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002254 <forward_lite_dense_if32of32wf32+0x2b8>
 800220a:	462a      	mov	r2, r5
 800220c:	4643      	mov	r3, r8
 800220e:	e766      	b.n	80020de <forward_lite_dense_if32of32wf32+0x142>
 8002210:	2a00      	cmp	r2, #0
 8002212:	d0e6      	beq.n	80021e2 <forward_lite_dense_if32of32wf32+0x246>
 8002214:	9a00      	ldr	r2, [sp, #0]
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	edd2 7a00 	vldr	s15, [r2]
 800221e:	4613      	mov	r3, r2
 8002220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002224:	edc2 7a00 	vstr	s15, [r2]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	2a01      	cmp	r2, #1
 800222c:	d9d9      	bls.n	80021e2 <forward_lite_dense_if32of32wf32+0x246>
 800222e:	1d19      	adds	r1, r3, #4
 8002230:	2301      	movs	r3, #1
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	ed91 7a00 	vldr	s14, [r1]
 8002238:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800223c:	3301      	adds	r3, #1
 800223e:	edd2 7a00 	vldr	s15, [r2]
 8002242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002246:	ece1 7a01 	vstmia	r1!, {s15}
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f0      	bhi.n	8002232 <forward_lite_dense_if32of32wf32+0x296>
 8002250:	e7c7      	b.n	80021e2 <forward_lite_dense_if32of32wf32+0x246>
 8002252:	bf00      	nop
 8002254:	00000000 	.word	0x00000000

08002258 <forward_lite_dense_if32of32wf32_lut4>:
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	b08d      	sub	sp, #52	; 0x34
 800225e:	4605      	mov	r5, r0
 8002260:	460c      	mov	r4, r1
 8002262:	9005      	str	r0, [sp, #20]
 8002264:	4618      	mov	r0, r3
 8002266:	920a      	str	r2, [sp, #40]	; 0x28
 8002268:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800226a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002276:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002278:	9308      	str	r3, [sp, #32]
 800227a:	b126      	cbz	r6, 8002286 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	4631      	mov	r1, r6
 8002280:	f000 fbc4 	bl	8002a0c <st_int8_copy>
 8002284:	4630      	mov	r0, r6
 8002286:	9b05      	ldr	r3, [sp, #20]
 8002288:	9a08      	ldr	r2, [sp, #32]
 800228a:	4293      	cmp	r3, r2
 800228c:	f080 80f7 	bcs.w	800247e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8002290:	08eb      	lsrs	r3, r5, #3
 8002292:	f005 0101 	and.w	r1, r5, #1
 8002296:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002298:	f025 0801 	bic.w	r8, r5, #1
 800229c:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	9102      	str	r1, [sp, #8]
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	f104 0b20 	add.w	fp, r4, #32
 80022ac:	00a9      	lsls	r1, r5, #2
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80022b4:	9b05      	ldr	r3, [sp, #20]
 80022b6:	9207      	str	r2, [sp, #28]
 80022b8:	9109      	str	r1, [sp, #36]	; 0x24
 80022ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80022bc:	9a07      	ldr	r2, [sp, #28]
 80022be:	eb03 0902 	add.w	r9, r3, r2
 80022c2:	f1ab 0220 	sub.w	r2, fp, #32
 80022c6:	4599      	cmp	r9, r3
 80022c8:	9206      	str	r2, [sp, #24]
 80022ca:	f240 80db 	bls.w	8002484 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 80022ce:	469e      	mov	lr, r3
 80022d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80b4 	beq.w	8002448 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80022e0:	9b04      	ldr	r3, [sp, #16]
 80022e2:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80024a8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80022e6:	18d4      	adds	r4, r2, r3
 80022e8:	465b      	mov	r3, fp
 80022ea:	7816      	ldrb	r6, [r2, #0]
 80022ec:	3204      	adds	r2, #4
 80022ee:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 80022f2:	3320      	adds	r3, #32
 80022f4:	f006 070f 	and.w	r7, r6, #15
 80022f8:	0936      	lsrs	r6, r6, #4
 80022fa:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 80022fe:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002302:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 8002306:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800230a:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 800230e:	edd7 7a00 	vldr	s15, [r7]
 8002312:	ed96 3a00 	vldr	s6, [r6]
 8002316:	092e      	lsrs	r6, r5, #4
 8002318:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800231c:	f005 050f 	and.w	r5, r5, #15
 8002320:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002324:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8002328:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800232c:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8002330:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002334:	ed96 3a00 	vldr	s6, [r6]
 8002338:	ed95 4a00 	vldr	s8, [r5]
 800233c:	090d      	lsrs	r5, r1, #4
 800233e:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8002342:	f001 010f 	and.w	r1, r1, #15
 8002346:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800234a:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 800234e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002352:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8002356:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800235a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800235e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8002362:	ed95 4a00 	vldr	s8, [r5]
 8002366:	ed91 5a00 	vldr	s10, [r1]
 800236a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800236e:	42a2      	cmp	r2, r4
 8002370:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8002374:	f001 010f 	and.w	r1, r1, #15
 8002378:	eee4 7a24 	vfma.f32	s15, s8, s9
 800237c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002384:	eee5 7a06 	vfma.f32	s15, s10, s12
 8002388:	ed95 5a00 	vldr	s10, [r5]
 800238c:	ed91 6a00 	vldr	s12, [r1]
 8002390:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002394:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239c:	d1a5      	bne.n	80022ea <forward_lite_dense_if32of32wf32_lut4+0x92>
 800239e:	4656      	mov	r6, sl
 80023a0:	4546      	cmp	r6, r8
 80023a2:	d257      	bcs.n	8002454 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80023a4:	9b03      	ldr	r3, [sp, #12]
 80023a6:	f106 0208 	add.w	r2, r6, #8
 80023aa:	1e61      	subs	r1, r4, #1
 80023ac:	1b9d      	subs	r5, r3, r6
 80023ae:	08ef      	lsrs	r7, r5, #3
 80023b0:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 80023b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80023b8:	3208      	adds	r2, #8
 80023ba:	ed52 5a03 	vldr	s11, [r2, #-12]
 80023be:	f003 0c0f 	and.w	ip, r3, #15
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	ed52 6a04 	vldr	s13, [r2, #-16]
 80023c8:	42a9      	cmp	r1, r5
 80023ca:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80023ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80023d2:	eddc 7a00 	vldr	s15, [ip]
 80023d6:	ed93 6a00 	vldr	s12, [r3]
 80023da:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80023de:	eee6 7a26 	vfma.f32	s15, s12, s13
 80023e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e6:	d1e5      	bne.n	80023b4 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 80023e8:	3701      	adds	r7, #1
 80023ea:	19e2      	adds	r2, r4, r7
 80023ec:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80023f0:	9b02      	ldr	r3, [sp, #8]
 80023f2:	b30b      	cbz	r3, 8002438 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 80023f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80023f8:	edd6 7a00 	vldr	s15, [r6]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002402:	edd3 6a00 	vldr	s13, [r3]
 8002406:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800240a:	ecae 7a01 	vstmia	lr!, {s14}
 800240e:	45f1      	cmp	r9, lr
 8002410:	f63f af62 	bhi.w	80022d8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8002414:	9b05      	ldr	r3, [sp, #20]
 8002416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002418:	1899      	adds	r1, r3, r2
 800241a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800241c:	b9e3      	cbnz	r3, 8002458 <forward_lite_dense_if32of32wf32_lut4+0x200>
 800241e:	9b08      	ldr	r3, [sp, #32]
 8002420:	428b      	cmp	r3, r1
 8002422:	d92c      	bls.n	800247e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8002424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002426:	4498      	add	r8, r3
 8002428:	449a      	add	sl, r3
 800242a:	449b      	add	fp, r3
 800242c:	9b05      	ldr	r3, [sp, #20]
 800242e:	4599      	cmp	r9, r3
 8002430:	d92a      	bls.n	8002488 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8002432:	460b      	mov	r3, r1
 8002434:	9105      	str	r1, [sp, #20]
 8002436:	e741      	b.n	80022bc <forward_lite_dense_if32of32wf32_lut4+0x64>
 8002438:	ecae 7a01 	vstmia	lr!, {s14}
 800243c:	45f1      	cmp	r9, lr
 800243e:	d9e9      	bls.n	8002414 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8002440:	9b01      	ldr	r3, [sp, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f47f af4c 	bne.w	80022e0 <forward_lite_dense_if32of32wf32_lut4+0x88>
 8002448:	9e06      	ldr	r6, [sp, #24]
 800244a:	4614      	mov	r4, r2
 800244c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80024a8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8002450:	4546      	cmp	r6, r8
 8002452:	d3a7      	bcc.n	80023a4 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8002454:	4622      	mov	r2, r4
 8002456:	e7cb      	b.n	80023f0 <forward_lite_dense_if32of32wf32_lut4+0x198>
 8002458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0df      	beq.n	800241e <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 800245e:	9b07      	ldr	r3, [sp, #28]
 8002460:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002462:	1acb      	subs	r3, r1, r3
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ecb2 7a01 	vldmia	r2!, {s14}
 800246c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002470:	ece3 7a01 	vstmia	r3!, {s15}
 8002474:	428b      	cmp	r3, r1
 8002476:	d1f5      	bne.n	8002464 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8002478:	9b08      	ldr	r3, [sp, #32]
 800247a:	428b      	cmp	r3, r1
 800247c:	d8d2      	bhi.n	8002424 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 800247e:	b00d      	add	sp, #52	; 0x34
 8002480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002484:	4619      	mov	r1, r3
 8002486:	e7c8      	b.n	800241a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8002488:	9b07      	ldr	r3, [sp, #28]
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	461a      	mov	r2, r3
 800248e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002490:	ed92 7a00 	vldr	s14, [r2]
 8002494:	ecf0 7a01 	vldmia	r0!, {s15}
 8002498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800249c:	ece2 7a01 	vstmia	r2!, {s15}
 80024a0:	428a      	cmp	r2, r1
 80024a2:	d1f5      	bne.n	8002490 <forward_lite_dense_if32of32wf32_lut4+0x238>
 80024a4:	e7f2      	b.n	800248c <forward_lite_dense_if32of32wf32_lut4+0x234>
 80024a6:	bf00      	nop
 80024a8:	00000000 	.word	0x00000000

080024ac <forward_lite_dense_if32of32wf32_lut8>:
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	b091      	sub	sp, #68	; 0x44
 80024b2:	4699      	mov	r9, r3
 80024b4:	468b      	mov	fp, r1
 80024b6:	920e      	str	r2, [sp, #56]	; 0x38
 80024b8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80024ba:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80024be:	9003      	str	r0, [sp, #12]
 80024c0:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80024cc:	930c      	str	r3, [sp, #48]	; 0x30
 80024ce:	b134      	cbz	r4, 80024de <forward_lite_dense_if32of32wf32_lut8+0x32>
 80024d0:	4648      	mov	r0, r9
 80024d2:	46a1      	mov	r9, r4
 80024d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d8:	4621      	mov	r1, r4
 80024da:	f000 fa97 	bl	8002a0c <st_int8_copy>
 80024de:	9b03      	ldr	r3, [sp, #12]
 80024e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f080 8084 	bcs.w	80025f0 <forward_lite_dense_if32of32wf32_lut8+0x144>
 80024e8:	4bb7      	ldr	r3, [pc, #732]	; (80027c8 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 80024ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80024ec:	4443      	add	r3, r8
 80024ee:	9d03      	ldr	r5, [sp, #12]
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	eddf 3ab6 	vldr	s7, [pc, #728]	; 80027cc <forward_lite_dense_if32of32wf32_lut8+0x320>
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80024fa:	f103 0120 	add.w	r1, r3, #32
 80024fe:	930d      	str	r3, [sp, #52]	; 0x34
 8002500:	445b      	add	r3, fp
 8002502:	920f      	str	r2, [sp, #60]	; 0x3c
 8002504:	9105      	str	r1, [sp, #20]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	eb0b 0301 	add.w	r3, fp, r1
 800250c:	469a      	mov	sl, r3
 800250e:	469e      	mov	lr, r3
 8002510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002512:	eb05 0c03 	add.w	ip, r5, r3
 8002516:	45ac      	cmp	ip, r5
 8002518:	d952      	bls.n	80025c0 <forward_lite_dense_if32of32wf32_lut8+0x114>
 800251a:	9800      	ldr	r0, [sp, #0]
 800251c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800251e:	f100 011f 	add.w	r1, r0, #31
 8002522:	eba0 020b 	sub.w	r2, r0, fp
 8002526:	445b      	add	r3, fp
 8002528:	9101      	str	r1, [sp, #4]
 800252a:	eba1 010b 	sub.w	r1, r1, fp
 800252e:	0952      	lsrs	r2, r2, #5
 8002530:	9306      	str	r3, [sp, #24]
 8002532:	0889      	lsrs	r1, r1, #2
 8002534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002536:	3101      	adds	r1, #1
 8002538:	9102      	str	r1, [sp, #8]
 800253a:	1c51      	adds	r1, r2, #1
 800253c:	00d2      	lsls	r2, r2, #3
 800253e:	3210      	adds	r2, #16
 8002540:	920a      	str	r2, [sp, #40]	; 0x28
 8002542:	00ca      	lsls	r2, r1, #3
 8002544:	9208      	str	r2, [sp, #32]
 8002546:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 800254a:	9209      	str	r2, [sp, #36]	; 0x24
 800254c:	1f02      	subs	r2, r0, #4
 800254e:	9204      	str	r2, [sp, #16]
 8002550:	f10b 0204 	add.w	r2, fp, #4
 8002554:	9207      	str	r2, [sp, #28]
 8002556:	f1b8 0f07 	cmp.w	r8, #7
 800255a:	d84c      	bhi.n	80025f6 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 800255c:	45d3      	cmp	fp, sl
 800255e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80027cc <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002562:	d20f      	bcs.n	8002584 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8002564:	4659      	mov	r1, fp
 8002566:	4618      	mov	r0, r3
 8002568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800256c:	ecf1 7a01 	vldmia	r1!, {s15}
 8002570:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002574:	4551      	cmp	r1, sl
 8002576:	edd2 6a00 	vldr	s13, [r2]
 800257a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800257e:	d3f3      	bcc.n	8002568 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8002580:	9a02      	ldr	r2, [sp, #8]
 8002582:	4413      	add	r3, r2
 8002584:	eca5 7a01 	vstmia	r5!, {s14}
 8002588:	45ac      	cmp	ip, r5
 800258a:	d8e4      	bhi.n	8002556 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	46f3      	mov	fp, lr
 8002590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002592:	1899      	adds	r1, r3, r2
 8002594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002596:	b9c3      	cbnz	r3, 80025ca <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8002598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800259a:	428b      	cmp	r3, r1
 800259c:	d928      	bls.n	80025f0 <forward_lite_dense_if32of32wf32_lut8+0x144>
 800259e:	9b00      	ldr	r3, [sp, #0]
 80025a0:	9a05      	ldr	r2, [sp, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	4492      	add	sl, r2
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	9b03      	ldr	r3, [sp, #12]
 80025aa:	459c      	cmp	ip, r3
 80025ac:	f240 821e 	bls.w	80029ec <forward_lite_dense_if32of32wf32_lut8+0x540>
 80025b0:	460d      	mov	r5, r1
 80025b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025b4:	4496      	add	lr, r2
 80025b6:	9103      	str	r1, [sp, #12]
 80025b8:	eb05 0c03 	add.w	ip, r5, r3
 80025bc:	45ac      	cmp	ip, r5
 80025be:	d8ac      	bhi.n	800251a <forward_lite_dense_if32of32wf32_lut8+0x6e>
 80025c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80025c2:	4629      	mov	r1, r5
 80025c4:	46f3      	mov	fp, lr
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0e6      	beq.n	8002598 <forward_lite_dense_if32of32wf32_lut8+0xec>
 80025ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0e3      	beq.n	8002598 <forward_lite_dense_if32of32wf32_lut8+0xec>
 80025d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80025d4:	1acb      	subs	r3, r1, r3
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ecb2 7a01 	vldmia	r2!, {s14}
 80025de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e2:	ece3 7a01 	vstmia	r3!, {s15}
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d1f5      	bne.n	80025d6 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 80025ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d8d6      	bhi.n	800259e <forward_lite_dense_if32of32wf32_lut8+0xf2>
 80025f0:	b011      	add	sp, #68	; 0x44
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	2a02      	cmp	r2, #2
 80025fc:	f000 81ee 	beq.w	80029dc <forward_lite_dense_if32of32wf32_lut8+0x530>
 8002600:	2a03      	cmp	r2, #3
 8002602:	f000 80e5 	beq.w	80027d0 <forward_lite_dense_if32of32wf32_lut8+0x324>
 8002606:	2a01      	cmp	r2, #1
 8002608:	f000 81d2 	beq.w	80029b0 <forward_lite_dense_if32of32wf32_lut8+0x504>
 800260c:	9a06      	ldr	r2, [sp, #24]
 800260e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80027cc <forward_lite_dense_if32of32wf32_lut8+0x320>
 8002612:	4593      	cmp	fp, r2
 8002614:	f200 81e8 	bhi.w	80029e8 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8002618:	980a      	ldr	r0, [sp, #40]	; 0x28
 800261a:	f103 0208 	add.w	r2, r3, #8
 800261e:	f10b 0120 	add.w	r1, fp, #32
 8002622:	18c4      	adds	r4, r0, r3
 8002624:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8002628:	3208      	adds	r2, #8
 800262a:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 800262e:	3120      	adds	r1, #32
 8002630:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002634:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 8002638:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 800263c:	edd0 7a00 	vldr	s15, [r0]
 8002640:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8002644:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8002648:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 800264c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002650:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 8002654:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 8002658:	edd0 2a00 	vldr	s5, [r0]
 800265c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8002660:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002664:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 8002668:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800266c:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8002670:	ed90 3a00 	vldr	s6, [r0]
 8002674:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8002678:	eee3 7a04 	vfma.f32	s15, s6, s8
 800267c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002680:	ed90 4a00 	vldr	s8, [r0]
 8002684:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8002688:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800268c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002690:	edd0 4a00 	vldr	s9, [r0]
 8002694:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8002698:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800269c:	eee4 7a85 	vfma.f32	s15, s9, s10
 80026a0:	ed90 5a00 	vldr	s10, [r0]
 80026a4:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 80026a8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80026ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80026b0:	edd0 5a00 	vldr	s11, [r0]
 80026b4:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 80026b8:	42a2      	cmp	r2, r4
 80026ba:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80026be:	eee5 7a86 	vfma.f32	s15, s11, s12
 80026c2:	ed90 6a00 	vldr	s12, [r0]
 80026c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80026ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ce:	d1a9      	bne.n	8002624 <forward_lite_dense_if32of32wf32_lut8+0x178>
 80026d0:	9a08      	ldr	r2, [sp, #32]
 80026d2:	4413      	add	r3, r2
 80026d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026d6:	4572      	cmp	r2, lr
 80026d8:	f4bf af54 	bcs.w	8002584 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80026dc:	7819      	ldrb	r1, [r3, #0]
 80026de:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80026e2:	edd1 7a00 	vldr	s15, [r1]
 80026e6:	4611      	mov	r1, r2
 80026e8:	ecf1 6a01 	vldmia	r1!, {s13}
 80026ec:	458a      	cmp	sl, r1
 80026ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80026f2:	d963      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 80026f4:	7859      	ldrb	r1, [r3, #1]
 80026f6:	edd2 6a01 	vldr	s13, [r2, #4]
 80026fa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80026fe:	edd1 7a00 	vldr	s15, [r1]
 8002702:	f102 0108 	add.w	r1, r2, #8
 8002706:	458a      	cmp	sl, r1
 8002708:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800270c:	d956      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 800270e:	7899      	ldrb	r1, [r3, #2]
 8002710:	edd2 6a02 	vldr	s13, [r2, #8]
 8002714:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002718:	edd1 7a00 	vldr	s15, [r1]
 800271c:	f102 010c 	add.w	r1, r2, #12
 8002720:	458a      	cmp	sl, r1
 8002722:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002726:	d949      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002728:	78d9      	ldrb	r1, [r3, #3]
 800272a:	edd2 6a03 	vldr	s13, [r2, #12]
 800272e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002732:	edd1 7a00 	vldr	s15, [r1]
 8002736:	f102 0110 	add.w	r1, r2, #16
 800273a:	458a      	cmp	sl, r1
 800273c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002740:	d93c      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002742:	7919      	ldrb	r1, [r3, #4]
 8002744:	edd2 6a04 	vldr	s13, [r2, #16]
 8002748:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800274c:	edd1 7a00 	vldr	s15, [r1]
 8002750:	f102 0114 	add.w	r1, r2, #20
 8002754:	458a      	cmp	sl, r1
 8002756:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800275a:	d92f      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 800275c:	7959      	ldrb	r1, [r3, #5]
 800275e:	edd2 6a05 	vldr	s13, [r2, #20]
 8002762:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002766:	edd1 7a00 	vldr	s15, [r1]
 800276a:	f102 0118 	add.w	r1, r2, #24
 800276e:	458a      	cmp	sl, r1
 8002770:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002774:	d922      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002776:	7999      	ldrb	r1, [r3, #6]
 8002778:	edd2 6a06 	vldr	s13, [r2, #24]
 800277c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002780:	edd1 7a00 	vldr	s15, [r1]
 8002784:	f102 011c 	add.w	r1, r2, #28
 8002788:	458a      	cmp	sl, r1
 800278a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800278e:	d915      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8002790:	79d9      	ldrb	r1, [r3, #7]
 8002792:	edd2 6a07 	vldr	s13, [r2, #28]
 8002796:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800279a:	edd1 7a00 	vldr	s15, [r1]
 800279e:	f102 0120 	add.w	r1, r2, #32
 80027a2:	458a      	cmp	sl, r1
 80027a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80027a8:	d908      	bls.n	80027bc <forward_lite_dense_if32of32wf32_lut8+0x310>
 80027aa:	7a19      	ldrb	r1, [r3, #8]
 80027ac:	edd2 7a08 	vldr	s15, [r2, #32]
 80027b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80027b4:	edd1 6a00 	vldr	s13, [r1]
 80027b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80027bc:	9901      	ldr	r1, [sp, #4]
 80027be:	1a8a      	subs	r2, r1, r2
 80027c0:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 80027c4:	1c53      	adds	r3, r2, #1
 80027c6:	e6dd      	b.n	8002584 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80027c8:	3ffffff8 	.word	0x3ffffff8
 80027cc:	00000000 	.word	0x00000000
 80027d0:	eeb0 7a63 	vmov.f32	s14, s7
 80027d4:	465a      	mov	r2, fp
 80027d6:	461f      	mov	r7, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80027de:	ecf0 7a01 	vldmia	r0!, {s15}
 80027e2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80027e6:	edd1 6a00 	vldr	s13, [r1]
 80027ea:	9900      	ldr	r1, [sp, #0]
 80027ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80027f0:	4288      	cmp	r0, r1
 80027f2:	f200 80f7 	bhi.w	80029e4 <forward_lite_dense_if32of32wf32_lut8+0x538>
 80027f6:	9904      	ldr	r1, [sp, #16]
 80027f8:	f103 0411 	add.w	r4, r3, #17
 80027fc:	3309      	adds	r3, #9
 80027fe:	1a8e      	subs	r6, r1, r2
 8002800:	3224      	adds	r2, #36	; 0x24
 8002802:	0976      	lsrs	r6, r6, #5
 8002804:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002808:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800280c:	3308      	adds	r3, #8
 800280e:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 8002812:	3220      	adds	r2, #32
 8002814:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002818:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 800281c:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8002820:	edd1 7a00 	vldr	s15, [r1]
 8002824:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002828:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800282c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8002830:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002834:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8002838:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800283c:	edd1 2a00 	vldr	s5, [r1]
 8002840:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8002844:	eee2 7a83 	vfma.f32	s15, s5, s6
 8002848:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 800284c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002850:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8002854:	ed91 3a00 	vldr	s6, [r1]
 8002858:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800285c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002860:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002864:	ed91 4a00 	vldr	s8, [r1]
 8002868:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800286c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002870:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002874:	edd1 4a00 	vldr	s9, [r1]
 8002878:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800287c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002880:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002884:	ed91 5a00 	vldr	s10, [r1]
 8002888:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800288c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002890:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002894:	edd1 5a00 	vldr	s11, [r1]
 8002898:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800289c:	42a3      	cmp	r3, r4
 800289e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80028a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80028a6:	ed91 6a00 	vldr	s12, [r1]
 80028aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80028ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b2:	d1a9      	bne.n	8002808 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 80028b4:	3601      	adds	r6, #1
 80028b6:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 80028ba:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80028be:	4550      	cmp	r0, sl
 80028c0:	f4bf ae60 	bcs.w	8002584 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80028ca:	edd2 7a00 	vldr	s15, [r2]
 80028ce:	4602      	mov	r2, r0
 80028d0:	ecf2 6a01 	vldmia	r2!, {s13}
 80028d4:	4592      	cmp	sl, r2
 80028d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80028da:	d963      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80028dc:	785a      	ldrb	r2, [r3, #1]
 80028de:	edd0 6a01 	vldr	s13, [r0, #4]
 80028e2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80028e6:	edd2 7a00 	vldr	s15, [r2]
 80028ea:	f100 0208 	add.w	r2, r0, #8
 80028ee:	4592      	cmp	sl, r2
 80028f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80028f4:	d956      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80028f6:	789a      	ldrb	r2, [r3, #2]
 80028f8:	edd0 6a02 	vldr	s13, [r0, #8]
 80028fc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002900:	edd2 7a00 	vldr	s15, [r2]
 8002904:	f100 020c 	add.w	r2, r0, #12
 8002908:	4592      	cmp	sl, r2
 800290a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800290e:	d949      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002910:	78da      	ldrb	r2, [r3, #3]
 8002912:	edd0 6a03 	vldr	s13, [r0, #12]
 8002916:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800291a:	edd2 7a00 	vldr	s15, [r2]
 800291e:	f100 0210 	add.w	r2, r0, #16
 8002922:	4592      	cmp	sl, r2
 8002924:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002928:	d93c      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800292a:	791a      	ldrb	r2, [r3, #4]
 800292c:	edd0 6a04 	vldr	s13, [r0, #16]
 8002930:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002934:	edd2 7a00 	vldr	s15, [r2]
 8002938:	f100 0214 	add.w	r2, r0, #20
 800293c:	4592      	cmp	sl, r2
 800293e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002942:	d92f      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002944:	795a      	ldrb	r2, [r3, #5]
 8002946:	edd0 6a05 	vldr	s13, [r0, #20]
 800294a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800294e:	edd2 7a00 	vldr	s15, [r2]
 8002952:	f100 0218 	add.w	r2, r0, #24
 8002956:	4596      	cmp	lr, r2
 8002958:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800295c:	d922      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800295e:	799a      	ldrb	r2, [r3, #6]
 8002960:	edd0 6a06 	vldr	s13, [r0, #24]
 8002964:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002968:	edd2 7a00 	vldr	s15, [r2]
 800296c:	f100 021c 	add.w	r2, r0, #28
 8002970:	4596      	cmp	lr, r2
 8002972:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002976:	d915      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002978:	79da      	ldrb	r2, [r3, #7]
 800297a:	edd0 6a07 	vldr	s13, [r0, #28]
 800297e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002982:	edd2 7a00 	vldr	s15, [r2]
 8002986:	f100 0220 	add.w	r2, r0, #32
 800298a:	4596      	cmp	lr, r2
 800298c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002990:	d908      	bls.n	80029a4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8002992:	7a1a      	ldrb	r2, [r3, #8]
 8002994:	edd0 7a08 	vldr	s15, [r0, #32]
 8002998:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800299c:	edd2 6a00 	vldr	s13, [r2]
 80029a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029a4:	9a01      	ldr	r2, [sp, #4]
 80029a6:	1a10      	subs	r0, r2, r0
 80029a8:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	e5e9      	b.n	8002584 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80029b0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029b4:	eddb 7a00 	vldr	s15, [fp]
 80029b8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80029bc:	9a07      	ldr	r2, [sp, #28]
 80029be:	ed91 7a00 	vldr	s14, [r1]
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029ca:	ecf2 7a01 	vldmia	r2!, {s15}
 80029ce:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80029d2:	edd1 6a00 	vldr	s13, [r1]
 80029d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029da:	e6fc      	b.n	80027d6 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 80029dc:	eeb0 7a63 	vmov.f32	s14, s7
 80029e0:	465a      	mov	r2, fp
 80029e2:	e7f0      	b.n	80029c6 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 80029e4:	463b      	mov	r3, r7
 80029e6:	e76a      	b.n	80028be <forward_lite_dense_if32of32wf32_lut8+0x412>
 80029e8:	465a      	mov	r2, fp
 80029ea:	e674      	b.n	80026d6 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 80029ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029ee:	1acb      	subs	r3, r1, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80029f4:	ed92 7a00 	vldr	s14, [r2]
 80029f8:	ecf0 7a01 	vldmia	r0!, {s15}
 80029fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a00:	ece2 7a01 	vstmia	r2!, {s15}
 8002a04:	4291      	cmp	r1, r2
 8002a06:	d1f5      	bne.n	80029f4 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8002a08:	e7f2      	b.n	80029f0 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8002a0a:	bf00      	nop

08002a0c <st_int8_copy>:
 8002a0c:	4288      	cmp	r0, r1
 8002a0e:	d010      	beq.n	8002a32 <st_int8_copy+0x26>
 8002a10:	b17a      	cbz	r2, 8002a32 <st_int8_copy+0x26>
 8002a12:	4288      	cmp	r0, r1
 8002a14:	eb00 0302 	add.w	r3, r0, r2
 8002a18:	d20c      	bcs.n	8002a34 <st_int8_copy+0x28>
 8002a1a:	428b      	cmp	r3, r1
 8002a1c:	d90a      	bls.n	8002a34 <st_int8_copy+0x28>
 8002a1e:	4283      	cmp	r3, r0
 8002a20:	440a      	add	r2, r1
 8002a22:	d906      	bls.n	8002a32 <st_int8_copy+0x26>
 8002a24:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8002a28:	4283      	cmp	r3, r0
 8002a2a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002a2e:	d1f9      	bne.n	8002a24 <st_int8_copy+0x18>
 8002a30:	4770      	bx	lr
 8002a32:	4770      	bx	lr
 8002a34:	078b      	lsls	r3, r1, #30
 8002a36:	d102      	bne.n	8002a3e <st_int8_copy+0x32>
 8002a38:	e008      	b.n	8002a4c <st_int8_copy+0x40>
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	d04c      	beq.n	8002ad8 <st_int8_copy+0xcc>
 8002a3e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	f801 3b01 	strb.w	r3, [r1], #1
 8002a48:	078b      	lsls	r3, r1, #30
 8002a4a:	d1f6      	bne.n	8002a3a <st_int8_copy+0x2e>
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a50:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8002a54:	d05d      	beq.n	8002b12 <st_int8_copy+0x106>
 8002a56:	ea41 0300 	orr.w	r3, r1, r0
 8002a5a:	075b      	lsls	r3, r3, #29
 8002a5c:	d13d      	bne.n	8002ada <st_int8_copy+0xce>
 8002a5e:	f1be 0f01 	cmp.w	lr, #1
 8002a62:	d03a      	beq.n	8002ada <st_int8_copy+0xce>
 8002a64:	f100 0310 	add.w	r3, r0, #16
 8002a68:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8002a6c:	f101 0c10 	add.w	ip, r1, #16
 8002a70:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8002a74:	3310      	adds	r3, #16
 8002a76:	f10c 0c10 	add.w	ip, ip, #16
 8002a7a:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8002a7e:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8002a82:	4573      	cmp	r3, lr
 8002a84:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8002a88:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8002a8c:	d1f2      	bne.n	8002a74 <st_int8_copy+0x68>
 8002a8e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8002a92:	4421      	add	r1, r4
 8002a94:	4420      	add	r0, r4
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	b16b      	cbz	r3, 8002ab8 <st_int8_copy+0xac>
 8002a9c:	6804      	ldr	r4, [r0, #0]
 8002a9e:	600c      	str	r4, [r1, #0]
 8002aa0:	1e5c      	subs	r4, r3, #1
 8002aa2:	d005      	beq.n	8002ab0 <st_int8_copy+0xa4>
 8002aa4:	6845      	ldr	r5, [r0, #4]
 8002aa6:	2c01      	cmp	r4, #1
 8002aa8:	604d      	str	r5, [r1, #4]
 8002aaa:	d001      	beq.n	8002ab0 <st_int8_copy+0xa4>
 8002aac:	6884      	ldr	r4, [r0, #8]
 8002aae:	608c      	str	r4, [r1, #8]
 8002ab0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002ab4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002ab8:	b162      	cbz	r2, 8002ad4 <st_int8_copy+0xc8>
 8002aba:	f990 3000 	ldrsb.w	r3, [r0]
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	700b      	strb	r3, [r1, #0]
 8002ac2:	d007      	beq.n	8002ad4 <st_int8_copy+0xc8>
 8002ac4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8002ac8:	2a01      	cmp	r2, #1
 8002aca:	704b      	strb	r3, [r1, #1]
 8002acc:	d002      	beq.n	8002ad4 <st_int8_copy+0xc8>
 8002ace:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8002ad2:	708b      	strb	r3, [r1, #2]
 8002ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ad8:	4770      	bx	lr
 8002ada:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8002ade:	460b      	mov	r3, r1
 8002ae0:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8002ae4:	4684      	mov	ip, r0
 8002ae6:	f8dc 8000 	ldr.w	r8, [ip]
 8002aea:	3310      	adds	r3, #16
 8002aec:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8002af0:	f10c 0c10 	add.w	ip, ip, #16
 8002af4:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8002af8:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8002afc:	f843 8c10 	str.w	r8, [r3, #-16]
 8002b00:	f843 7c0c 	str.w	r7, [r3, #-12]
 8002b04:	f843 6c08 	str.w	r6, [r3, #-8]
 8002b08:	f843 5c04 	str.w	r5, [r3, #-4]
 8002b0c:	459e      	cmp	lr, r3
 8002b0e:	d1ea      	bne.n	8002ae6 <st_int8_copy+0xda>
 8002b10:	e7bd      	b.n	8002a8e <st_int8_copy+0x82>
 8002b12:	0893      	lsrs	r3, r2, #2
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	e7bf      	b.n	8002a9a <st_int8_copy+0x8e>
 8002b1a:	bf00      	nop

08002b1c <ai_array_to_buffer_fmt>:
 8002b1c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d053      	beq.n	8002bcc <ai_array_to_buffer_fmt+0xb0>
 8002b24:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8002b28:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <ai_array_to_buffer_fmt+0xbc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d010      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b2e:	dc21      	bgt.n	8002b74 <ai_array_to_buffer_fmt+0x58>
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <ai_array_to_buffer_fmt+0xc0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00c      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b36:	dd0f      	ble.n	8002b58 <ai_array_to_buffer_fmt+0x3c>
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <ai_array_to_buffer_fmt+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d008      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b3e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <ai_array_to_buffer_fmt+0xc8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bf0c      	ite	eq
 8002b4c:	4613      	moveq	r3, r2
 8002b4e:	2340      	movne	r3, #64	; 0x40
 8002b50:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8002b54:	4318      	orrs	r0, r3
 8002b56:	4770      	bx	lr
 8002b58:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d0f7      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b60:	dd2a      	ble.n	8002bb8 <ai_array_to_buffer_fmt+0x9c>
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <ai_array_to_buffer_fmt+0xcc>)
 8002b64:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf0c      	ite	eq
 8002b6c:	4613      	moveq	r3, r2
 8002b6e:	2340      	movne	r3, #64	; 0x40
 8002b70:	4318      	orrs	r0, r3
 8002b72:	4770      	bx	lr
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <ai_array_to_buffer_fmt+0xd0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d0ea      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b7a:	dd0f      	ble.n	8002b9c <ai_array_to_buffer_fmt+0x80>
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <ai_array_to_buffer_fmt+0xd4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d0e6      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b82:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d0e2      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <ai_array_to_buffer_fmt+0xd8>)
 8002b8c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bf0c      	ite	eq
 8002b94:	4613      	moveq	r3, r2
 8002b96:	2340      	movne	r3, #64	; 0x40
 8002b98:	4318      	orrs	r0, r3
 8002b9a:	4770      	bx	lr
 8002b9c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d0d5      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002ba4:	3207      	adds	r2, #7
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d0d2      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002baa:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	bf0c      	ite	eq
 8002bb2:	4613      	moveq	r3, r2
 8002bb4:	2340      	movne	r3, #64	; 0x40
 8002bb6:	e7cb      	b.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002bb8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d0c7      	beq.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002bc0:	3280      	adds	r2, #128	; 0x80
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	bf0c      	ite	eq
 8002bc6:	4613      	moveq	r3, r2
 8002bc8:	2340      	movne	r3, #64	; 0x40
 8002bca:	e7c1      	b.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <ai_array_to_buffer_fmt+0xdc>)
 8002bce:	4003      	ands	r3, r0
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	e7bc      	b.n	8002b50 <ai_array_to_buffer_fmt+0x34>
 8002bd6:	bf00      	nop
 8002bd8:	00840040 	.word	0x00840040
 8002bdc:	00040840 	.word	0x00040840
 8002be0:	00041040 	.word	0x00041040
 8002be4:	0004084f 	.word	0x0004084f
 8002be8:	00040447 	.word	0x00040447
 8002bec:	00840840 	.word	0x00840840
 8002bf0:	00841040 	.word	0x00841040
 8002bf4:	0084084f 	.word	0x0084084f
 8002bf8:	00803fff 	.word	0x00803fff

08002bfc <ai_version_get>:
 8002bfc:	0212      	lsls	r2, r2, #8
 8002bfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c02:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8002c06:	4770      	bx	lr

08002c08 <malloc>:
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <malloc+0xc>)
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f000 b823 	b.w	8002c58 <_malloc_r>
 8002c12:	bf00      	nop
 8002c14:	24000af8 	.word	0x24000af8

08002c18 <sbrk_aligned>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	4e0e      	ldr	r6, [pc, #56]	; (8002c54 <sbrk_aligned+0x3c>)
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	6831      	ldr	r1, [r6, #0]
 8002c20:	4605      	mov	r5, r0
 8002c22:	b911      	cbnz	r1, 8002c2a <sbrk_aligned+0x12>
 8002c24:	f000 ff26 	bl	8003a74 <_sbrk_r>
 8002c28:	6030      	str	r0, [r6, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 ff21 	bl	8003a74 <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d00a      	beq.n	8002c4c <sbrk_aligned+0x34>
 8002c36:	1cc4      	adds	r4, r0, #3
 8002c38:	f024 0403 	bic.w	r4, r4, #3
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d007      	beq.n	8002c50 <sbrk_aligned+0x38>
 8002c40:	1a21      	subs	r1, r4, r0
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 ff16 	bl	8003a74 <_sbrk_r>
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d101      	bne.n	8002c50 <sbrk_aligned+0x38>
 8002c4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c50:	4620      	mov	r0, r4
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	24001224 	.word	0x24001224

08002c58 <_malloc_r>:
 8002c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c5c:	1ccd      	adds	r5, r1, #3
 8002c5e:	f025 0503 	bic.w	r5, r5, #3
 8002c62:	3508      	adds	r5, #8
 8002c64:	2d0c      	cmp	r5, #12
 8002c66:	bf38      	it	cc
 8002c68:	250c      	movcc	r5, #12
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	db01      	blt.n	8002c74 <_malloc_r+0x1c>
 8002c70:	42a9      	cmp	r1, r5
 8002c72:	d905      	bls.n	8002c80 <_malloc_r+0x28>
 8002c74:	230c      	movs	r3, #12
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	2600      	movs	r6, #0
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d54 <_malloc_r+0xfc>
 8002c84:	f000 f868 	bl	8002d58 <__malloc_lock>
 8002c88:	f8d8 3000 	ldr.w	r3, [r8]
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	bb5c      	cbnz	r4, 8002ce8 <_malloc_r+0x90>
 8002c90:	4629      	mov	r1, r5
 8002c92:	4638      	mov	r0, r7
 8002c94:	f7ff ffc0 	bl	8002c18 <sbrk_aligned>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	d155      	bne.n	8002d4a <_malloc_r+0xf2>
 8002c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8002ca2:	4626      	mov	r6, r4
 8002ca4:	2e00      	cmp	r6, #0
 8002ca6:	d145      	bne.n	8002d34 <_malloc_r+0xdc>
 8002ca8:	2c00      	cmp	r4, #0
 8002caa:	d048      	beq.n	8002d3e <_malloc_r+0xe6>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	4631      	mov	r1, r6
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	eb04 0903 	add.w	r9, r4, r3
 8002cb6:	f000 fedd 	bl	8003a74 <_sbrk_r>
 8002cba:	4581      	cmp	r9, r0
 8002cbc:	d13f      	bne.n	8002d3e <_malloc_r+0xe6>
 8002cbe:	6821      	ldr	r1, [r4, #0]
 8002cc0:	1a6d      	subs	r5, r5, r1
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	f7ff ffa7 	bl	8002c18 <sbrk_aligned>
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d037      	beq.n	8002d3e <_malloc_r+0xe6>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	442b      	add	r3, r5
 8002cd2:	6023      	str	r3, [r4, #0]
 8002cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d038      	beq.n	8002d4e <_malloc_r+0xf6>
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	42a2      	cmp	r2, r4
 8002ce0:	d12b      	bne.n	8002d3a <_malloc_r+0xe2>
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e00f      	b.n	8002d08 <_malloc_r+0xb0>
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	1b52      	subs	r2, r2, r5
 8002cec:	d41f      	bmi.n	8002d2e <_malloc_r+0xd6>
 8002cee:	2a0b      	cmp	r2, #11
 8002cf0:	d917      	bls.n	8002d22 <_malloc_r+0xca>
 8002cf2:	1961      	adds	r1, r4, r5
 8002cf4:	42a3      	cmp	r3, r4
 8002cf6:	6025      	str	r5, [r4, #0]
 8002cf8:	bf18      	it	ne
 8002cfa:	6059      	strne	r1, [r3, #4]
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	bf08      	it	eq
 8002d00:	f8c8 1000 	streq.w	r1, [r8]
 8002d04:	5162      	str	r2, [r4, r5]
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	4638      	mov	r0, r7
 8002d0a:	f104 060b 	add.w	r6, r4, #11
 8002d0e:	f000 f829 	bl	8002d64 <__malloc_unlock>
 8002d12:	f026 0607 	bic.w	r6, r6, #7
 8002d16:	1d23      	adds	r3, r4, #4
 8002d18:	1af2      	subs	r2, r6, r3
 8002d1a:	d0ae      	beq.n	8002c7a <_malloc_r+0x22>
 8002d1c:	1b9b      	subs	r3, r3, r6
 8002d1e:	50a3      	str	r3, [r4, r2]
 8002d20:	e7ab      	b.n	8002c7a <_malloc_r+0x22>
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	6862      	ldr	r2, [r4, #4]
 8002d26:	d1dd      	bne.n	8002ce4 <_malloc_r+0x8c>
 8002d28:	f8c8 2000 	str.w	r2, [r8]
 8002d2c:	e7ec      	b.n	8002d08 <_malloc_r+0xb0>
 8002d2e:	4623      	mov	r3, r4
 8002d30:	6864      	ldr	r4, [r4, #4]
 8002d32:	e7ac      	b.n	8002c8e <_malloc_r+0x36>
 8002d34:	4634      	mov	r4, r6
 8002d36:	6876      	ldr	r6, [r6, #4]
 8002d38:	e7b4      	b.n	8002ca4 <_malloc_r+0x4c>
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	e7cc      	b.n	8002cd8 <_malloc_r+0x80>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4638      	mov	r0, r7
 8002d44:	f000 f80e 	bl	8002d64 <__malloc_unlock>
 8002d48:	e797      	b.n	8002c7a <_malloc_r+0x22>
 8002d4a:	6025      	str	r5, [r4, #0]
 8002d4c:	e7dc      	b.n	8002d08 <_malloc_r+0xb0>
 8002d4e:	605b      	str	r3, [r3, #4]
 8002d50:	deff      	udf	#255	; 0xff
 8002d52:	bf00      	nop
 8002d54:	24001220 	.word	0x24001220

08002d58 <__malloc_lock>:
 8002d58:	4801      	ldr	r0, [pc, #4]	; (8002d60 <__malloc_lock+0x8>)
 8002d5a:	f000 bed8 	b.w	8003b0e <__retarget_lock_acquire_recursive>
 8002d5e:	bf00      	nop
 8002d60:	24001368 	.word	0x24001368

08002d64 <__malloc_unlock>:
 8002d64:	4801      	ldr	r0, [pc, #4]	; (8002d6c <__malloc_unlock+0x8>)
 8002d66:	f000 bed3 	b.w	8003b10 <__retarget_lock_release_recursive>
 8002d6a:	bf00      	nop
 8002d6c:	24001368 	.word	0x24001368

08002d70 <__cvt>:
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	ed2d 8b02 	vpush	{d8}
 8002d76:	eeb0 8b40 	vmov.f64	d8, d0
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	4617      	mov	r7, r2
 8002d7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002d80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002d82:	ee18 2a90 	vmov	r2, s17
 8002d86:	f025 0520 	bic.w	r5, r5, #32
 8002d8a:	2a00      	cmp	r2, #0
 8002d8c:	bfb6      	itet	lt
 8002d8e:	222d      	movlt	r2, #45	; 0x2d
 8002d90:	2200      	movge	r2, #0
 8002d92:	eeb1 8b40 	vneglt.f64	d8, d0
 8002d96:	2d46      	cmp	r5, #70	; 0x46
 8002d98:	460c      	mov	r4, r1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	d004      	beq.n	8002da8 <__cvt+0x38>
 8002d9e:	2d45      	cmp	r5, #69	; 0x45
 8002da0:	d100      	bne.n	8002da4 <__cvt+0x34>
 8002da2:	3401      	adds	r4, #1
 8002da4:	2102      	movs	r1, #2
 8002da6:	e000      	b.n	8002daa <__cvt+0x3a>
 8002da8:	2103      	movs	r1, #3
 8002daa:	ab03      	add	r3, sp, #12
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	ab02      	add	r3, sp, #8
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	4622      	mov	r2, r4
 8002db4:	4633      	mov	r3, r6
 8002db6:	eeb0 0b48 	vmov.f64	d0, d8
 8002dba:	f000 ff41 	bl	8003c40 <_dtoa_r>
 8002dbe:	2d47      	cmp	r5, #71	; 0x47
 8002dc0:	d101      	bne.n	8002dc6 <__cvt+0x56>
 8002dc2:	07fb      	lsls	r3, r7, #31
 8002dc4:	d51a      	bpl.n	8002dfc <__cvt+0x8c>
 8002dc6:	2d46      	cmp	r5, #70	; 0x46
 8002dc8:	eb00 0204 	add.w	r2, r0, r4
 8002dcc:	d10c      	bne.n	8002de8 <__cvt+0x78>
 8002dce:	7803      	ldrb	r3, [r0, #0]
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d107      	bne.n	8002de4 <__cvt+0x74>
 8002dd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	bf1c      	itt	ne
 8002dde:	f1c4 0401 	rsbne	r4, r4, #1
 8002de2:	6034      	strne	r4, [r6, #0]
 8002de4:	6833      	ldr	r3, [r6, #0]
 8002de6:	441a      	add	r2, r3
 8002de8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	bf08      	it	eq
 8002df2:	9203      	streq	r2, [sp, #12]
 8002df4:	2130      	movs	r1, #48	; 0x30
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d307      	bcc.n	8002e0c <__cvt+0x9c>
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e00:	1a1b      	subs	r3, r3, r0
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	b005      	add	sp, #20
 8002e06:	ecbd 8b02 	vpop	{d8}
 8002e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e0c:	1c5c      	adds	r4, r3, #1
 8002e0e:	9403      	str	r4, [sp, #12]
 8002e10:	7019      	strb	r1, [r3, #0]
 8002e12:	e7f0      	b.n	8002df6 <__cvt+0x86>

08002e14 <__exponent>:
 8002e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e16:	4603      	mov	r3, r0
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	bfb8      	it	lt
 8002e1c:	4249      	neglt	r1, r1
 8002e1e:	f803 2b02 	strb.w	r2, [r3], #2
 8002e22:	bfb4      	ite	lt
 8002e24:	222d      	movlt	r2, #45	; 0x2d
 8002e26:	222b      	movge	r2, #43	; 0x2b
 8002e28:	2909      	cmp	r1, #9
 8002e2a:	7042      	strb	r2, [r0, #1]
 8002e2c:	dd2a      	ble.n	8002e84 <__exponent+0x70>
 8002e2e:	f10d 0207 	add.w	r2, sp, #7
 8002e32:	4617      	mov	r7, r2
 8002e34:	260a      	movs	r6, #10
 8002e36:	4694      	mov	ip, r2
 8002e38:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e3c:	fb06 1415 	mls	r4, r6, r5, r1
 8002e40:	3430      	adds	r4, #48	; 0x30
 8002e42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002e46:	460c      	mov	r4, r1
 8002e48:	2c63      	cmp	r4, #99	; 0x63
 8002e4a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002e4e:	4629      	mov	r1, r5
 8002e50:	dcf1      	bgt.n	8002e36 <__exponent+0x22>
 8002e52:	3130      	adds	r1, #48	; 0x30
 8002e54:	f1ac 0402 	sub.w	r4, ip, #2
 8002e58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e5c:	1c41      	adds	r1, r0, #1
 8002e5e:	4622      	mov	r2, r4
 8002e60:	42ba      	cmp	r2, r7
 8002e62:	d30a      	bcc.n	8002e7a <__exponent+0x66>
 8002e64:	f10d 0209 	add.w	r2, sp, #9
 8002e68:	eba2 020c 	sub.w	r2, r2, ip
 8002e6c:	42bc      	cmp	r4, r7
 8002e6e:	bf88      	it	hi
 8002e70:	2200      	movhi	r2, #0
 8002e72:	4413      	add	r3, r2
 8002e74:	1a18      	subs	r0, r3, r0
 8002e76:	b003      	add	sp, #12
 8002e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002e7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002e82:	e7ed      	b.n	8002e60 <__exponent+0x4c>
 8002e84:	2330      	movs	r3, #48	; 0x30
 8002e86:	3130      	adds	r1, #48	; 0x30
 8002e88:	7083      	strb	r3, [r0, #2]
 8002e8a:	70c1      	strb	r1, [r0, #3]
 8002e8c:	1d03      	adds	r3, r0, #4
 8002e8e:	e7f1      	b.n	8002e74 <__exponent+0x60>

08002e90 <_printf_float>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	b08b      	sub	sp, #44	; 0x2c
 8002e96:	460c      	mov	r4, r1
 8002e98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	461f      	mov	r7, r3
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	f000 fdaf 	bl	8003a04 <_localeconv_r>
 8002ea6:	f8d0 b000 	ldr.w	fp, [r0]
 8002eaa:	4658      	mov	r0, fp
 8002eac:	f7fd fa80 	bl	80003b0 <strlen>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9308      	str	r3, [sp, #32]
 8002eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	3307      	adds	r3, #7
 8002ec0:	f023 0307 	bic.w	r3, r3, #7
 8002ec4:	f103 0108 	add.w	r1, r3, #8
 8002ec8:	f8c8 1000 	str.w	r1, [r8]
 8002ecc:	ed93 0b00 	vldr	d0, [r3]
 8002ed0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003130 <_printf_float+0x2a0>
 8002ed4:	eeb0 7bc0 	vabs.f64	d7, d0
 8002ed8:	eeb4 7b46 	vcmp.f64	d7, d6
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8002ee4:	4682      	mov	sl, r0
 8002ee6:	dd24      	ble.n	8002f32 <_printf_float+0xa2>
 8002ee8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d502      	bpl.n	8002ef8 <_printf_float+0x68>
 8002ef2:	232d      	movs	r3, #45	; 0x2d
 8002ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef8:	498f      	ldr	r1, [pc, #572]	; (8003138 <_printf_float+0x2a8>)
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <_printf_float+0x2ac>)
 8002efc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002f00:	bf94      	ite	ls
 8002f02:	4688      	movls	r8, r1
 8002f04:	4698      	movhi	r8, r3
 8002f06:	2303      	movs	r3, #3
 8002f08:	6123      	str	r3, [r4, #16]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6022      	str	r2, [r4, #0]
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	9700      	str	r7, [sp, #0]
 8002f16:	4633      	mov	r3, r6
 8002f18:	aa09      	add	r2, sp, #36	; 0x24
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 f9d1 	bl	80032c4 <_printf_common>
 8002f22:	3001      	adds	r0, #1
 8002f24:	f040 808a 	bne.w	800303c <_printf_float+0x1ac>
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2c:	b00b      	add	sp, #44	; 0x2c
 8002f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f32:	eeb4 0b40 	vcmp.f64	d0, d0
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d709      	bvc.n	8002f50 <_printf_float+0xc0>
 8002f3c:	ee10 3a90 	vmov	r3, s1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfbc      	itt	lt
 8002f44:	232d      	movlt	r3, #45	; 0x2d
 8002f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f4a:	497d      	ldr	r1, [pc, #500]	; (8003140 <_printf_float+0x2b0>)
 8002f4c:	4b7d      	ldr	r3, [pc, #500]	; (8003144 <_printf_float+0x2b4>)
 8002f4e:	e7d5      	b.n	8002efc <_printf_float+0x6c>
 8002f50:	6863      	ldr	r3, [r4, #4]
 8002f52:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002f56:	9104      	str	r1, [sp, #16]
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	d13c      	bne.n	8002fd6 <_printf_float+0x146>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	6063      	str	r3, [r4, #4]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9303      	str	r3, [sp, #12]
 8002f64:	ab08      	add	r3, sp, #32
 8002f66:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6e:	ab07      	add	r3, sp, #28
 8002f70:	6861      	ldr	r1, [r4, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	6022      	str	r2, [r4, #0]
 8002f76:	f10d 031b 	add.w	r3, sp, #27
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f7ff fef8 	bl	8002d70 <__cvt>
 8002f80:	9b04      	ldr	r3, [sp, #16]
 8002f82:	9907      	ldr	r1, [sp, #28]
 8002f84:	2b47      	cmp	r3, #71	; 0x47
 8002f86:	4680      	mov	r8, r0
 8002f88:	d108      	bne.n	8002f9c <_printf_float+0x10c>
 8002f8a:	1cc8      	adds	r0, r1, #3
 8002f8c:	db02      	blt.n	8002f94 <_printf_float+0x104>
 8002f8e:	6863      	ldr	r3, [r4, #4]
 8002f90:	4299      	cmp	r1, r3
 8002f92:	dd41      	ble.n	8003018 <_printf_float+0x188>
 8002f94:	f1a9 0902 	sub.w	r9, r9, #2
 8002f98:	fa5f f989 	uxtb.w	r9, r9
 8002f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002fa0:	d820      	bhi.n	8002fe4 <_printf_float+0x154>
 8002fa2:	3901      	subs	r1, #1
 8002fa4:	464a      	mov	r2, r9
 8002fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002faa:	9107      	str	r1, [sp, #28]
 8002fac:	f7ff ff32 	bl	8002e14 <__exponent>
 8002fb0:	9a08      	ldr	r2, [sp, #32]
 8002fb2:	9004      	str	r0, [sp, #16]
 8002fb4:	1813      	adds	r3, r2, r0
 8002fb6:	2a01      	cmp	r2, #1
 8002fb8:	6123      	str	r3, [r4, #16]
 8002fba:	dc02      	bgt.n	8002fc2 <_printf_float+0x132>
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	07d2      	lsls	r2, r2, #31
 8002fc0:	d501      	bpl.n	8002fc6 <_printf_float+0x136>
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	6123      	str	r3, [r4, #16]
 8002fc6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0a2      	beq.n	8002f14 <_printf_float+0x84>
 8002fce:	232d      	movs	r3, #45	; 0x2d
 8002fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd4:	e79e      	b.n	8002f14 <_printf_float+0x84>
 8002fd6:	9904      	ldr	r1, [sp, #16]
 8002fd8:	2947      	cmp	r1, #71	; 0x47
 8002fda:	d1c1      	bne.n	8002f60 <_printf_float+0xd0>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1bf      	bne.n	8002f60 <_printf_float+0xd0>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e7bc      	b.n	8002f5e <_printf_float+0xce>
 8002fe4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002fe8:	d118      	bne.n	800301c <_printf_float+0x18c>
 8002fea:	2900      	cmp	r1, #0
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	dd0b      	ble.n	8003008 <_printf_float+0x178>
 8002ff0:	6121      	str	r1, [r4, #16]
 8002ff2:	b913      	cbnz	r3, 8002ffa <_printf_float+0x16a>
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	07d0      	lsls	r0, r2, #31
 8002ff8:	d502      	bpl.n	8003000 <_printf_float+0x170>
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	6123      	str	r3, [r4, #16]
 8003000:	2300      	movs	r3, #0
 8003002:	65a1      	str	r1, [r4, #88]	; 0x58
 8003004:	9304      	str	r3, [sp, #16]
 8003006:	e7de      	b.n	8002fc6 <_printf_float+0x136>
 8003008:	b913      	cbnz	r3, 8003010 <_printf_float+0x180>
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	07d2      	lsls	r2, r2, #31
 800300e:	d501      	bpl.n	8003014 <_printf_float+0x184>
 8003010:	3302      	adds	r3, #2
 8003012:	e7f4      	b.n	8002ffe <_printf_float+0x16e>
 8003014:	2301      	movs	r3, #1
 8003016:	e7f2      	b.n	8002ffe <_printf_float+0x16e>
 8003018:	f04f 0967 	mov.w	r9, #103	; 0x67
 800301c:	9b08      	ldr	r3, [sp, #32]
 800301e:	4299      	cmp	r1, r3
 8003020:	db05      	blt.n	800302e <_printf_float+0x19e>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	6121      	str	r1, [r4, #16]
 8003026:	07d8      	lsls	r0, r3, #31
 8003028:	d5ea      	bpl.n	8003000 <_printf_float+0x170>
 800302a:	1c4b      	adds	r3, r1, #1
 800302c:	e7e7      	b.n	8002ffe <_printf_float+0x16e>
 800302e:	2900      	cmp	r1, #0
 8003030:	bfd4      	ite	le
 8003032:	f1c1 0202 	rsble	r2, r1, #2
 8003036:	2201      	movgt	r2, #1
 8003038:	4413      	add	r3, r2
 800303a:	e7e0      	b.n	8002ffe <_printf_float+0x16e>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	055a      	lsls	r2, r3, #21
 8003040:	d407      	bmi.n	8003052 <_printf_float+0x1c2>
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	4642      	mov	r2, r8
 8003046:	4631      	mov	r1, r6
 8003048:	4628      	mov	r0, r5
 800304a:	47b8      	blx	r7
 800304c:	3001      	adds	r0, #1
 800304e:	d12a      	bne.n	80030a6 <_printf_float+0x216>
 8003050:	e76a      	b.n	8002f28 <_printf_float+0x98>
 8003052:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003056:	f240 80e0 	bls.w	800321a <_printf_float+0x38a>
 800305a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800305e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d133      	bne.n	80030d0 <_printf_float+0x240>
 8003068:	4a37      	ldr	r2, [pc, #220]	; (8003148 <_printf_float+0x2b8>)
 800306a:	2301      	movs	r3, #1
 800306c:	4631      	mov	r1, r6
 800306e:	4628      	mov	r0, r5
 8003070:	47b8      	blx	r7
 8003072:	3001      	adds	r0, #1
 8003074:	f43f af58 	beq.w	8002f28 <_printf_float+0x98>
 8003078:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	db02      	blt.n	8003086 <_printf_float+0x1f6>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	07d8      	lsls	r0, r3, #31
 8003084:	d50f      	bpl.n	80030a6 <_printf_float+0x216>
 8003086:	4653      	mov	r3, sl
 8003088:	465a      	mov	r2, fp
 800308a:	4631      	mov	r1, r6
 800308c:	4628      	mov	r0, r5
 800308e:	47b8      	blx	r7
 8003090:	3001      	adds	r0, #1
 8003092:	f43f af49 	beq.w	8002f28 <_printf_float+0x98>
 8003096:	f04f 0800 	mov.w	r8, #0
 800309a:	f104 091a 	add.w	r9, r4, #26
 800309e:	9b08      	ldr	r3, [sp, #32]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4543      	cmp	r3, r8
 80030a4:	dc09      	bgt.n	80030ba <_printf_float+0x22a>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	079b      	lsls	r3, r3, #30
 80030aa:	f100 8106 	bmi.w	80032ba <_printf_float+0x42a>
 80030ae:	68e0      	ldr	r0, [r4, #12]
 80030b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b2:	4298      	cmp	r0, r3
 80030b4:	bfb8      	it	lt
 80030b6:	4618      	movlt	r0, r3
 80030b8:	e738      	b.n	8002f2c <_printf_float+0x9c>
 80030ba:	2301      	movs	r3, #1
 80030bc:	464a      	mov	r2, r9
 80030be:	4631      	mov	r1, r6
 80030c0:	4628      	mov	r0, r5
 80030c2:	47b8      	blx	r7
 80030c4:	3001      	adds	r0, #1
 80030c6:	f43f af2f 	beq.w	8002f28 <_printf_float+0x98>
 80030ca:	f108 0801 	add.w	r8, r8, #1
 80030ce:	e7e6      	b.n	800309e <_printf_float+0x20e>
 80030d0:	9b07      	ldr	r3, [sp, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dc3a      	bgt.n	800314c <_printf_float+0x2bc>
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <_printf_float+0x2b8>)
 80030d8:	2301      	movs	r3, #1
 80030da:	4631      	mov	r1, r6
 80030dc:	4628      	mov	r0, r5
 80030de:	47b8      	blx	r7
 80030e0:	3001      	adds	r0, #1
 80030e2:	f43f af21 	beq.w	8002f28 <_printf_float+0x98>
 80030e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	d102      	bne.n	80030f4 <_printf_float+0x264>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	07d9      	lsls	r1, r3, #31
 80030f2:	d5d8      	bpl.n	80030a6 <_printf_float+0x216>
 80030f4:	4653      	mov	r3, sl
 80030f6:	465a      	mov	r2, fp
 80030f8:	4631      	mov	r1, r6
 80030fa:	4628      	mov	r0, r5
 80030fc:	47b8      	blx	r7
 80030fe:	3001      	adds	r0, #1
 8003100:	f43f af12 	beq.w	8002f28 <_printf_float+0x98>
 8003104:	f04f 0900 	mov.w	r9, #0
 8003108:	f104 0a1a 	add.w	sl, r4, #26
 800310c:	9b07      	ldr	r3, [sp, #28]
 800310e:	425b      	negs	r3, r3
 8003110:	454b      	cmp	r3, r9
 8003112:	dc01      	bgt.n	8003118 <_printf_float+0x288>
 8003114:	9b08      	ldr	r3, [sp, #32]
 8003116:	e795      	b.n	8003044 <_printf_float+0x1b4>
 8003118:	2301      	movs	r3, #1
 800311a:	4652      	mov	r2, sl
 800311c:	4631      	mov	r1, r6
 800311e:	4628      	mov	r0, r5
 8003120:	47b8      	blx	r7
 8003122:	3001      	adds	r0, #1
 8003124:	f43f af00 	beq.w	8002f28 <_printf_float+0x98>
 8003128:	f109 0901 	add.w	r9, r9, #1
 800312c:	e7ee      	b.n	800310c <_printf_float+0x27c>
 800312e:	bf00      	nop
 8003130:	ffffffff 	.word	0xffffffff
 8003134:	7fefffff 	.word	0x7fefffff
 8003138:	08036888 	.word	0x08036888
 800313c:	0803688c 	.word	0x0803688c
 8003140:	08036890 	.word	0x08036890
 8003144:	08036894 	.word	0x08036894
 8003148:	08036898 	.word	0x08036898
 800314c:	9a08      	ldr	r2, [sp, #32]
 800314e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003150:	429a      	cmp	r2, r3
 8003152:	bfa8      	it	ge
 8003154:	461a      	movge	r2, r3
 8003156:	2a00      	cmp	r2, #0
 8003158:	4691      	mov	r9, r2
 800315a:	dc38      	bgt.n	80031ce <_printf_float+0x33e>
 800315c:	2300      	movs	r3, #0
 800315e:	9305      	str	r3, [sp, #20]
 8003160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003164:	f104 021a 	add.w	r2, r4, #26
 8003168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800316a:	9905      	ldr	r1, [sp, #20]
 800316c:	9304      	str	r3, [sp, #16]
 800316e:	eba3 0309 	sub.w	r3, r3, r9
 8003172:	428b      	cmp	r3, r1
 8003174:	dc33      	bgt.n	80031de <_printf_float+0x34e>
 8003176:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800317a:	429a      	cmp	r2, r3
 800317c:	db3c      	blt.n	80031f8 <_printf_float+0x368>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07da      	lsls	r2, r3, #31
 8003182:	d439      	bmi.n	80031f8 <_printf_float+0x368>
 8003184:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8003188:	eba2 0903 	sub.w	r9, r2, r3
 800318c:	9b04      	ldr	r3, [sp, #16]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	4591      	cmp	r9, r2
 8003192:	bfa8      	it	ge
 8003194:	4691      	movge	r9, r2
 8003196:	f1b9 0f00 	cmp.w	r9, #0
 800319a:	dc35      	bgt.n	8003208 <_printf_float+0x378>
 800319c:	f04f 0800 	mov.w	r8, #0
 80031a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031a4:	f104 0a1a 	add.w	sl, r4, #26
 80031a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	eba3 0309 	sub.w	r3, r3, r9
 80031b2:	4543      	cmp	r3, r8
 80031b4:	f77f af77 	ble.w	80030a6 <_printf_float+0x216>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4652      	mov	r2, sl
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f aeb0 	beq.w	8002f28 <_printf_float+0x98>
 80031c8:	f108 0801 	add.w	r8, r8, #1
 80031cc:	e7ec      	b.n	80031a8 <_printf_float+0x318>
 80031ce:	4613      	mov	r3, r2
 80031d0:	4631      	mov	r1, r6
 80031d2:	4642      	mov	r2, r8
 80031d4:	4628      	mov	r0, r5
 80031d6:	47b8      	blx	r7
 80031d8:	3001      	adds	r0, #1
 80031da:	d1bf      	bne.n	800315c <_printf_float+0x2cc>
 80031dc:	e6a4      	b.n	8002f28 <_printf_float+0x98>
 80031de:	2301      	movs	r3, #1
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	9204      	str	r2, [sp, #16]
 80031e6:	47b8      	blx	r7
 80031e8:	3001      	adds	r0, #1
 80031ea:	f43f ae9d 	beq.w	8002f28 <_printf_float+0x98>
 80031ee:	9b05      	ldr	r3, [sp, #20]
 80031f0:	9a04      	ldr	r2, [sp, #16]
 80031f2:	3301      	adds	r3, #1
 80031f4:	9305      	str	r3, [sp, #20]
 80031f6:	e7b7      	b.n	8003168 <_printf_float+0x2d8>
 80031f8:	4653      	mov	r3, sl
 80031fa:	465a      	mov	r2, fp
 80031fc:	4631      	mov	r1, r6
 80031fe:	4628      	mov	r0, r5
 8003200:	47b8      	blx	r7
 8003202:	3001      	adds	r0, #1
 8003204:	d1be      	bne.n	8003184 <_printf_float+0x2f4>
 8003206:	e68f      	b.n	8002f28 <_printf_float+0x98>
 8003208:	9a04      	ldr	r2, [sp, #16]
 800320a:	464b      	mov	r3, r9
 800320c:	4442      	add	r2, r8
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	47b8      	blx	r7
 8003214:	3001      	adds	r0, #1
 8003216:	d1c1      	bne.n	800319c <_printf_float+0x30c>
 8003218:	e686      	b.n	8002f28 <_printf_float+0x98>
 800321a:	9a08      	ldr	r2, [sp, #32]
 800321c:	2a01      	cmp	r2, #1
 800321e:	dc01      	bgt.n	8003224 <_printf_float+0x394>
 8003220:	07db      	lsls	r3, r3, #31
 8003222:	d537      	bpl.n	8003294 <_printf_float+0x404>
 8003224:	2301      	movs	r3, #1
 8003226:	4642      	mov	r2, r8
 8003228:	4631      	mov	r1, r6
 800322a:	4628      	mov	r0, r5
 800322c:	47b8      	blx	r7
 800322e:	3001      	adds	r0, #1
 8003230:	f43f ae7a 	beq.w	8002f28 <_printf_float+0x98>
 8003234:	4653      	mov	r3, sl
 8003236:	465a      	mov	r2, fp
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	f43f ae72 	beq.w	8002f28 <_printf_float+0x98>
 8003244:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003248:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	9b08      	ldr	r3, [sp, #32]
 8003252:	d01a      	beq.n	800328a <_printf_float+0x3fa>
 8003254:	3b01      	subs	r3, #1
 8003256:	f108 0201 	add.w	r2, r8, #1
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	d10e      	bne.n	8003282 <_printf_float+0x3f2>
 8003264:	e660      	b.n	8002f28 <_printf_float+0x98>
 8003266:	2301      	movs	r3, #1
 8003268:	464a      	mov	r2, r9
 800326a:	4631      	mov	r1, r6
 800326c:	4628      	mov	r0, r5
 800326e:	47b8      	blx	r7
 8003270:	3001      	adds	r0, #1
 8003272:	f43f ae59 	beq.w	8002f28 <_printf_float+0x98>
 8003276:	f108 0801 	add.w	r8, r8, #1
 800327a:	9b08      	ldr	r3, [sp, #32]
 800327c:	3b01      	subs	r3, #1
 800327e:	4543      	cmp	r3, r8
 8003280:	dcf1      	bgt.n	8003266 <_printf_float+0x3d6>
 8003282:	9b04      	ldr	r3, [sp, #16]
 8003284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003288:	e6dd      	b.n	8003046 <_printf_float+0x1b6>
 800328a:	f04f 0800 	mov.w	r8, #0
 800328e:	f104 091a 	add.w	r9, r4, #26
 8003292:	e7f2      	b.n	800327a <_printf_float+0x3ea>
 8003294:	2301      	movs	r3, #1
 8003296:	4642      	mov	r2, r8
 8003298:	e7df      	b.n	800325a <_printf_float+0x3ca>
 800329a:	2301      	movs	r3, #1
 800329c:	464a      	mov	r2, r9
 800329e:	4631      	mov	r1, r6
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b8      	blx	r7
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae3f 	beq.w	8002f28 <_printf_float+0x98>
 80032aa:	f108 0801 	add.w	r8, r8, #1
 80032ae:	68e3      	ldr	r3, [r4, #12]
 80032b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	4543      	cmp	r3, r8
 80032b6:	dcf0      	bgt.n	800329a <_printf_float+0x40a>
 80032b8:	e6f9      	b.n	80030ae <_printf_float+0x21e>
 80032ba:	f04f 0800 	mov.w	r8, #0
 80032be:	f104 0919 	add.w	r9, r4, #25
 80032c2:	e7f4      	b.n	80032ae <_printf_float+0x41e>

080032c4 <_printf_common>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	4616      	mov	r6, r2
 80032ca:	4699      	mov	r9, r3
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bfb8      	it	lt
 80032d8:	4613      	movlt	r3, r2
 80032da:	6033      	str	r3, [r6, #0]
 80032dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e0:	4607      	mov	r7, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	b10a      	cbz	r2, 80032ea <_printf_common+0x26>
 80032e6:	3301      	adds	r3, #1
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0699      	lsls	r1, r3, #26
 80032ee:	bf42      	ittt	mi
 80032f0:	6833      	ldrmi	r3, [r6, #0]
 80032f2:	3302      	addmi	r3, #2
 80032f4:	6033      	strmi	r3, [r6, #0]
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	f015 0506 	ands.w	r5, r5, #6
 80032fc:	d106      	bne.n	800330c <_printf_common+0x48>
 80032fe:	f104 0a19 	add.w	sl, r4, #25
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	6832      	ldr	r2, [r6, #0]
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	42ab      	cmp	r3, r5
 800330a:	dc26      	bgt.n	800335a <_printf_common+0x96>
 800330c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003310:	1e13      	subs	r3, r2, #0
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	bf18      	it	ne
 8003316:	2301      	movne	r3, #1
 8003318:	0692      	lsls	r2, r2, #26
 800331a:	d42b      	bmi.n	8003374 <_printf_common+0xb0>
 800331c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003320:	4649      	mov	r1, r9
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d01e      	beq.n	8003368 <_printf_common+0xa4>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	6922      	ldr	r2, [r4, #16]
 800332e:	f003 0306 	and.w	r3, r3, #6
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf02      	ittt	eq
 8003336:	68e5      	ldreq	r5, [r4, #12]
 8003338:	6833      	ldreq	r3, [r6, #0]
 800333a:	1aed      	subeq	r5, r5, r3
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	bf0c      	ite	eq
 8003340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003344:	2500      	movne	r5, #0
 8003346:	4293      	cmp	r3, r2
 8003348:	bfc4      	itt	gt
 800334a:	1a9b      	subgt	r3, r3, r2
 800334c:	18ed      	addgt	r5, r5, r3
 800334e:	2600      	movs	r6, #0
 8003350:	341a      	adds	r4, #26
 8003352:	42b5      	cmp	r5, r6
 8003354:	d11a      	bne.n	800338c <_printf_common+0xc8>
 8003356:	2000      	movs	r0, #0
 8003358:	e008      	b.n	800336c <_printf_common+0xa8>
 800335a:	2301      	movs	r3, #1
 800335c:	4652      	mov	r2, sl
 800335e:	4649      	mov	r1, r9
 8003360:	4638      	mov	r0, r7
 8003362:	47c0      	blx	r8
 8003364:	3001      	adds	r0, #1
 8003366:	d103      	bne.n	8003370 <_printf_common+0xac>
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003370:	3501      	adds	r5, #1
 8003372:	e7c6      	b.n	8003302 <_printf_common+0x3e>
 8003374:	18e1      	adds	r1, r4, r3
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	2030      	movs	r0, #48	; 0x30
 800337a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337e:	4422      	add	r2, r4
 8003380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003388:	3302      	adds	r3, #2
 800338a:	e7c7      	b.n	800331c <_printf_common+0x58>
 800338c:	2301      	movs	r3, #1
 800338e:	4622      	mov	r2, r4
 8003390:	4649      	mov	r1, r9
 8003392:	4638      	mov	r0, r7
 8003394:	47c0      	blx	r8
 8003396:	3001      	adds	r0, #1
 8003398:	d0e6      	beq.n	8003368 <_printf_common+0xa4>
 800339a:	3601      	adds	r6, #1
 800339c:	e7d9      	b.n	8003352 <_printf_common+0x8e>
	...

080033a0 <_printf_i>:
 80033a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	7e0f      	ldrb	r7, [r1, #24]
 80033a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033a8:	2f78      	cmp	r7, #120	; 0x78
 80033aa:	4691      	mov	r9, r2
 80033ac:	4680      	mov	r8, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	469a      	mov	sl, r3
 80033b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033b6:	d807      	bhi.n	80033c8 <_printf_i+0x28>
 80033b8:	2f62      	cmp	r7, #98	; 0x62
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x32>
 80033bc:	2f00      	cmp	r7, #0
 80033be:	f000 80d4 	beq.w	800356a <_printf_i+0x1ca>
 80033c2:	2f58      	cmp	r7, #88	; 0x58
 80033c4:	f000 80c0 	beq.w	8003548 <_printf_i+0x1a8>
 80033c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d0:	e03a      	b.n	8003448 <_printf_i+0xa8>
 80033d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d6:	2b15      	cmp	r3, #21
 80033d8:	d8f6      	bhi.n	80033c8 <_printf_i+0x28>
 80033da:	a101      	add	r1, pc, #4	; (adr r1, 80033e0 <_printf_i+0x40>)
 80033dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033e0:	08003439 	.word	0x08003439
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	080033c9 	.word	0x080033c9
 80033ec:	080033c9 	.word	0x080033c9
 80033f0:	080033c9 	.word	0x080033c9
 80033f4:	080033c9 	.word	0x080033c9
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	080033c9 	.word	0x080033c9
 8003400:	080033c9 	.word	0x080033c9
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	08003551 	.word	0x08003551
 8003410:	08003479 	.word	0x08003479
 8003414:	0800350b 	.word	0x0800350b
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	08003573 	.word	0x08003573
 8003424:	080033c9 	.word	0x080033c9
 8003428:	08003479 	.word	0x08003479
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003513 	.word	0x08003513
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003448:	2301      	movs	r3, #1
 800344a:	e09f      	b.n	800358c <_printf_i+0x1ec>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	0607      	lsls	r7, r0, #24
 8003452:	f103 0104 	add.w	r1, r3, #4
 8003456:	6029      	str	r1, [r5, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0xbe>
 800345a:	681e      	ldr	r6, [r3, #0]
 800345c:	e003      	b.n	8003466 <_printf_i+0xc6>
 800345e:	0646      	lsls	r6, r0, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0xba>
 8003462:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003466:	2e00      	cmp	r6, #0
 8003468:	da03      	bge.n	8003472 <_printf_i+0xd2>
 800346a:	232d      	movs	r3, #45	; 0x2d
 800346c:	4276      	negs	r6, r6
 800346e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003472:	485a      	ldr	r0, [pc, #360]	; (80035dc <_printf_i+0x23c>)
 8003474:	230a      	movs	r3, #10
 8003476:	e012      	b.n	800349e <_printf_i+0xfe>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	1d19      	adds	r1, r3, #4
 800347e:	6029      	str	r1, [r5, #0]
 8003480:	0605      	lsls	r5, r0, #24
 8003482:	d501      	bpl.n	8003488 <_printf_i+0xe8>
 8003484:	681e      	ldr	r6, [r3, #0]
 8003486:	e002      	b.n	800348e <_printf_i+0xee>
 8003488:	0641      	lsls	r1, r0, #25
 800348a:	d5fb      	bpl.n	8003484 <_printf_i+0xe4>
 800348c:	881e      	ldrh	r6, [r3, #0]
 800348e:	4853      	ldr	r0, [pc, #332]	; (80035dc <_printf_i+0x23c>)
 8003490:	2f6f      	cmp	r7, #111	; 0x6f
 8003492:	bf0c      	ite	eq
 8003494:	2308      	moveq	r3, #8
 8003496:	230a      	movne	r3, #10
 8003498:	2100      	movs	r1, #0
 800349a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349e:	6865      	ldr	r5, [r4, #4]
 80034a0:	60a5      	str	r5, [r4, #8]
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	bfa2      	ittt	ge
 80034a6:	6821      	ldrge	r1, [r4, #0]
 80034a8:	f021 0104 	bicge.w	r1, r1, #4
 80034ac:	6021      	strge	r1, [r4, #0]
 80034ae:	b90e      	cbnz	r6, 80034b4 <_printf_i+0x114>
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	d04b      	beq.n	800354c <_printf_i+0x1ac>
 80034b4:	4615      	mov	r5, r2
 80034b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80034ba:	fb03 6711 	mls	r7, r3, r1, r6
 80034be:	5dc7      	ldrb	r7, [r0, r7]
 80034c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034c4:	4637      	mov	r7, r6
 80034c6:	42bb      	cmp	r3, r7
 80034c8:	460e      	mov	r6, r1
 80034ca:	d9f4      	bls.n	80034b6 <_printf_i+0x116>
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d10b      	bne.n	80034e8 <_printf_i+0x148>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	07de      	lsls	r6, r3, #31
 80034d4:	d508      	bpl.n	80034e8 <_printf_i+0x148>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	6861      	ldr	r1, [r4, #4]
 80034da:	4299      	cmp	r1, r3
 80034dc:	bfde      	ittt	le
 80034de:	2330      	movle	r3, #48	; 0x30
 80034e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034e8:	1b52      	subs	r2, r2, r5
 80034ea:	6122      	str	r2, [r4, #16]
 80034ec:	f8cd a000 	str.w	sl, [sp]
 80034f0:	464b      	mov	r3, r9
 80034f2:	aa03      	add	r2, sp, #12
 80034f4:	4621      	mov	r1, r4
 80034f6:	4640      	mov	r0, r8
 80034f8:	f7ff fee4 	bl	80032c4 <_printf_common>
 80034fc:	3001      	adds	r0, #1
 80034fe:	d14a      	bne.n	8003596 <_printf_i+0x1f6>
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003504:	b004      	add	sp, #16
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f043 0320 	orr.w	r3, r3, #32
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	4833      	ldr	r0, [pc, #204]	; (80035e0 <_printf_i+0x240>)
 8003514:	2778      	movs	r7, #120	; 0x78
 8003516:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	6829      	ldr	r1, [r5, #0]
 800351e:	061f      	lsls	r7, r3, #24
 8003520:	f851 6b04 	ldr.w	r6, [r1], #4
 8003524:	d402      	bmi.n	800352c <_printf_i+0x18c>
 8003526:	065f      	lsls	r7, r3, #25
 8003528:	bf48      	it	mi
 800352a:	b2b6      	uxthmi	r6, r6
 800352c:	07df      	lsls	r7, r3, #31
 800352e:	bf48      	it	mi
 8003530:	f043 0320 	orrmi.w	r3, r3, #32
 8003534:	6029      	str	r1, [r5, #0]
 8003536:	bf48      	it	mi
 8003538:	6023      	strmi	r3, [r4, #0]
 800353a:	b91e      	cbnz	r6, 8003544 <_printf_i+0x1a4>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	2310      	movs	r3, #16
 8003546:	e7a7      	b.n	8003498 <_printf_i+0xf8>
 8003548:	4824      	ldr	r0, [pc, #144]	; (80035dc <_printf_i+0x23c>)
 800354a:	e7e4      	b.n	8003516 <_printf_i+0x176>
 800354c:	4615      	mov	r5, r2
 800354e:	e7bd      	b.n	80034cc <_printf_i+0x12c>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	6826      	ldr	r6, [r4, #0]
 8003554:	6961      	ldr	r1, [r4, #20]
 8003556:	1d18      	adds	r0, r3, #4
 8003558:	6028      	str	r0, [r5, #0]
 800355a:	0635      	lsls	r5, r6, #24
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	d501      	bpl.n	8003564 <_printf_i+0x1c4>
 8003560:	6019      	str	r1, [r3, #0]
 8003562:	e002      	b.n	800356a <_printf_i+0x1ca>
 8003564:	0670      	lsls	r0, r6, #25
 8003566:	d5fb      	bpl.n	8003560 <_printf_i+0x1c0>
 8003568:	8019      	strh	r1, [r3, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	6123      	str	r3, [r4, #16]
 800356e:	4615      	mov	r5, r2
 8003570:	e7bc      	b.n	80034ec <_printf_i+0x14c>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	602a      	str	r2, [r5, #0]
 8003578:	681d      	ldr	r5, [r3, #0]
 800357a:	6862      	ldr	r2, [r4, #4]
 800357c:	2100      	movs	r1, #0
 800357e:	4628      	mov	r0, r5
 8003580:	f7fc fec6 	bl	8000310 <memchr>
 8003584:	b108      	cbz	r0, 800358a <_printf_i+0x1ea>
 8003586:	1b40      	subs	r0, r0, r5
 8003588:	6060      	str	r0, [r4, #4]
 800358a:	6863      	ldr	r3, [r4, #4]
 800358c:	6123      	str	r3, [r4, #16]
 800358e:	2300      	movs	r3, #0
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	e7aa      	b.n	80034ec <_printf_i+0x14c>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	462a      	mov	r2, r5
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	47d0      	blx	sl
 80035a0:	3001      	adds	r0, #1
 80035a2:	d0ad      	beq.n	8003500 <_printf_i+0x160>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	079b      	lsls	r3, r3, #30
 80035a8:	d413      	bmi.n	80035d2 <_printf_i+0x232>
 80035aa:	68e0      	ldr	r0, [r4, #12]
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	4298      	cmp	r0, r3
 80035b0:	bfb8      	it	lt
 80035b2:	4618      	movlt	r0, r3
 80035b4:	e7a6      	b.n	8003504 <_printf_i+0x164>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4632      	mov	r2, r6
 80035ba:	4649      	mov	r1, r9
 80035bc:	4640      	mov	r0, r8
 80035be:	47d0      	blx	sl
 80035c0:	3001      	adds	r0, #1
 80035c2:	d09d      	beq.n	8003500 <_printf_i+0x160>
 80035c4:	3501      	adds	r5, #1
 80035c6:	68e3      	ldr	r3, [r4, #12]
 80035c8:	9903      	ldr	r1, [sp, #12]
 80035ca:	1a5b      	subs	r3, r3, r1
 80035cc:	42ab      	cmp	r3, r5
 80035ce:	dcf2      	bgt.n	80035b6 <_printf_i+0x216>
 80035d0:	e7eb      	b.n	80035aa <_printf_i+0x20a>
 80035d2:	2500      	movs	r5, #0
 80035d4:	f104 0619 	add.w	r6, r4, #25
 80035d8:	e7f5      	b.n	80035c6 <_printf_i+0x226>
 80035da:	bf00      	nop
 80035dc:	0803689a 	.word	0x0803689a
 80035e0:	080368ab 	.word	0x080368ab

080035e4 <std>:
 80035e4:	2300      	movs	r3, #0
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	e9c0 3300 	strd	r3, r3, [r0]
 80035ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035f2:	6083      	str	r3, [r0, #8]
 80035f4:	8181      	strh	r1, [r0, #12]
 80035f6:	6643      	str	r3, [r0, #100]	; 0x64
 80035f8:	81c2      	strh	r2, [r0, #14]
 80035fa:	6183      	str	r3, [r0, #24]
 80035fc:	4619      	mov	r1, r3
 80035fe:	2208      	movs	r2, #8
 8003600:	305c      	adds	r0, #92	; 0x5c
 8003602:	f000 f9f7 	bl	80039f4 <memset>
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <std+0x58>)
 8003608:	6263      	str	r3, [r4, #36]	; 0x24
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <std+0x5c>)
 800360c:	62a3      	str	r3, [r4, #40]	; 0x28
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <std+0x60>)
 8003610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <std+0x64>)
 8003614:	6323      	str	r3, [r4, #48]	; 0x30
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <std+0x68>)
 8003618:	6224      	str	r4, [r4, #32]
 800361a:	429c      	cmp	r4, r3
 800361c:	d006      	beq.n	800362c <std+0x48>
 800361e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003622:	4294      	cmp	r4, r2
 8003624:	d002      	beq.n	800362c <std+0x48>
 8003626:	33d0      	adds	r3, #208	; 0xd0
 8003628:	429c      	cmp	r4, r3
 800362a:	d105      	bne.n	8003638 <std+0x54>
 800362c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003634:	f000 ba6a 	b.w	8003b0c <__retarget_lock_init_recursive>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	bf00      	nop
 800363c:	08003845 	.word	0x08003845
 8003640:	08003867 	.word	0x08003867
 8003644:	0800389f 	.word	0x0800389f
 8003648:	080038c3 	.word	0x080038c3
 800364c:	24001228 	.word	0x24001228

08003650 <stdio_exit_handler>:
 8003650:	4a02      	ldr	r2, [pc, #8]	; (800365c <stdio_exit_handler+0xc>)
 8003652:	4903      	ldr	r1, [pc, #12]	; (8003660 <stdio_exit_handler+0x10>)
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <stdio_exit_handler+0x14>)
 8003656:	f000 b869 	b.w	800372c <_fwalk_sglue>
 800365a:	bf00      	nop
 800365c:	24000aa0 	.word	0x24000aa0
 8003660:	0800523d 	.word	0x0800523d
 8003664:	24000aac 	.word	0x24000aac

08003668 <cleanup_stdio>:
 8003668:	6841      	ldr	r1, [r0, #4]
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <cleanup_stdio+0x34>)
 800366c:	4299      	cmp	r1, r3
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	d001      	beq.n	8003678 <cleanup_stdio+0x10>
 8003674:	f001 fde2 	bl	800523c <_fflush_r>
 8003678:	68a1      	ldr	r1, [r4, #8]
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <cleanup_stdio+0x38>)
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <cleanup_stdio+0x1e>
 8003680:	4620      	mov	r0, r4
 8003682:	f001 fddb 	bl	800523c <_fflush_r>
 8003686:	68e1      	ldr	r1, [r4, #12]
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <cleanup_stdio+0x3c>)
 800368a:	4299      	cmp	r1, r3
 800368c:	d004      	beq.n	8003698 <cleanup_stdio+0x30>
 800368e:	4620      	mov	r0, r4
 8003690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003694:	f001 bdd2 	b.w	800523c <_fflush_r>
 8003698:	bd10      	pop	{r4, pc}
 800369a:	bf00      	nop
 800369c:	24001228 	.word	0x24001228
 80036a0:	24001290 	.word	0x24001290
 80036a4:	240012f8 	.word	0x240012f8

080036a8 <global_stdio_init.part.0>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <global_stdio_init.part.0+0x30>)
 80036ac:	4c0b      	ldr	r4, [pc, #44]	; (80036dc <global_stdio_init.part.0+0x34>)
 80036ae:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <global_stdio_init.part.0+0x38>)
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	4620      	mov	r0, r4
 80036b4:	2200      	movs	r2, #0
 80036b6:	2104      	movs	r1, #4
 80036b8:	f7ff ff94 	bl	80035e4 <std>
 80036bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036c0:	2201      	movs	r2, #1
 80036c2:	2109      	movs	r1, #9
 80036c4:	f7ff ff8e 	bl	80035e4 <std>
 80036c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036cc:	2202      	movs	r2, #2
 80036ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d2:	2112      	movs	r1, #18
 80036d4:	f7ff bf86 	b.w	80035e4 <std>
 80036d8:	24001360 	.word	0x24001360
 80036dc:	24001228 	.word	0x24001228
 80036e0:	08003651 	.word	0x08003651

080036e4 <__sfp_lock_acquire>:
 80036e4:	4801      	ldr	r0, [pc, #4]	; (80036ec <__sfp_lock_acquire+0x8>)
 80036e6:	f000 ba12 	b.w	8003b0e <__retarget_lock_acquire_recursive>
 80036ea:	bf00      	nop
 80036ec:	24001369 	.word	0x24001369

080036f0 <__sfp_lock_release>:
 80036f0:	4801      	ldr	r0, [pc, #4]	; (80036f8 <__sfp_lock_release+0x8>)
 80036f2:	f000 ba0d 	b.w	8003b10 <__retarget_lock_release_recursive>
 80036f6:	bf00      	nop
 80036f8:	24001369 	.word	0x24001369

080036fc <__sinit>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	f7ff fff0 	bl	80036e4 <__sfp_lock_acquire>
 8003704:	6a23      	ldr	r3, [r4, #32]
 8003706:	b11b      	cbz	r3, 8003710 <__sinit+0x14>
 8003708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370c:	f7ff bff0 	b.w	80036f0 <__sfp_lock_release>
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <__sinit+0x28>)
 8003712:	6223      	str	r3, [r4, #32]
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__sinit+0x2c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f5      	bne.n	8003708 <__sinit+0xc>
 800371c:	f7ff ffc4 	bl	80036a8 <global_stdio_init.part.0>
 8003720:	e7f2      	b.n	8003708 <__sinit+0xc>
 8003722:	bf00      	nop
 8003724:	08003669 	.word	0x08003669
 8003728:	24001360 	.word	0x24001360

0800372c <_fwalk_sglue>:
 800372c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003730:	4607      	mov	r7, r0
 8003732:	4688      	mov	r8, r1
 8003734:	4614      	mov	r4, r2
 8003736:	2600      	movs	r6, #0
 8003738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800373c:	f1b9 0901 	subs.w	r9, r9, #1
 8003740:	d505      	bpl.n	800374e <_fwalk_sglue+0x22>
 8003742:	6824      	ldr	r4, [r4, #0]
 8003744:	2c00      	cmp	r4, #0
 8003746:	d1f7      	bne.n	8003738 <_fwalk_sglue+0xc>
 8003748:	4630      	mov	r0, r6
 800374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d907      	bls.n	8003764 <_fwalk_sglue+0x38>
 8003754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003758:	3301      	adds	r3, #1
 800375a:	d003      	beq.n	8003764 <_fwalk_sglue+0x38>
 800375c:	4629      	mov	r1, r5
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	4306      	orrs	r6, r0
 8003764:	3568      	adds	r5, #104	; 0x68
 8003766:	e7e9      	b.n	800373c <_fwalk_sglue+0x10>

08003768 <iprintf>:
 8003768:	b40f      	push	{r0, r1, r2, r3}
 800376a:	b507      	push	{r0, r1, r2, lr}
 800376c:	4906      	ldr	r1, [pc, #24]	; (8003788 <iprintf+0x20>)
 800376e:	ab04      	add	r3, sp, #16
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	f853 2b04 	ldr.w	r2, [r3], #4
 8003776:	6881      	ldr	r1, [r0, #8]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f001 fbbf 	bl	8004efc <_vfiprintf_r>
 800377e:	b003      	add	sp, #12
 8003780:	f85d eb04 	ldr.w	lr, [sp], #4
 8003784:	b004      	add	sp, #16
 8003786:	4770      	bx	lr
 8003788:	24000af8 	.word	0x24000af8

0800378c <_puts_r>:
 800378c:	6a03      	ldr	r3, [r0, #32]
 800378e:	b570      	push	{r4, r5, r6, lr}
 8003790:	6884      	ldr	r4, [r0, #8]
 8003792:	4605      	mov	r5, r0
 8003794:	460e      	mov	r6, r1
 8003796:	b90b      	cbnz	r3, 800379c <_puts_r+0x10>
 8003798:	f7ff ffb0 	bl	80036fc <__sinit>
 800379c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800379e:	07db      	lsls	r3, r3, #31
 80037a0:	d405      	bmi.n	80037ae <_puts_r+0x22>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	0598      	lsls	r0, r3, #22
 80037a6:	d402      	bmi.n	80037ae <_puts_r+0x22>
 80037a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037aa:	f000 f9b0 	bl	8003b0e <__retarget_lock_acquire_recursive>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	0719      	lsls	r1, r3, #28
 80037b2:	d513      	bpl.n	80037dc <_puts_r+0x50>
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	b18b      	cbz	r3, 80037dc <_puts_r+0x50>
 80037b8:	3e01      	subs	r6, #1
 80037ba:	68a3      	ldr	r3, [r4, #8]
 80037bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60a3      	str	r3, [r4, #8]
 80037c4:	b9e9      	cbnz	r1, 8003802 <_puts_r+0x76>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	da2e      	bge.n	8003828 <_puts_r+0x9c>
 80037ca:	4622      	mov	r2, r4
 80037cc:	210a      	movs	r1, #10
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f87b 	bl	80038ca <__swbuf_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d007      	beq.n	80037e8 <_puts_r+0x5c>
 80037d8:	250a      	movs	r5, #10
 80037da:	e007      	b.n	80037ec <_puts_r+0x60>
 80037dc:	4621      	mov	r1, r4
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f8b0 	bl	8003944 <__swsetup_r>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d0e7      	beq.n	80037b8 <_puts_r+0x2c>
 80037e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80037ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ee:	07da      	lsls	r2, r3, #31
 80037f0:	d405      	bmi.n	80037fe <_puts_r+0x72>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	d402      	bmi.n	80037fe <_puts_r+0x72>
 80037f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fa:	f000 f989 	bl	8003b10 <__retarget_lock_release_recursive>
 80037fe:	4628      	mov	r0, r5
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	2b00      	cmp	r3, #0
 8003804:	da04      	bge.n	8003810 <_puts_r+0x84>
 8003806:	69a2      	ldr	r2, [r4, #24]
 8003808:	429a      	cmp	r2, r3
 800380a:	dc06      	bgt.n	800381a <_puts_r+0x8e>
 800380c:	290a      	cmp	r1, #10
 800380e:	d004      	beq.n	800381a <_puts_r+0x8e>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	7019      	strb	r1, [r3, #0]
 8003818:	e7cf      	b.n	80037ba <_puts_r+0x2e>
 800381a:	4622      	mov	r2, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f854 	bl	80038ca <__swbuf_r>
 8003822:	3001      	adds	r0, #1
 8003824:	d1c9      	bne.n	80037ba <_puts_r+0x2e>
 8003826:	e7df      	b.n	80037e8 <_puts_r+0x5c>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	250a      	movs	r5, #10
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	6022      	str	r2, [r4, #0]
 8003830:	701d      	strb	r5, [r3, #0]
 8003832:	e7db      	b.n	80037ec <_puts_r+0x60>

08003834 <puts>:
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <puts+0xc>)
 8003836:	4601      	mov	r1, r0
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f7ff bfa7 	b.w	800378c <_puts_r>
 800383e:	bf00      	nop
 8003840:	24000af8 	.word	0x24000af8

08003844 <__sread>:
 8003844:	b510      	push	{r4, lr}
 8003846:	460c      	mov	r4, r1
 8003848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384c:	f000 f900 	bl	8003a50 <_read_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	bfab      	itete	ge
 8003854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003856:	89a3      	ldrhlt	r3, [r4, #12]
 8003858:	181b      	addge	r3, r3, r0
 800385a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800385e:	bfac      	ite	ge
 8003860:	6563      	strge	r3, [r4, #84]	; 0x54
 8003862:	81a3      	strhlt	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__swrite>:
 8003866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386a:	461f      	mov	r7, r3
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	4605      	mov	r5, r0
 8003872:	460c      	mov	r4, r1
 8003874:	4616      	mov	r6, r2
 8003876:	d505      	bpl.n	8003884 <__swrite+0x1e>
 8003878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800387c:	2302      	movs	r3, #2
 800387e:	2200      	movs	r2, #0
 8003880:	f000 f8d4 	bl	8003a2c <_lseek_r>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	4632      	mov	r2, r6
 8003892:	463b      	mov	r3, r7
 8003894:	4628      	mov	r0, r5
 8003896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389a:	f000 b8fb 	b.w	8003a94 <_write_r>

0800389e <__sseek>:
 800389e:	b510      	push	{r4, lr}
 80038a0:	460c      	mov	r4, r1
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 f8c1 	bl	8003a2c <_lseek_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	bf15      	itete	ne
 80038b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80038b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ba:	81a3      	strheq	r3, [r4, #12]
 80038bc:	bf18      	it	ne
 80038be:	81a3      	strhne	r3, [r4, #12]
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <__sclose>:
 80038c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c6:	f000 b8a1 	b.w	8003a0c <_close_r>

080038ca <__swbuf_r>:
 80038ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038cc:	460e      	mov	r6, r1
 80038ce:	4614      	mov	r4, r2
 80038d0:	4605      	mov	r5, r0
 80038d2:	b118      	cbz	r0, 80038dc <__swbuf_r+0x12>
 80038d4:	6a03      	ldr	r3, [r0, #32]
 80038d6:	b90b      	cbnz	r3, 80038dc <__swbuf_r+0x12>
 80038d8:	f7ff ff10 	bl	80036fc <__sinit>
 80038dc:	69a3      	ldr	r3, [r4, #24]
 80038de:	60a3      	str	r3, [r4, #8]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	071a      	lsls	r2, r3, #28
 80038e4:	d525      	bpl.n	8003932 <__swbuf_r+0x68>
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	b31b      	cbz	r3, 8003932 <__swbuf_r+0x68>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	6922      	ldr	r2, [r4, #16]
 80038ee:	1a98      	subs	r0, r3, r2
 80038f0:	6963      	ldr	r3, [r4, #20]
 80038f2:	b2f6      	uxtb	r6, r6
 80038f4:	4283      	cmp	r3, r0
 80038f6:	4637      	mov	r7, r6
 80038f8:	dc04      	bgt.n	8003904 <__swbuf_r+0x3a>
 80038fa:	4621      	mov	r1, r4
 80038fc:	4628      	mov	r0, r5
 80038fe:	f001 fc9d 	bl	800523c <_fflush_r>
 8003902:	b9e0      	cbnz	r0, 800393e <__swbuf_r+0x74>
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	60a3      	str	r3, [r4, #8]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	6022      	str	r2, [r4, #0]
 8003910:	701e      	strb	r6, [r3, #0]
 8003912:	6962      	ldr	r2, [r4, #20]
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	429a      	cmp	r2, r3
 8003918:	d004      	beq.n	8003924 <__swbuf_r+0x5a>
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	07db      	lsls	r3, r3, #31
 800391e:	d506      	bpl.n	800392e <__swbuf_r+0x64>
 8003920:	2e0a      	cmp	r6, #10
 8003922:	d104      	bne.n	800392e <__swbuf_r+0x64>
 8003924:	4621      	mov	r1, r4
 8003926:	4628      	mov	r0, r5
 8003928:	f001 fc88 	bl	800523c <_fflush_r>
 800392c:	b938      	cbnz	r0, 800393e <__swbuf_r+0x74>
 800392e:	4638      	mov	r0, r7
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f000 f805 	bl	8003944 <__swsetup_r>
 800393a:	2800      	cmp	r0, #0
 800393c:	d0d5      	beq.n	80038ea <__swbuf_r+0x20>
 800393e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003942:	e7f4      	b.n	800392e <__swbuf_r+0x64>

08003944 <__swsetup_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <__swsetup_r+0xac>)
 8003948:	4605      	mov	r5, r0
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	460c      	mov	r4, r1
 800394e:	b118      	cbz	r0, 8003958 <__swsetup_r+0x14>
 8003950:	6a03      	ldr	r3, [r0, #32]
 8003952:	b90b      	cbnz	r3, 8003958 <__swsetup_r+0x14>
 8003954:	f7ff fed2 	bl	80036fc <__sinit>
 8003958:	89a3      	ldrh	r3, [r4, #12]
 800395a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800395e:	0718      	lsls	r0, r3, #28
 8003960:	d422      	bmi.n	80039a8 <__swsetup_r+0x64>
 8003962:	06d9      	lsls	r1, r3, #27
 8003964:	d407      	bmi.n	8003976 <__swsetup_r+0x32>
 8003966:	2309      	movs	r3, #9
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003974:	e034      	b.n	80039e0 <__swsetup_r+0x9c>
 8003976:	0758      	lsls	r0, r3, #29
 8003978:	d512      	bpl.n	80039a0 <__swsetup_r+0x5c>
 800397a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397c:	b141      	cbz	r1, 8003990 <__swsetup_r+0x4c>
 800397e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003982:	4299      	cmp	r1, r3
 8003984:	d002      	beq.n	800398c <__swsetup_r+0x48>
 8003986:	4628      	mov	r0, r5
 8003988:	f000 fec6 	bl	8004718 <_free_r>
 800398c:	2300      	movs	r3, #0
 800398e:	6363      	str	r3, [r4, #52]	; 0x34
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	2300      	movs	r3, #0
 800399a:	6063      	str	r3, [r4, #4]
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	b94b      	cbnz	r3, 80039c0 <__swsetup_r+0x7c>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d003      	beq.n	80039c0 <__swsetup_r+0x7c>
 80039b8:	4621      	mov	r1, r4
 80039ba:	4628      	mov	r0, r5
 80039bc:	f001 fc8c 	bl	80052d8 <__smakebuf_r>
 80039c0:	89a0      	ldrh	r0, [r4, #12]
 80039c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039c6:	f010 0301 	ands.w	r3, r0, #1
 80039ca:	d00a      	beq.n	80039e2 <__swsetup_r+0x9e>
 80039cc:	2300      	movs	r3, #0
 80039ce:	60a3      	str	r3, [r4, #8]
 80039d0:	6963      	ldr	r3, [r4, #20]
 80039d2:	425b      	negs	r3, r3
 80039d4:	61a3      	str	r3, [r4, #24]
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	b943      	cbnz	r3, 80039ec <__swsetup_r+0xa8>
 80039da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039de:	d1c4      	bne.n	800396a <__swsetup_r+0x26>
 80039e0:	bd38      	pop	{r3, r4, r5, pc}
 80039e2:	0781      	lsls	r1, r0, #30
 80039e4:	bf58      	it	pl
 80039e6:	6963      	ldrpl	r3, [r4, #20]
 80039e8:	60a3      	str	r3, [r4, #8]
 80039ea:	e7f4      	b.n	80039d6 <__swsetup_r+0x92>
 80039ec:	2000      	movs	r0, #0
 80039ee:	e7f7      	b.n	80039e0 <__swsetup_r+0x9c>
 80039f0:	24000af8 	.word	0x24000af8

080039f4 <memset>:
 80039f4:	4402      	add	r2, r0
 80039f6:	4603      	mov	r3, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <_localeconv_r>:
 8003a04:	4800      	ldr	r0, [pc, #0]	; (8003a08 <_localeconv_r+0x4>)
 8003a06:	4770      	bx	lr
 8003a08:	24000bec 	.word	0x24000bec

08003a0c <_close_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d06      	ldr	r5, [pc, #24]	; (8003a28 <_close_r+0x1c>)
 8003a10:	2300      	movs	r3, #0
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	f001 fd6e 	bl	80054f8 <_close>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_close_r+0x1a>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_close_r+0x1a>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	24001364 	.word	0x24001364

08003a2c <_lseek_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4d07      	ldr	r5, [pc, #28]	; (8003a4c <_lseek_r+0x20>)
 8003a30:	4604      	mov	r4, r0
 8003a32:	4608      	mov	r0, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	602a      	str	r2, [r5, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f001 fd84 	bl	8005548 <_lseek>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d102      	bne.n	8003a4a <_lseek_r+0x1e>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	b103      	cbz	r3, 8003a4a <_lseek_r+0x1e>
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	24001364 	.word	0x24001364

08003a50 <_read_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4d07      	ldr	r5, [pc, #28]	; (8003a70 <_read_r+0x20>)
 8003a54:	4604      	mov	r4, r0
 8003a56:	4608      	mov	r0, r1
 8003a58:	4611      	mov	r1, r2
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	602a      	str	r2, [r5, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f001 fd7a 	bl	8005558 <_read>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_read_r+0x1e>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_read_r+0x1e>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	24001364 	.word	0x24001364

08003a74 <_sbrk_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4d06      	ldr	r5, [pc, #24]	; (8003a90 <_sbrk_r+0x1c>)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fc fd72 	bl	8000568 <_sbrk>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_sbrk_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_sbrk_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	24001364 	.word	0x24001364

08003a94 <_write_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4d07      	ldr	r5, [pc, #28]	; (8003ab4 <_write_r+0x20>)
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	602a      	str	r2, [r5, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f001 fd60 	bl	8005568 <_write>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_write_r+0x1e>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_write_r+0x1e>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	24001364 	.word	0x24001364

08003ab8 <__errno>:
 8003ab8:	4b01      	ldr	r3, [pc, #4]	; (8003ac0 <__errno+0x8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	24000af8 	.word	0x24000af8

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	4d0d      	ldr	r5, [pc, #52]	; (8003afc <__libc_init_array+0x38>)
 8003ac8:	4c0d      	ldr	r4, [pc, #52]	; (8003b00 <__libc_init_array+0x3c>)
 8003aca:	1b64      	subs	r4, r4, r5
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	2600      	movs	r6, #0
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	4d0b      	ldr	r5, [pc, #44]	; (8003b04 <__libc_init_array+0x40>)
 8003ad6:	4c0c      	ldr	r4, [pc, #48]	; (8003b08 <__libc_init_array+0x44>)
 8003ad8:	f001 fd50 	bl	800557c <_init>
 8003adc:	1b64      	subs	r4, r4, r5
 8003ade:	10a4      	asrs	r4, r4, #2
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	08036bfc 	.word	0x08036bfc
 8003b00:	08036bfc 	.word	0x08036bfc
 8003b04:	08036bfc 	.word	0x08036bfc
 8003b08:	08036c00 	.word	0x08036c00

08003b0c <__retarget_lock_init_recursive>:
 8003b0c:	4770      	bx	lr

08003b0e <__retarget_lock_acquire_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <__retarget_lock_release_recursive>:
 8003b10:	4770      	bx	lr

08003b12 <memcpy>:
 8003b12:	440a      	add	r2, r1
 8003b14:	4291      	cmp	r1, r2
 8003b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b1a:	d100      	bne.n	8003b1e <memcpy+0xc>
 8003b1c:	4770      	bx	lr
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	4291      	cmp	r1, r2
 8003b2a:	d1f9      	bne.n	8003b20 <memcpy+0xe>
 8003b2c:	bd10      	pop	{r4, pc}

08003b2e <quorem>:
 8003b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b32:	6903      	ldr	r3, [r0, #16]
 8003b34:	690c      	ldr	r4, [r1, #16]
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	4607      	mov	r7, r0
 8003b3a:	db7e      	blt.n	8003c3a <quorem+0x10c>
 8003b3c:	3c01      	subs	r4, #1
 8003b3e:	f101 0814 	add.w	r8, r1, #20
 8003b42:	f100 0514 	add.w	r5, r0, #20
 8003b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b54:	3301      	adds	r3, #1
 8003b56:	429a      	cmp	r2, r3
 8003b58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b64:	d331      	bcc.n	8003bca <quorem+0x9c>
 8003b66:	f04f 0e00 	mov.w	lr, #0
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	46ac      	mov	ip, r5
 8003b6e:	46f2      	mov	sl, lr
 8003b70:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b74:	b293      	uxth	r3, r2
 8003b76:	fb06 e303 	mla	r3, r6, r3, lr
 8003b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b7e:	0c1a      	lsrs	r2, r3, #16
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ebaa 0303 	sub.w	r3, sl, r3
 8003b86:	f8dc a000 	ldr.w	sl, [ip]
 8003b8a:	fa13 f38a 	uxtah	r3, r3, sl
 8003b8e:	fb06 220e 	mla	r2, r6, lr, r2
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	9b00      	ldr	r3, [sp, #0]
 8003b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ba4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003ba8:	4581      	cmp	r9, r0
 8003baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bae:	f84c 3b04 	str.w	r3, [ip], #4
 8003bb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bb6:	d2db      	bcs.n	8003b70 <quorem+0x42>
 8003bb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bbc:	b92b      	cbnz	r3, 8003bca <quorem+0x9c>
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	3b04      	subs	r3, #4
 8003bc2:	429d      	cmp	r5, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	d32c      	bcc.n	8003c22 <quorem+0xf4>
 8003bc8:	613c      	str	r4, [r7, #16]
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f001 f86c 	bl	8004ca8 <__mcmp>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	db22      	blt.n	8003c1a <quorem+0xec>
 8003bd4:	3601      	adds	r6, #1
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bde:	f8d1 c000 	ldr.w	ip, [r1]
 8003be2:	b293      	uxth	r3, r2
 8003be4:	1ac3      	subs	r3, r0, r3
 8003be6:	0c12      	lsrs	r2, r2, #16
 8003be8:	fa13 f38c 	uxtah	r3, r3, ip
 8003bec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bfa:	45c1      	cmp	r9, r8
 8003bfc:	f841 3b04 	str.w	r3, [r1], #4
 8003c00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c04:	d2e9      	bcs.n	8003bda <quorem+0xac>
 8003c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c0e:	b922      	cbnz	r2, 8003c1a <quorem+0xec>
 8003c10:	3b04      	subs	r3, #4
 8003c12:	429d      	cmp	r5, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	d30a      	bcc.n	8003c2e <quorem+0x100>
 8003c18:	613c      	str	r4, [r7, #16]
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	b003      	add	sp, #12
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	3b04      	subs	r3, #4
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	d1ce      	bne.n	8003bc8 <quorem+0x9a>
 8003c2a:	3c01      	subs	r4, #1
 8003c2c:	e7c9      	b.n	8003bc2 <quorem+0x94>
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	3b04      	subs	r3, #4
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	d1f0      	bne.n	8003c18 <quorem+0xea>
 8003c36:	3c01      	subs	r4, #1
 8003c38:	e7eb      	b.n	8003c12 <quorem+0xe4>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e7ee      	b.n	8003c1c <quorem+0xee>
	...

08003c40 <_dtoa_r>:
 8003c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c44:	ed2d 8b02 	vpush	{d8}
 8003c48:	69c5      	ldr	r5, [r0, #28]
 8003c4a:	b091      	sub	sp, #68	; 0x44
 8003c4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003c50:	ec59 8b10 	vmov	r8, r9, d0
 8003c54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003c56:	9106      	str	r1, [sp, #24]
 8003c58:	4606      	mov	r6, r0
 8003c5a:	9208      	str	r2, [sp, #32]
 8003c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8003c5e:	b975      	cbnz	r5, 8003c7e <_dtoa_r+0x3e>
 8003c60:	2010      	movs	r0, #16
 8003c62:	f7fe ffd1 	bl	8002c08 <malloc>
 8003c66:	4602      	mov	r2, r0
 8003c68:	61f0      	str	r0, [r6, #28]
 8003c6a:	b920      	cbnz	r0, 8003c76 <_dtoa_r+0x36>
 8003c6c:	4ba6      	ldr	r3, [pc, #664]	; (8003f08 <_dtoa_r+0x2c8>)
 8003c6e:	21ef      	movs	r1, #239	; 0xef
 8003c70:	48a6      	ldr	r0, [pc, #664]	; (8003f0c <_dtoa_r+0x2cc>)
 8003c72:	f001 fb8f 	bl	8005394 <__assert_func>
 8003c76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c7a:	6005      	str	r5, [r0, #0]
 8003c7c:	60c5      	str	r5, [r0, #12]
 8003c7e:	69f3      	ldr	r3, [r6, #28]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	b151      	cbz	r1, 8003c9a <_dtoa_r+0x5a>
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	604a      	str	r2, [r1, #4]
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 fdce 	bl	8004830 <_Bfree>
 8003c94:	69f3      	ldr	r3, [r6, #28]
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f1b9 0300 	subs.w	r3, r9, #0
 8003c9e:	bfbb      	ittet	lt
 8003ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	9303      	strlt	r3, [sp, #12]
 8003ca6:	2300      	movge	r3, #0
 8003ca8:	2201      	movlt	r2, #1
 8003caa:	bfac      	ite	ge
 8003cac:	6023      	strge	r3, [r4, #0]
 8003cae:	6022      	strlt	r2, [r4, #0]
 8003cb0:	4b97      	ldr	r3, [pc, #604]	; (8003f10 <_dtoa_r+0x2d0>)
 8003cb2:	9c03      	ldr	r4, [sp, #12]
 8003cb4:	43a3      	bics	r3, r4
 8003cb6:	d11c      	bne.n	8003cf2 <_dtoa_r+0xb2>
 8003cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cba:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003cc4:	ea53 0308 	orrs.w	r3, r3, r8
 8003cc8:	f000 84fb 	beq.w	80046c2 <_dtoa_r+0xa82>
 8003ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cce:	b963      	cbnz	r3, 8003cea <_dtoa_r+0xaa>
 8003cd0:	4b90      	ldr	r3, [pc, #576]	; (8003f14 <_dtoa_r+0x2d4>)
 8003cd2:	e020      	b.n	8003d16 <_dtoa_r+0xd6>
 8003cd4:	4b90      	ldr	r3, [pc, #576]	; (8003f18 <_dtoa_r+0x2d8>)
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	9801      	ldr	r0, [sp, #4]
 8003ce0:	b011      	add	sp, #68	; 0x44
 8003ce2:	ecbd 8b02 	vpop	{d8}
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	4b8a      	ldr	r3, [pc, #552]	; (8003f14 <_dtoa_r+0x2d4>)
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	3303      	adds	r3, #3
 8003cf0:	e7f3      	b.n	8003cda <_dtoa_r+0x9a>
 8003cf2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8003cf6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	d10c      	bne.n	8003d1a <_dtoa_r+0xda>
 8003d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d02:	2301      	movs	r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 84d7 	beq.w	80046bc <_dtoa_r+0xa7c>
 8003d0e:	4b83      	ldr	r3, [pc, #524]	; (8003f1c <_dtoa_r+0x2dc>)
 8003d10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	e7e1      	b.n	8003cde <_dtoa_r+0x9e>
 8003d1a:	aa0e      	add	r2, sp, #56	; 0x38
 8003d1c:	a90f      	add	r1, sp, #60	; 0x3c
 8003d1e:	4630      	mov	r0, r6
 8003d20:	eeb0 0b48 	vmov.f64	d0, d8
 8003d24:	f001 f866 	bl	8004df4 <__d2b>
 8003d28:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8003d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d2e:	4605      	mov	r5, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d046      	beq.n	8003dc2 <_dtoa_r+0x182>
 8003d34:	eeb0 7b48 	vmov.f64	d7, d8
 8003d38:	ee18 1a90 	vmov	r1, s17
 8003d3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003d40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8003d44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	ee07 1a90 	vmov	s15, r1
 8003d52:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8003d56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8003ef0 <_dtoa_r+0x2b0>
 8003d5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d5e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8003ef8 <_dtoa_r+0x2b8>
 8003d62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003d66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8003f00 <_dtoa_r+0x2c0>
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003d72:	eeb0 7b46 	vmov.f64	d7, d6
 8003d76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8003d7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003d7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	ee16 ba90 	vmov	fp, s13
 8003d8a:	9009      	str	r0, [sp, #36]	; 0x24
 8003d8c:	d508      	bpl.n	8003da0 <_dtoa_r+0x160>
 8003d8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003d92:	eeb4 6b47 	vcmp.f64	d6, d7
 8003d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9a:	bf18      	it	ne
 8003d9c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8003da0:	f1bb 0f16 	cmp.w	fp, #22
 8003da4:	d82b      	bhi.n	8003dfe <_dtoa_r+0x1be>
 8003da6:	495e      	ldr	r1, [pc, #376]	; (8003f20 <_dtoa_r+0x2e0>)
 8003da8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003dac:	ed91 7b00 	vldr	d7, [r1]
 8003db0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	d501      	bpl.n	8003dbe <_dtoa_r+0x17e>
 8003dba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	e01e      	b.n	8003e00 <_dtoa_r+0x1c0>
 8003dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8003dca:	2920      	cmp	r1, #32
 8003dcc:	bfc1      	itttt	gt
 8003dce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8003dd2:	408c      	lslgt	r4, r1
 8003dd4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8003dd8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8003ddc:	bfd6      	itet	le
 8003dde:	f1c1 0120 	rsble	r1, r1, #32
 8003de2:	4321      	orrgt	r1, r4
 8003de4:	fa08 f101 	lslle.w	r1, r8, r1
 8003de8:	ee07 1a90 	vmov	s15, r1
 8003dec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003df0:	3b01      	subs	r3, #1
 8003df2:	ee17 1a90 	vmov	r1, s15
 8003df6:	2001      	movs	r0, #1
 8003df8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003dfc:	e7a7      	b.n	8003d4e <_dtoa_r+0x10e>
 8003dfe:	2101      	movs	r1, #1
 8003e00:	1ad2      	subs	r2, r2, r3
 8003e02:	1e53      	subs	r3, r2, #1
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	bf45      	ittet	mi
 8003e08:	f1c2 0301 	rsbmi	r3, r2, #1
 8003e0c:	9304      	strmi	r3, [sp, #16]
 8003e0e:	2300      	movpl	r3, #0
 8003e10:	2300      	movmi	r3, #0
 8003e12:	bf4c      	ite	mi
 8003e14:	9305      	strmi	r3, [sp, #20]
 8003e16:	9304      	strpl	r3, [sp, #16]
 8003e18:	f1bb 0f00 	cmp.w	fp, #0
 8003e1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8003e1e:	db18      	blt.n	8003e52 <_dtoa_r+0x212>
 8003e20:	9b05      	ldr	r3, [sp, #20]
 8003e22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003e26:	445b      	add	r3, fp
 8003e28:	9305      	str	r3, [sp, #20]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9a06      	ldr	r2, [sp, #24]
 8003e2e:	2a09      	cmp	r2, #9
 8003e30:	d848      	bhi.n	8003ec4 <_dtoa_r+0x284>
 8003e32:	2a05      	cmp	r2, #5
 8003e34:	bfc4      	itt	gt
 8003e36:	3a04      	subgt	r2, #4
 8003e38:	9206      	strgt	r2, [sp, #24]
 8003e3a:	9a06      	ldr	r2, [sp, #24]
 8003e3c:	f1a2 0202 	sub.w	r2, r2, #2
 8003e40:	bfcc      	ite	gt
 8003e42:	2400      	movgt	r4, #0
 8003e44:	2401      	movle	r4, #1
 8003e46:	2a03      	cmp	r2, #3
 8003e48:	d847      	bhi.n	8003eda <_dtoa_r+0x29a>
 8003e4a:	e8df f002 	tbb	[pc, r2]
 8003e4e:	2d0b      	.short	0x2d0b
 8003e50:	392b      	.short	0x392b
 8003e52:	9b04      	ldr	r3, [sp, #16]
 8003e54:	2200      	movs	r2, #0
 8003e56:	eba3 030b 	sub.w	r3, r3, fp
 8003e5a:	9304      	str	r3, [sp, #16]
 8003e5c:	920a      	str	r2, [sp, #40]	; 0x28
 8003e5e:	f1cb 0300 	rsb	r3, fp, #0
 8003e62:	e7e3      	b.n	8003e2c <_dtoa_r+0x1ec>
 8003e64:	2200      	movs	r2, #0
 8003e66:	9207      	str	r2, [sp, #28]
 8003e68:	9a08      	ldr	r2, [sp, #32]
 8003e6a:	2a00      	cmp	r2, #0
 8003e6c:	dc38      	bgt.n	8003ee0 <_dtoa_r+0x2a0>
 8003e6e:	f04f 0a01 	mov.w	sl, #1
 8003e72:	46d1      	mov	r9, sl
 8003e74:	4652      	mov	r2, sl
 8003e76:	f8cd a020 	str.w	sl, [sp, #32]
 8003e7a:	69f7      	ldr	r7, [r6, #28]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2004      	movs	r0, #4
 8003e80:	f100 0c14 	add.w	ip, r0, #20
 8003e84:	4594      	cmp	ip, r2
 8003e86:	d930      	bls.n	8003eea <_dtoa_r+0x2aa>
 8003e88:	6079      	str	r1, [r7, #4]
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8003e8e:	f000 fc8f 	bl	80047b0 <_Balloc>
 8003e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e94:	9001      	str	r0, [sp, #4]
 8003e96:	4602      	mov	r2, r0
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d145      	bne.n	8003f28 <_dtoa_r+0x2e8>
 8003e9c:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <_dtoa_r+0x2e4>)
 8003e9e:	f240 11af 	movw	r1, #431	; 0x1af
 8003ea2:	e6e5      	b.n	8003c70 <_dtoa_r+0x30>
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	e7de      	b.n	8003e66 <_dtoa_r+0x226>
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	9207      	str	r2, [sp, #28]
 8003eac:	9a08      	ldr	r2, [sp, #32]
 8003eae:	eb0b 0a02 	add.w	sl, fp, r2
 8003eb2:	f10a 0901 	add.w	r9, sl, #1
 8003eb6:	464a      	mov	r2, r9
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	bfb8      	it	lt
 8003ebc:	2201      	movlt	r2, #1
 8003ebe:	e7dc      	b.n	8003e7a <_dtoa_r+0x23a>
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	e7f2      	b.n	8003eaa <_dtoa_r+0x26a>
 8003ec4:	2401      	movs	r4, #1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8003ecc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	46d1      	mov	r9, sl
 8003ed4:	2212      	movs	r2, #18
 8003ed6:	9108      	str	r1, [sp, #32]
 8003ed8:	e7cf      	b.n	8003e7a <_dtoa_r+0x23a>
 8003eda:	2201      	movs	r2, #1
 8003edc:	9207      	str	r2, [sp, #28]
 8003ede:	e7f5      	b.n	8003ecc <_dtoa_r+0x28c>
 8003ee0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003ee4:	46d1      	mov	r9, sl
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	e7c7      	b.n	8003e7a <_dtoa_r+0x23a>
 8003eea:	3101      	adds	r1, #1
 8003eec:	0040      	lsls	r0, r0, #1
 8003eee:	e7c7      	b.n	8003e80 <_dtoa_r+0x240>
 8003ef0:	636f4361 	.word	0x636f4361
 8003ef4:	3fd287a7 	.word	0x3fd287a7
 8003ef8:	8b60c8b3 	.word	0x8b60c8b3
 8003efc:	3fc68a28 	.word	0x3fc68a28
 8003f00:	509f79fb 	.word	0x509f79fb
 8003f04:	3fd34413 	.word	0x3fd34413
 8003f08:	080368c9 	.word	0x080368c9
 8003f0c:	080368e0 	.word	0x080368e0
 8003f10:	7ff00000 	.word	0x7ff00000
 8003f14:	080368c5 	.word	0x080368c5
 8003f18:	080368bc 	.word	0x080368bc
 8003f1c:	08036899 	.word	0x08036899
 8003f20:	080369d0 	.word	0x080369d0
 8003f24:	08036938 	.word	0x08036938
 8003f28:	69f2      	ldr	r2, [r6, #28]
 8003f2a:	9901      	ldr	r1, [sp, #4]
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	f1b9 0f0e 	cmp.w	r9, #14
 8003f32:	d86c      	bhi.n	800400e <_dtoa_r+0x3ce>
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d06a      	beq.n	800400e <_dtoa_r+0x3ce>
 8003f38:	f1bb 0f00 	cmp.w	fp, #0
 8003f3c:	f340 80a0 	ble.w	8004080 <_dtoa_r+0x440>
 8003f40:	4ac1      	ldr	r2, [pc, #772]	; (8004248 <_dtoa_r+0x608>)
 8003f42:	f00b 010f 	and.w	r1, fp, #15
 8003f46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003f4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003f4e:	ed92 7b00 	vldr	d7, [r2]
 8003f52:	ea4f 122b 	mov.w	r2, fp, asr #4
 8003f56:	f000 8087 	beq.w	8004068 <_dtoa_r+0x428>
 8003f5a:	49bc      	ldr	r1, [pc, #752]	; (800424c <_dtoa_r+0x60c>)
 8003f5c:	ed91 6b08 	vldr	d6, [r1, #32]
 8003f60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8003f64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003f68:	f002 020f 	and.w	r2, r2, #15
 8003f6c:	2103      	movs	r1, #3
 8003f6e:	48b7      	ldr	r0, [pc, #732]	; (800424c <_dtoa_r+0x60c>)
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d17b      	bne.n	800406c <_dtoa_r+0x42c>
 8003f74:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003f78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003f7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	f000 80a0 	beq.w	80040cc <_dtoa_r+0x48c>
 8003f8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003f90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	f140 8098 	bpl.w	80040cc <_dtoa_r+0x48c>
 8003f9c:	f1b9 0f00 	cmp.w	r9, #0
 8003fa0:	f000 8094 	beq.w	80040cc <_dtoa_r+0x48c>
 8003fa4:	f1ba 0f00 	cmp.w	sl, #0
 8003fa8:	dd2f      	ble.n	800400a <_dtoa_r+0x3ca>
 8003faa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fb6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003fba:	3101      	adds	r1, #1
 8003fbc:	4654      	mov	r4, sl
 8003fbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003fc2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003fc6:	ee07 1a90 	vmov	s15, r1
 8003fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003fce:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003fd2:	ee15 7a90 	vmov	r7, s11
 8003fd6:	ec51 0b15 	vmov	r0, r1, d5
 8003fda:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8003fde:	2c00      	cmp	r4, #0
 8003fe0:	d177      	bne.n	80040d2 <_dtoa_r+0x492>
 8003fe2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003fe6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003fea:	ec41 0b17 	vmov	d7, r0, r1
 8003fee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff6:	f300 826a 	bgt.w	80044ce <_dtoa_r+0x88e>
 8003ffa:	eeb1 7b47 	vneg.f64	d7, d7
 8003ffe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	f100 8260 	bmi.w	80044ca <_dtoa_r+0x88a>
 800400a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800400e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004010:	2a00      	cmp	r2, #0
 8004012:	f2c0 811d 	blt.w	8004250 <_dtoa_r+0x610>
 8004016:	f1bb 0f0e 	cmp.w	fp, #14
 800401a:	f300 8119 	bgt.w	8004250 <_dtoa_r+0x610>
 800401e:	4b8a      	ldr	r3, [pc, #552]	; (8004248 <_dtoa_r+0x608>)
 8004020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004024:	ed93 6b00 	vldr	d6, [r3]
 8004028:	9b08      	ldr	r3, [sp, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f280 80b7 	bge.w	800419e <_dtoa_r+0x55e>
 8004030:	f1b9 0f00 	cmp.w	r9, #0
 8004034:	f300 80b3 	bgt.w	800419e <_dtoa_r+0x55e>
 8004038:	f040 8246 	bne.w	80044c8 <_dtoa_r+0x888>
 800403c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004040:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004048:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	464c      	mov	r4, r9
 8004052:	464f      	mov	r7, r9
 8004054:	f280 821c 	bge.w	8004490 <_dtoa_r+0x850>
 8004058:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800405c:	2331      	movs	r3, #49	; 0x31
 800405e:	f808 3b01 	strb.w	r3, [r8], #1
 8004062:	f10b 0b01 	add.w	fp, fp, #1
 8004066:	e218      	b.n	800449a <_dtoa_r+0x85a>
 8004068:	2102      	movs	r1, #2
 800406a:	e780      	b.n	8003f6e <_dtoa_r+0x32e>
 800406c:	07d4      	lsls	r4, r2, #31
 800406e:	d504      	bpl.n	800407a <_dtoa_r+0x43a>
 8004070:	ed90 6b00 	vldr	d6, [r0]
 8004074:	3101      	adds	r1, #1
 8004076:	ee27 7b06 	vmul.f64	d7, d7, d6
 800407a:	1052      	asrs	r2, r2, #1
 800407c:	3008      	adds	r0, #8
 800407e:	e777      	b.n	8003f70 <_dtoa_r+0x330>
 8004080:	d022      	beq.n	80040c8 <_dtoa_r+0x488>
 8004082:	f1cb 0200 	rsb	r2, fp, #0
 8004086:	4970      	ldr	r1, [pc, #448]	; (8004248 <_dtoa_r+0x608>)
 8004088:	f002 000f 	and.w	r0, r2, #15
 800408c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004090:	ed91 7b00 	vldr	d7, [r1]
 8004094:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800409c:	486b      	ldr	r0, [pc, #428]	; (800424c <_dtoa_r+0x60c>)
 800409e:	1112      	asrs	r2, r2, #4
 80040a0:	2400      	movs	r4, #0
 80040a2:	2102      	movs	r1, #2
 80040a4:	b92a      	cbnz	r2, 80040b2 <_dtoa_r+0x472>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	f43f af6a 	beq.w	8003f80 <_dtoa_r+0x340>
 80040ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80040b0:	e766      	b.n	8003f80 <_dtoa_r+0x340>
 80040b2:	07d7      	lsls	r7, r2, #31
 80040b4:	d505      	bpl.n	80040c2 <_dtoa_r+0x482>
 80040b6:	ed90 6b00 	vldr	d6, [r0]
 80040ba:	3101      	adds	r1, #1
 80040bc:	2401      	movs	r4, #1
 80040be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040c2:	1052      	asrs	r2, r2, #1
 80040c4:	3008      	adds	r0, #8
 80040c6:	e7ed      	b.n	80040a4 <_dtoa_r+0x464>
 80040c8:	2102      	movs	r1, #2
 80040ca:	e759      	b.n	8003f80 <_dtoa_r+0x340>
 80040cc:	465a      	mov	r2, fp
 80040ce:	464c      	mov	r4, r9
 80040d0:	e775      	b.n	8003fbe <_dtoa_r+0x37e>
 80040d2:	ec41 0b17 	vmov	d7, r0, r1
 80040d6:	495c      	ldr	r1, [pc, #368]	; (8004248 <_dtoa_r+0x608>)
 80040d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80040dc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80040e0:	9901      	ldr	r1, [sp, #4]
 80040e2:	440c      	add	r4, r1
 80040e4:	9907      	ldr	r1, [sp, #28]
 80040e6:	b351      	cbz	r1, 800413e <_dtoa_r+0x4fe>
 80040e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80040ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80040f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80040f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80040f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80040fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004100:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004104:	ee14 1a90 	vmov	r1, s9
 8004108:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800410c:	3130      	adds	r1, #48	; 0x30
 800410e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004112:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	f808 1b01 	strb.w	r1, [r8], #1
 800411e:	d439      	bmi.n	8004194 <_dtoa_r+0x554>
 8004120:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004124:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d472      	bmi.n	8004214 <_dtoa_r+0x5d4>
 800412e:	45a0      	cmp	r8, r4
 8004130:	f43f af6b 	beq.w	800400a <_dtoa_r+0x3ca>
 8004134:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004138:	ee26 6b03 	vmul.f64	d6, d6, d3
 800413c:	e7e0      	b.n	8004100 <_dtoa_r+0x4c0>
 800413e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004142:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004146:	4620      	mov	r0, r4
 8004148:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800414c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004150:	ee14 1a90 	vmov	r1, s9
 8004154:	3130      	adds	r1, #48	; 0x30
 8004156:	f808 1b01 	strb.w	r1, [r8], #1
 800415a:	45a0      	cmp	r8, r4
 800415c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004160:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004164:	d118      	bne.n	8004198 <_dtoa_r+0x558>
 8004166:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800416a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800416e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	dc4d      	bgt.n	8004214 <_dtoa_r+0x5d4>
 8004178:	ee35 5b47 	vsub.f64	d5, d5, d7
 800417c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	f57f af41 	bpl.w	800400a <_dtoa_r+0x3ca>
 8004188:	4680      	mov	r8, r0
 800418a:	3801      	subs	r0, #1
 800418c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004190:	2b30      	cmp	r3, #48	; 0x30
 8004192:	d0f9      	beq.n	8004188 <_dtoa_r+0x548>
 8004194:	4693      	mov	fp, r2
 8004196:	e02a      	b.n	80041ee <_dtoa_r+0x5ae>
 8004198:	ee26 6b03 	vmul.f64	d6, d6, d3
 800419c:	e7d6      	b.n	800414c <_dtoa_r+0x50c>
 800419e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80041a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80041aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80041ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80041b2:	ee15 3a10 	vmov	r3, s10
 80041b6:	3330      	adds	r3, #48	; 0x30
 80041b8:	f808 3b01 	strb.w	r3, [r8], #1
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	eba8 0303 	sub.w	r3, r8, r3
 80041c2:	4599      	cmp	r9, r3
 80041c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80041c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80041cc:	d133      	bne.n	8004236 <_dtoa_r+0x5f6>
 80041ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	dc1a      	bgt.n	8004212 <_dtoa_r+0x5d2>
 80041dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d103      	bne.n	80041ee <_dtoa_r+0x5ae>
 80041e6:	ee15 3a10 	vmov	r3, s10
 80041ea:	07d9      	lsls	r1, r3, #31
 80041ec:	d411      	bmi.n	8004212 <_dtoa_r+0x5d2>
 80041ee:	4629      	mov	r1, r5
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 fb1d 	bl	8004830 <_Bfree>
 80041f6:	2300      	movs	r3, #0
 80041f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041fa:	f888 3000 	strb.w	r3, [r8]
 80041fe:	f10b 0301 	add.w	r3, fp, #1
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004206:	2b00      	cmp	r3, #0
 8004208:	f43f ad69 	beq.w	8003cde <_dtoa_r+0x9e>
 800420c:	f8c3 8000 	str.w	r8, [r3]
 8004210:	e565      	b.n	8003cde <_dtoa_r+0x9e>
 8004212:	465a      	mov	r2, fp
 8004214:	4643      	mov	r3, r8
 8004216:	4698      	mov	r8, r3
 8004218:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800421c:	2939      	cmp	r1, #57	; 0x39
 800421e:	d106      	bne.n	800422e <_dtoa_r+0x5ee>
 8004220:	9901      	ldr	r1, [sp, #4]
 8004222:	4299      	cmp	r1, r3
 8004224:	d1f7      	bne.n	8004216 <_dtoa_r+0x5d6>
 8004226:	9801      	ldr	r0, [sp, #4]
 8004228:	2130      	movs	r1, #48	; 0x30
 800422a:	3201      	adds	r2, #1
 800422c:	7001      	strb	r1, [r0, #0]
 800422e:	7819      	ldrb	r1, [r3, #0]
 8004230:	3101      	adds	r1, #1
 8004232:	7019      	strb	r1, [r3, #0]
 8004234:	e7ae      	b.n	8004194 <_dtoa_r+0x554>
 8004236:	ee27 7b04 	vmul.f64	d7, d7, d4
 800423a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004242:	d1b2      	bne.n	80041aa <_dtoa_r+0x56a>
 8004244:	e7d3      	b.n	80041ee <_dtoa_r+0x5ae>
 8004246:	bf00      	nop
 8004248:	080369d0 	.word	0x080369d0
 800424c:	080369a8 	.word	0x080369a8
 8004250:	9907      	ldr	r1, [sp, #28]
 8004252:	2900      	cmp	r1, #0
 8004254:	f000 80d0 	beq.w	80043f8 <_dtoa_r+0x7b8>
 8004258:	9906      	ldr	r1, [sp, #24]
 800425a:	2901      	cmp	r1, #1
 800425c:	f300 80b4 	bgt.w	80043c8 <_dtoa_r+0x788>
 8004260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004262:	2900      	cmp	r1, #0
 8004264:	f000 80ac 	beq.w	80043c0 <_dtoa_r+0x780>
 8004268:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800426c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004270:	461c      	mov	r4, r3
 8004272:	9309      	str	r3, [sp, #36]	; 0x24
 8004274:	9b04      	ldr	r3, [sp, #16]
 8004276:	4413      	add	r3, r2
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	9b05      	ldr	r3, [sp, #20]
 800427c:	2101      	movs	r1, #1
 800427e:	4413      	add	r3, r2
 8004280:	4630      	mov	r0, r6
 8004282:	9305      	str	r3, [sp, #20]
 8004284:	f000 fb8a 	bl	800499c <__i2b>
 8004288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428a:	4607      	mov	r7, r0
 800428c:	f1b8 0f00 	cmp.w	r8, #0
 8004290:	d00d      	beq.n	80042ae <_dtoa_r+0x66e>
 8004292:	9a05      	ldr	r2, [sp, #20]
 8004294:	2a00      	cmp	r2, #0
 8004296:	dd0a      	ble.n	80042ae <_dtoa_r+0x66e>
 8004298:	4542      	cmp	r2, r8
 800429a:	9904      	ldr	r1, [sp, #16]
 800429c:	bfa8      	it	ge
 800429e:	4642      	movge	r2, r8
 80042a0:	1a89      	subs	r1, r1, r2
 80042a2:	9104      	str	r1, [sp, #16]
 80042a4:	9905      	ldr	r1, [sp, #20]
 80042a6:	eba8 0802 	sub.w	r8, r8, r2
 80042aa:	1a8a      	subs	r2, r1, r2
 80042ac:	9205      	str	r2, [sp, #20]
 80042ae:	b303      	cbz	r3, 80042f2 <_dtoa_r+0x6b2>
 80042b0:	9a07      	ldr	r2, [sp, #28]
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	f000 80a5 	beq.w	8004402 <_dtoa_r+0x7c2>
 80042b8:	2c00      	cmp	r4, #0
 80042ba:	dd13      	ble.n	80042e4 <_dtoa_r+0x6a4>
 80042bc:	4639      	mov	r1, r7
 80042be:	4622      	mov	r2, r4
 80042c0:	4630      	mov	r0, r6
 80042c2:	930d      	str	r3, [sp, #52]	; 0x34
 80042c4:	f000 fc2a 	bl	8004b1c <__pow5mult>
 80042c8:	462a      	mov	r2, r5
 80042ca:	4601      	mov	r1, r0
 80042cc:	4607      	mov	r7, r0
 80042ce:	4630      	mov	r0, r6
 80042d0:	f000 fb7a 	bl	80049c8 <__multiply>
 80042d4:	4629      	mov	r1, r5
 80042d6:	9009      	str	r0, [sp, #36]	; 0x24
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 faa9 	bl	8004830 <_Bfree>
 80042de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e2:	4615      	mov	r5, r2
 80042e4:	1b1a      	subs	r2, r3, r4
 80042e6:	d004      	beq.n	80042f2 <_dtoa_r+0x6b2>
 80042e8:	4629      	mov	r1, r5
 80042ea:	4630      	mov	r0, r6
 80042ec:	f000 fc16 	bl	8004b1c <__pow5mult>
 80042f0:	4605      	mov	r5, r0
 80042f2:	2101      	movs	r1, #1
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 fb51 	bl	800499c <__i2b>
 80042fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	f340 8081 	ble.w	8004406 <_dtoa_r+0x7c6>
 8004304:	461a      	mov	r2, r3
 8004306:	4601      	mov	r1, r0
 8004308:	4630      	mov	r0, r6
 800430a:	f000 fc07 	bl	8004b1c <__pow5mult>
 800430e:	9b06      	ldr	r3, [sp, #24]
 8004310:	2b01      	cmp	r3, #1
 8004312:	4604      	mov	r4, r0
 8004314:	dd7a      	ble.n	800440c <_dtoa_r+0x7cc>
 8004316:	2300      	movs	r3, #0
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	6922      	ldr	r2, [r4, #16]
 800431c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004320:	6910      	ldr	r0, [r2, #16]
 8004322:	f000 faed 	bl	8004900 <__hi0bits>
 8004326:	f1c0 0020 	rsb	r0, r0, #32
 800432a:	9b05      	ldr	r3, [sp, #20]
 800432c:	4418      	add	r0, r3
 800432e:	f010 001f 	ands.w	r0, r0, #31
 8004332:	f000 8093 	beq.w	800445c <_dtoa_r+0x81c>
 8004336:	f1c0 0220 	rsb	r2, r0, #32
 800433a:	2a04      	cmp	r2, #4
 800433c:	f340 8085 	ble.w	800444a <_dtoa_r+0x80a>
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	f1c0 001c 	rsb	r0, r0, #28
 8004346:	4403      	add	r3, r0
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	9b05      	ldr	r3, [sp, #20]
 800434c:	4480      	add	r8, r0
 800434e:	4403      	add	r3, r0
 8004350:	9305      	str	r3, [sp, #20]
 8004352:	9b04      	ldr	r3, [sp, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	dd05      	ble.n	8004364 <_dtoa_r+0x724>
 8004358:	4629      	mov	r1, r5
 800435a:	461a      	mov	r2, r3
 800435c:	4630      	mov	r0, r6
 800435e:	f000 fc37 	bl	8004bd0 <__lshift>
 8004362:	4605      	mov	r5, r0
 8004364:	9b05      	ldr	r3, [sp, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	dd05      	ble.n	8004376 <_dtoa_r+0x736>
 800436a:	4621      	mov	r1, r4
 800436c:	461a      	mov	r2, r3
 800436e:	4630      	mov	r0, r6
 8004370:	f000 fc2e 	bl	8004bd0 <__lshift>
 8004374:	4604      	mov	r4, r0
 8004376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d071      	beq.n	8004460 <_dtoa_r+0x820>
 800437c:	4621      	mov	r1, r4
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fc92 	bl	8004ca8 <__mcmp>
 8004384:	2800      	cmp	r0, #0
 8004386:	da6b      	bge.n	8004460 <_dtoa_r+0x820>
 8004388:	2300      	movs	r3, #0
 800438a:	4629      	mov	r1, r5
 800438c:	220a      	movs	r2, #10
 800438e:	4630      	mov	r0, r6
 8004390:	f000 fa70 	bl	8004874 <__multadd>
 8004394:	9b07      	ldr	r3, [sp, #28]
 8004396:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800439a:	4605      	mov	r5, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8197 	beq.w	80046d0 <_dtoa_r+0xa90>
 80043a2:	4639      	mov	r1, r7
 80043a4:	2300      	movs	r3, #0
 80043a6:	220a      	movs	r2, #10
 80043a8:	4630      	mov	r0, r6
 80043aa:	f000 fa63 	bl	8004874 <__multadd>
 80043ae:	f1ba 0f00 	cmp.w	sl, #0
 80043b2:	4607      	mov	r7, r0
 80043b4:	f300 8093 	bgt.w	80044de <_dtoa_r+0x89e>
 80043b8:	9b06      	ldr	r3, [sp, #24]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	dc57      	bgt.n	800446e <_dtoa_r+0x82e>
 80043be:	e08e      	b.n	80044de <_dtoa_r+0x89e>
 80043c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80043c6:	e751      	b.n	800426c <_dtoa_r+0x62c>
 80043c8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	bfbf      	itttt	lt
 80043d0:	1ae2      	sublt	r2, r4, r3
 80043d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80043d4:	189b      	addlt	r3, r3, r2
 80043d6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80043d8:	bfae      	itee	ge
 80043da:	1b1c      	subge	r4, r3, r4
 80043dc:	4623      	movlt	r3, r4
 80043de:	2400      	movlt	r4, #0
 80043e0:	f1b9 0f00 	cmp.w	r9, #0
 80043e4:	bfb5      	itete	lt
 80043e6:	9a04      	ldrlt	r2, [sp, #16]
 80043e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80043ec:	eba2 0809 	sublt.w	r8, r2, r9
 80043f0:	464a      	movge	r2, r9
 80043f2:	bfb8      	it	lt
 80043f4:	2200      	movlt	r2, #0
 80043f6:	e73c      	b.n	8004272 <_dtoa_r+0x632>
 80043f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80043fc:	9f07      	ldr	r7, [sp, #28]
 80043fe:	461c      	mov	r4, r3
 8004400:	e744      	b.n	800428c <_dtoa_r+0x64c>
 8004402:	461a      	mov	r2, r3
 8004404:	e770      	b.n	80042e8 <_dtoa_r+0x6a8>
 8004406:	9b06      	ldr	r3, [sp, #24]
 8004408:	2b01      	cmp	r3, #1
 800440a:	dc18      	bgt.n	800443e <_dtoa_r+0x7fe>
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	b9b3      	cbnz	r3, 800443e <_dtoa_r+0x7fe>
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004416:	b9a2      	cbnz	r2, 8004442 <_dtoa_r+0x802>
 8004418:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800441c:	0d12      	lsrs	r2, r2, #20
 800441e:	0512      	lsls	r2, r2, #20
 8004420:	b18a      	cbz	r2, 8004446 <_dtoa_r+0x806>
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	9b05      	ldr	r3, [sp, #20]
 800442a:	3301      	adds	r3, #1
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	2301      	movs	r3, #1
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af70 	bne.w	800431a <_dtoa_r+0x6da>
 800443a:	2001      	movs	r0, #1
 800443c:	e775      	b.n	800432a <_dtoa_r+0x6ea>
 800443e:	2300      	movs	r3, #0
 8004440:	e7f6      	b.n	8004430 <_dtoa_r+0x7f0>
 8004442:	9b02      	ldr	r3, [sp, #8]
 8004444:	e7f4      	b.n	8004430 <_dtoa_r+0x7f0>
 8004446:	9209      	str	r2, [sp, #36]	; 0x24
 8004448:	e7f3      	b.n	8004432 <_dtoa_r+0x7f2>
 800444a:	d082      	beq.n	8004352 <_dtoa_r+0x712>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	321c      	adds	r2, #28
 8004450:	4413      	add	r3, r2
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9b05      	ldr	r3, [sp, #20]
 8004456:	4490      	add	r8, r2
 8004458:	4413      	add	r3, r2
 800445a:	e779      	b.n	8004350 <_dtoa_r+0x710>
 800445c:	4602      	mov	r2, r0
 800445e:	e7f5      	b.n	800444c <_dtoa_r+0x80c>
 8004460:	f1b9 0f00 	cmp.w	r9, #0
 8004464:	dc36      	bgt.n	80044d4 <_dtoa_r+0x894>
 8004466:	9b06      	ldr	r3, [sp, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	dd33      	ble.n	80044d4 <_dtoa_r+0x894>
 800446c:	46ca      	mov	sl, r9
 800446e:	f1ba 0f00 	cmp.w	sl, #0
 8004472:	d10d      	bne.n	8004490 <_dtoa_r+0x850>
 8004474:	4621      	mov	r1, r4
 8004476:	4653      	mov	r3, sl
 8004478:	2205      	movs	r2, #5
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f9fa 	bl	8004874 <__multadd>
 8004480:	4601      	mov	r1, r0
 8004482:	4604      	mov	r4, r0
 8004484:	4628      	mov	r0, r5
 8004486:	f000 fc0f 	bl	8004ca8 <__mcmp>
 800448a:	2800      	cmp	r0, #0
 800448c:	f73f ade4 	bgt.w	8004058 <_dtoa_r+0x418>
 8004490:	9b08      	ldr	r3, [sp, #32]
 8004492:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004496:	ea6f 0b03 	mvn.w	fp, r3
 800449a:	f04f 0900 	mov.w	r9, #0
 800449e:	4621      	mov	r1, r4
 80044a0:	4630      	mov	r0, r6
 80044a2:	f000 f9c5 	bl	8004830 <_Bfree>
 80044a6:	2f00      	cmp	r7, #0
 80044a8:	f43f aea1 	beq.w	80041ee <_dtoa_r+0x5ae>
 80044ac:	f1b9 0f00 	cmp.w	r9, #0
 80044b0:	d005      	beq.n	80044be <_dtoa_r+0x87e>
 80044b2:	45b9      	cmp	r9, r7
 80044b4:	d003      	beq.n	80044be <_dtoa_r+0x87e>
 80044b6:	4649      	mov	r1, r9
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f9b9 	bl	8004830 <_Bfree>
 80044be:	4639      	mov	r1, r7
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f9b5 	bl	8004830 <_Bfree>
 80044c6:	e692      	b.n	80041ee <_dtoa_r+0x5ae>
 80044c8:	2400      	movs	r4, #0
 80044ca:	4627      	mov	r7, r4
 80044cc:	e7e0      	b.n	8004490 <_dtoa_r+0x850>
 80044ce:	4693      	mov	fp, r2
 80044d0:	4627      	mov	r7, r4
 80044d2:	e5c1      	b.n	8004058 <_dtoa_r+0x418>
 80044d4:	9b07      	ldr	r3, [sp, #28]
 80044d6:	46ca      	mov	sl, r9
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8100 	beq.w	80046de <_dtoa_r+0xa9e>
 80044de:	f1b8 0f00 	cmp.w	r8, #0
 80044e2:	dd05      	ble.n	80044f0 <_dtoa_r+0x8b0>
 80044e4:	4639      	mov	r1, r7
 80044e6:	4642      	mov	r2, r8
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 fb71 	bl	8004bd0 <__lshift>
 80044ee:	4607      	mov	r7, r0
 80044f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d05d      	beq.n	80045b2 <_dtoa_r+0x972>
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 f959 	bl	80047b0 <_Balloc>
 80044fe:	4680      	mov	r8, r0
 8004500:	b928      	cbnz	r0, 800450e <_dtoa_r+0x8ce>
 8004502:	4b82      	ldr	r3, [pc, #520]	; (800470c <_dtoa_r+0xacc>)
 8004504:	4602      	mov	r2, r0
 8004506:	f240 21ef 	movw	r1, #751	; 0x2ef
 800450a:	f7ff bbb1 	b.w	8003c70 <_dtoa_r+0x30>
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	3202      	adds	r2, #2
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	f107 010c 	add.w	r1, r7, #12
 8004518:	300c      	adds	r0, #12
 800451a:	f7ff fafa 	bl	8003b12 <memcpy>
 800451e:	2201      	movs	r2, #1
 8004520:	4641      	mov	r1, r8
 8004522:	4630      	mov	r0, r6
 8004524:	f000 fb54 	bl	8004bd0 <__lshift>
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	3301      	adds	r3, #1
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	4453      	add	r3, sl
 8004532:	9308      	str	r3, [sp, #32]
 8004534:	9b02      	ldr	r3, [sp, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	46b9      	mov	r9, r7
 800453c:	9307      	str	r3, [sp, #28]
 800453e:	4607      	mov	r7, r0
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	4621      	mov	r1, r4
 8004544:	3b01      	subs	r3, #1
 8004546:	4628      	mov	r0, r5
 8004548:	9302      	str	r3, [sp, #8]
 800454a:	f7ff faf0 	bl	8003b2e <quorem>
 800454e:	4603      	mov	r3, r0
 8004550:	3330      	adds	r3, #48	; 0x30
 8004552:	9005      	str	r0, [sp, #20]
 8004554:	4649      	mov	r1, r9
 8004556:	4628      	mov	r0, r5
 8004558:	9309      	str	r3, [sp, #36]	; 0x24
 800455a:	f000 fba5 	bl	8004ca8 <__mcmp>
 800455e:	463a      	mov	r2, r7
 8004560:	4682      	mov	sl, r0
 8004562:	4621      	mov	r1, r4
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fbbb 	bl	8004ce0 <__mdiff>
 800456a:	68c2      	ldr	r2, [r0, #12]
 800456c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456e:	4680      	mov	r8, r0
 8004570:	bb0a      	cbnz	r2, 80045b6 <_dtoa_r+0x976>
 8004572:	4601      	mov	r1, r0
 8004574:	4628      	mov	r0, r5
 8004576:	f000 fb97 	bl	8004ca8 <__mcmp>
 800457a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457c:	4602      	mov	r2, r0
 800457e:	4641      	mov	r1, r8
 8004580:	4630      	mov	r0, r6
 8004582:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8004586:	f000 f953 	bl	8004830 <_Bfree>
 800458a:	9b06      	ldr	r3, [sp, #24]
 800458c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800458e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004592:	ea43 0102 	orr.w	r1, r3, r2
 8004596:	9b07      	ldr	r3, [sp, #28]
 8004598:	4319      	orrs	r1, r3
 800459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459c:	d10d      	bne.n	80045ba <_dtoa_r+0x97a>
 800459e:	2b39      	cmp	r3, #57	; 0x39
 80045a0:	d029      	beq.n	80045f6 <_dtoa_r+0x9b6>
 80045a2:	f1ba 0f00 	cmp.w	sl, #0
 80045a6:	dd01      	ble.n	80045ac <_dtoa_r+0x96c>
 80045a8:	9b05      	ldr	r3, [sp, #20]
 80045aa:	3331      	adds	r3, #49	; 0x31
 80045ac:	9a02      	ldr	r2, [sp, #8]
 80045ae:	7013      	strb	r3, [r2, #0]
 80045b0:	e775      	b.n	800449e <_dtoa_r+0x85e>
 80045b2:	4638      	mov	r0, r7
 80045b4:	e7b8      	b.n	8004528 <_dtoa_r+0x8e8>
 80045b6:	2201      	movs	r2, #1
 80045b8:	e7e1      	b.n	800457e <_dtoa_r+0x93e>
 80045ba:	f1ba 0f00 	cmp.w	sl, #0
 80045be:	db06      	blt.n	80045ce <_dtoa_r+0x98e>
 80045c0:	9906      	ldr	r1, [sp, #24]
 80045c2:	ea41 0a0a 	orr.w	sl, r1, sl
 80045c6:	9907      	ldr	r1, [sp, #28]
 80045c8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80045cc:	d120      	bne.n	8004610 <_dtoa_r+0x9d0>
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	ddec      	ble.n	80045ac <_dtoa_r+0x96c>
 80045d2:	4629      	mov	r1, r5
 80045d4:	2201      	movs	r2, #1
 80045d6:	4630      	mov	r0, r6
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	f000 faf9 	bl	8004bd0 <__lshift>
 80045de:	4621      	mov	r1, r4
 80045e0:	4605      	mov	r5, r0
 80045e2:	f000 fb61 	bl	8004ca8 <__mcmp>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	9b04      	ldr	r3, [sp, #16]
 80045ea:	dc02      	bgt.n	80045f2 <_dtoa_r+0x9b2>
 80045ec:	d1de      	bne.n	80045ac <_dtoa_r+0x96c>
 80045ee:	07da      	lsls	r2, r3, #31
 80045f0:	d5dc      	bpl.n	80045ac <_dtoa_r+0x96c>
 80045f2:	2b39      	cmp	r3, #57	; 0x39
 80045f4:	d1d8      	bne.n	80045a8 <_dtoa_r+0x968>
 80045f6:	9a02      	ldr	r2, [sp, #8]
 80045f8:	2339      	movs	r3, #57	; 0x39
 80045fa:	7013      	strb	r3, [r2, #0]
 80045fc:	4643      	mov	r3, r8
 80045fe:	4698      	mov	r8, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004606:	2a39      	cmp	r2, #57	; 0x39
 8004608:	d051      	beq.n	80046ae <_dtoa_r+0xa6e>
 800460a:	3201      	adds	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e746      	b.n	800449e <_dtoa_r+0x85e>
 8004610:	2a00      	cmp	r2, #0
 8004612:	dd03      	ble.n	800461c <_dtoa_r+0x9dc>
 8004614:	2b39      	cmp	r3, #57	; 0x39
 8004616:	d0ee      	beq.n	80045f6 <_dtoa_r+0x9b6>
 8004618:	3301      	adds	r3, #1
 800461a:	e7c7      	b.n	80045ac <_dtoa_r+0x96c>
 800461c:	9a04      	ldr	r2, [sp, #16]
 800461e:	9908      	ldr	r1, [sp, #32]
 8004620:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004624:	428a      	cmp	r2, r1
 8004626:	d02b      	beq.n	8004680 <_dtoa_r+0xa40>
 8004628:	4629      	mov	r1, r5
 800462a:	2300      	movs	r3, #0
 800462c:	220a      	movs	r2, #10
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f920 	bl	8004874 <__multadd>
 8004634:	45b9      	cmp	r9, r7
 8004636:	4605      	mov	r5, r0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f04f 020a 	mov.w	r2, #10
 8004640:	4649      	mov	r1, r9
 8004642:	4630      	mov	r0, r6
 8004644:	d107      	bne.n	8004656 <_dtoa_r+0xa16>
 8004646:	f000 f915 	bl	8004874 <__multadd>
 800464a:	4681      	mov	r9, r0
 800464c:	4607      	mov	r7, r0
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	3301      	adds	r3, #1
 8004652:	9304      	str	r3, [sp, #16]
 8004654:	e774      	b.n	8004540 <_dtoa_r+0x900>
 8004656:	f000 f90d 	bl	8004874 <__multadd>
 800465a:	4639      	mov	r1, r7
 800465c:	4681      	mov	r9, r0
 800465e:	2300      	movs	r3, #0
 8004660:	220a      	movs	r2, #10
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f906 	bl	8004874 <__multadd>
 8004668:	4607      	mov	r7, r0
 800466a:	e7f0      	b.n	800464e <_dtoa_r+0xa0e>
 800466c:	f1ba 0f00 	cmp.w	sl, #0
 8004670:	9a01      	ldr	r2, [sp, #4]
 8004672:	bfcc      	ite	gt
 8004674:	46d0      	movgt	r8, sl
 8004676:	f04f 0801 	movle.w	r8, #1
 800467a:	4490      	add	r8, r2
 800467c:	f04f 0900 	mov.w	r9, #0
 8004680:	4629      	mov	r1, r5
 8004682:	2201      	movs	r2, #1
 8004684:	4630      	mov	r0, r6
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	f000 faa2 	bl	8004bd0 <__lshift>
 800468c:	4621      	mov	r1, r4
 800468e:	4605      	mov	r5, r0
 8004690:	f000 fb0a 	bl	8004ca8 <__mcmp>
 8004694:	2800      	cmp	r0, #0
 8004696:	dcb1      	bgt.n	80045fc <_dtoa_r+0x9bc>
 8004698:	d102      	bne.n	80046a0 <_dtoa_r+0xa60>
 800469a:	9b02      	ldr	r3, [sp, #8]
 800469c:	07db      	lsls	r3, r3, #31
 800469e:	d4ad      	bmi.n	80045fc <_dtoa_r+0x9bc>
 80046a0:	4643      	mov	r3, r8
 80046a2:	4698      	mov	r8, r3
 80046a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046a8:	2a30      	cmp	r2, #48	; 0x30
 80046aa:	d0fa      	beq.n	80046a2 <_dtoa_r+0xa62>
 80046ac:	e6f7      	b.n	800449e <_dtoa_r+0x85e>
 80046ae:	9a01      	ldr	r2, [sp, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1a4      	bne.n	80045fe <_dtoa_r+0x9be>
 80046b4:	f10b 0b01 	add.w	fp, fp, #1
 80046b8:	2331      	movs	r3, #49	; 0x31
 80046ba:	e778      	b.n	80045ae <_dtoa_r+0x96e>
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <_dtoa_r+0xad0>)
 80046be:	f7ff bb2a 	b.w	8003d16 <_dtoa_r+0xd6>
 80046c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f ab05 	bne.w	8003cd4 <_dtoa_r+0x94>
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <_dtoa_r+0xad4>)
 80046cc:	f7ff bb23 	b.w	8003d16 <_dtoa_r+0xd6>
 80046d0:	f1ba 0f00 	cmp.w	sl, #0
 80046d4:	dc03      	bgt.n	80046de <_dtoa_r+0xa9e>
 80046d6:	9b06      	ldr	r3, [sp, #24]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f73f aec8 	bgt.w	800446e <_dtoa_r+0x82e>
 80046de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046e2:	4621      	mov	r1, r4
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fa22 	bl	8003b2e <quorem>
 80046ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80046ee:	f808 3b01 	strb.w	r3, [r8], #1
 80046f2:	9a01      	ldr	r2, [sp, #4]
 80046f4:	eba8 0202 	sub.w	r2, r8, r2
 80046f8:	4592      	cmp	sl, r2
 80046fa:	ddb7      	ble.n	800466c <_dtoa_r+0xa2c>
 80046fc:	4629      	mov	r1, r5
 80046fe:	2300      	movs	r3, #0
 8004700:	220a      	movs	r2, #10
 8004702:	4630      	mov	r0, r6
 8004704:	f000 f8b6 	bl	8004874 <__multadd>
 8004708:	4605      	mov	r5, r0
 800470a:	e7ea      	b.n	80046e2 <_dtoa_r+0xaa2>
 800470c:	08036938 	.word	0x08036938
 8004710:	08036898 	.word	0x08036898
 8004714:	080368bc 	.word	0x080368bc

08004718 <_free_r>:
 8004718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800471a:	2900      	cmp	r1, #0
 800471c:	d044      	beq.n	80047a8 <_free_r+0x90>
 800471e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004722:	9001      	str	r0, [sp, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f1a1 0404 	sub.w	r4, r1, #4
 800472a:	bfb8      	it	lt
 800472c:	18e4      	addlt	r4, r4, r3
 800472e:	f7fe fb13 	bl	8002d58 <__malloc_lock>
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <_free_r+0x94>)
 8004734:	9801      	ldr	r0, [sp, #4]
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	b933      	cbnz	r3, 8004748 <_free_r+0x30>
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	6014      	str	r4, [r2, #0]
 800473e:	b003      	add	sp, #12
 8004740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004744:	f7fe bb0e 	b.w	8002d64 <__malloc_unlock>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d908      	bls.n	800475e <_free_r+0x46>
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	1961      	adds	r1, r4, r5
 8004750:	428b      	cmp	r3, r1
 8004752:	bf01      	itttt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	1949      	addeq	r1, r1, r5
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	e7ed      	b.n	800473a <_free_r+0x22>
 800475e:	461a      	mov	r2, r3
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	b10b      	cbz	r3, 8004768 <_free_r+0x50>
 8004764:	42a3      	cmp	r3, r4
 8004766:	d9fa      	bls.n	800475e <_free_r+0x46>
 8004768:	6811      	ldr	r1, [r2, #0]
 800476a:	1855      	adds	r5, r2, r1
 800476c:	42a5      	cmp	r5, r4
 800476e:	d10b      	bne.n	8004788 <_free_r+0x70>
 8004770:	6824      	ldr	r4, [r4, #0]
 8004772:	4421      	add	r1, r4
 8004774:	1854      	adds	r4, r2, r1
 8004776:	42a3      	cmp	r3, r4
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	d1e0      	bne.n	800473e <_free_r+0x26>
 800477c:	681c      	ldr	r4, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6053      	str	r3, [r2, #4]
 8004782:	440c      	add	r4, r1
 8004784:	6014      	str	r4, [r2, #0]
 8004786:	e7da      	b.n	800473e <_free_r+0x26>
 8004788:	d902      	bls.n	8004790 <_free_r+0x78>
 800478a:	230c      	movs	r3, #12
 800478c:	6003      	str	r3, [r0, #0]
 800478e:	e7d6      	b.n	800473e <_free_r+0x26>
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	1961      	adds	r1, r4, r5
 8004794:	428b      	cmp	r3, r1
 8004796:	bf04      	itt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	bf04      	itt	eq
 80047a0:	1949      	addeq	r1, r1, r5
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6054      	str	r4, [r2, #4]
 80047a6:	e7ca      	b.n	800473e <_free_r+0x26>
 80047a8:	b003      	add	sp, #12
 80047aa:	bd30      	pop	{r4, r5, pc}
 80047ac:	24001220 	.word	0x24001220

080047b0 <_Balloc>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	69c6      	ldr	r6, [r0, #28]
 80047b4:	4604      	mov	r4, r0
 80047b6:	460d      	mov	r5, r1
 80047b8:	b976      	cbnz	r6, 80047d8 <_Balloc+0x28>
 80047ba:	2010      	movs	r0, #16
 80047bc:	f7fe fa24 	bl	8002c08 <malloc>
 80047c0:	4602      	mov	r2, r0
 80047c2:	61e0      	str	r0, [r4, #28]
 80047c4:	b920      	cbnz	r0, 80047d0 <_Balloc+0x20>
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <_Balloc+0x78>)
 80047c8:	4818      	ldr	r0, [pc, #96]	; (800482c <_Balloc+0x7c>)
 80047ca:	216b      	movs	r1, #107	; 0x6b
 80047cc:	f000 fde2 	bl	8005394 <__assert_func>
 80047d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047d4:	6006      	str	r6, [r0, #0]
 80047d6:	60c6      	str	r6, [r0, #12]
 80047d8:	69e6      	ldr	r6, [r4, #28]
 80047da:	68f3      	ldr	r3, [r6, #12]
 80047dc:	b183      	cbz	r3, 8004800 <_Balloc+0x50>
 80047de:	69e3      	ldr	r3, [r4, #28]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047e6:	b9b8      	cbnz	r0, 8004818 <_Balloc+0x68>
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f605 	lsl.w	r6, r1, r5
 80047ee:	1d72      	adds	r2, r6, #5
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 fdec 	bl	80053d0 <_calloc_r>
 80047f8:	b160      	cbz	r0, 8004814 <_Balloc+0x64>
 80047fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80047fe:	e00e      	b.n	800481e <_Balloc+0x6e>
 8004800:	2221      	movs	r2, #33	; 0x21
 8004802:	2104      	movs	r1, #4
 8004804:	4620      	mov	r0, r4
 8004806:	f000 fde3 	bl	80053d0 <_calloc_r>
 800480a:	69e3      	ldr	r3, [r4, #28]
 800480c:	60f0      	str	r0, [r6, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e4      	bne.n	80047de <_Balloc+0x2e>
 8004814:	2000      	movs	r0, #0
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	6802      	ldr	r2, [r0, #0]
 800481a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800481e:	2300      	movs	r3, #0
 8004820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004824:	e7f7      	b.n	8004816 <_Balloc+0x66>
 8004826:	bf00      	nop
 8004828:	080368c9 	.word	0x080368c9
 800482c:	08036949 	.word	0x08036949

08004830 <_Bfree>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	69c6      	ldr	r6, [r0, #28]
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	b976      	cbnz	r6, 8004858 <_Bfree+0x28>
 800483a:	2010      	movs	r0, #16
 800483c:	f7fe f9e4 	bl	8002c08 <malloc>
 8004840:	4602      	mov	r2, r0
 8004842:	61e8      	str	r0, [r5, #28]
 8004844:	b920      	cbnz	r0, 8004850 <_Bfree+0x20>
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <_Bfree+0x3c>)
 8004848:	4809      	ldr	r0, [pc, #36]	; (8004870 <_Bfree+0x40>)
 800484a:	218f      	movs	r1, #143	; 0x8f
 800484c:	f000 fda2 	bl	8005394 <__assert_func>
 8004850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004854:	6006      	str	r6, [r0, #0]
 8004856:	60c6      	str	r6, [r0, #12]
 8004858:	b13c      	cbz	r4, 800486a <_Bfree+0x3a>
 800485a:	69eb      	ldr	r3, [r5, #28]
 800485c:	6862      	ldr	r2, [r4, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004864:	6021      	str	r1, [r4, #0]
 8004866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	080368c9 	.word	0x080368c9
 8004870:	08036949 	.word	0x08036949

08004874 <__multadd>:
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	690d      	ldr	r5, [r1, #16]
 800487a:	4607      	mov	r7, r0
 800487c:	460c      	mov	r4, r1
 800487e:	461e      	mov	r6, r3
 8004880:	f101 0c14 	add.w	ip, r1, #20
 8004884:	2000      	movs	r0, #0
 8004886:	f8dc 3000 	ldr.w	r3, [ip]
 800488a:	b299      	uxth	r1, r3
 800488c:	fb02 6101 	mla	r1, r2, r1, r6
 8004890:	0c1e      	lsrs	r6, r3, #16
 8004892:	0c0b      	lsrs	r3, r1, #16
 8004894:	fb02 3306 	mla	r3, r2, r6, r3
 8004898:	b289      	uxth	r1, r1
 800489a:	3001      	adds	r0, #1
 800489c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048a0:	4285      	cmp	r5, r0
 80048a2:	f84c 1b04 	str.w	r1, [ip], #4
 80048a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048aa:	dcec      	bgt.n	8004886 <__multadd+0x12>
 80048ac:	b30e      	cbz	r6, 80048f2 <__multadd+0x7e>
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	dc19      	bgt.n	80048e8 <__multadd+0x74>
 80048b4:	6861      	ldr	r1, [r4, #4]
 80048b6:	4638      	mov	r0, r7
 80048b8:	3101      	adds	r1, #1
 80048ba:	f7ff ff79 	bl	80047b0 <_Balloc>
 80048be:	4680      	mov	r8, r0
 80048c0:	b928      	cbnz	r0, 80048ce <__multadd+0x5a>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <__multadd+0x84>)
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <__multadd+0x88>)
 80048c8:	21ba      	movs	r1, #186	; 0xba
 80048ca:	f000 fd63 	bl	8005394 <__assert_func>
 80048ce:	6922      	ldr	r2, [r4, #16]
 80048d0:	3202      	adds	r2, #2
 80048d2:	f104 010c 	add.w	r1, r4, #12
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	300c      	adds	r0, #12
 80048da:	f7ff f91a 	bl	8003b12 <memcpy>
 80048de:	4621      	mov	r1, r4
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7ff ffa5 	bl	8004830 <_Bfree>
 80048e6:	4644      	mov	r4, r8
 80048e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048ec:	3501      	adds	r5, #1
 80048ee:	615e      	str	r6, [r3, #20]
 80048f0:	6125      	str	r5, [r4, #16]
 80048f2:	4620      	mov	r0, r4
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	08036938 	.word	0x08036938
 80048fc:	08036949 	.word	0x08036949

08004900 <__hi0bits>:
 8004900:	0c03      	lsrs	r3, r0, #16
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	b9d3      	cbnz	r3, 800493c <__hi0bits+0x3c>
 8004906:	0400      	lsls	r0, r0, #16
 8004908:	2310      	movs	r3, #16
 800490a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800490e:	bf04      	itt	eq
 8004910:	0200      	lsleq	r0, r0, #8
 8004912:	3308      	addeq	r3, #8
 8004914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004918:	bf04      	itt	eq
 800491a:	0100      	lsleq	r0, r0, #4
 800491c:	3304      	addeq	r3, #4
 800491e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004922:	bf04      	itt	eq
 8004924:	0080      	lsleq	r0, r0, #2
 8004926:	3302      	addeq	r3, #2
 8004928:	2800      	cmp	r0, #0
 800492a:	db05      	blt.n	8004938 <__hi0bits+0x38>
 800492c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004930:	f103 0301 	add.w	r3, r3, #1
 8004934:	bf08      	it	eq
 8004936:	2320      	moveq	r3, #32
 8004938:	4618      	mov	r0, r3
 800493a:	4770      	bx	lr
 800493c:	2300      	movs	r3, #0
 800493e:	e7e4      	b.n	800490a <__hi0bits+0xa>

08004940 <__lo0bits>:
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	f013 0207 	ands.w	r2, r3, #7
 8004946:	d00c      	beq.n	8004962 <__lo0bits+0x22>
 8004948:	07d9      	lsls	r1, r3, #31
 800494a:	d422      	bmi.n	8004992 <__lo0bits+0x52>
 800494c:	079a      	lsls	r2, r3, #30
 800494e:	bf49      	itett	mi
 8004950:	085b      	lsrmi	r3, r3, #1
 8004952:	089b      	lsrpl	r3, r3, #2
 8004954:	6003      	strmi	r3, [r0, #0]
 8004956:	2201      	movmi	r2, #1
 8004958:	bf5c      	itt	pl
 800495a:	6003      	strpl	r3, [r0, #0]
 800495c:	2202      	movpl	r2, #2
 800495e:	4610      	mov	r0, r2
 8004960:	4770      	bx	lr
 8004962:	b299      	uxth	r1, r3
 8004964:	b909      	cbnz	r1, 800496a <__lo0bits+0x2a>
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	2210      	movs	r2, #16
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	b909      	cbnz	r1, 8004972 <__lo0bits+0x32>
 800496e:	3208      	adds	r2, #8
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	0719      	lsls	r1, r3, #28
 8004974:	bf04      	itt	eq
 8004976:	091b      	lsreq	r3, r3, #4
 8004978:	3204      	addeq	r2, #4
 800497a:	0799      	lsls	r1, r3, #30
 800497c:	bf04      	itt	eq
 800497e:	089b      	lsreq	r3, r3, #2
 8004980:	3202      	addeq	r2, #2
 8004982:	07d9      	lsls	r1, r3, #31
 8004984:	d403      	bmi.n	800498e <__lo0bits+0x4e>
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	f102 0201 	add.w	r2, r2, #1
 800498c:	d003      	beq.n	8004996 <__lo0bits+0x56>
 800498e:	6003      	str	r3, [r0, #0]
 8004990:	e7e5      	b.n	800495e <__lo0bits+0x1e>
 8004992:	2200      	movs	r2, #0
 8004994:	e7e3      	b.n	800495e <__lo0bits+0x1e>
 8004996:	2220      	movs	r2, #32
 8004998:	e7e1      	b.n	800495e <__lo0bits+0x1e>
	...

0800499c <__i2b>:
 800499c:	b510      	push	{r4, lr}
 800499e:	460c      	mov	r4, r1
 80049a0:	2101      	movs	r1, #1
 80049a2:	f7ff ff05 	bl	80047b0 <_Balloc>
 80049a6:	4602      	mov	r2, r0
 80049a8:	b928      	cbnz	r0, 80049b6 <__i2b+0x1a>
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <__i2b+0x24>)
 80049ac:	4805      	ldr	r0, [pc, #20]	; (80049c4 <__i2b+0x28>)
 80049ae:	f240 1145 	movw	r1, #325	; 0x145
 80049b2:	f000 fcef 	bl	8005394 <__assert_func>
 80049b6:	2301      	movs	r3, #1
 80049b8:	6144      	str	r4, [r0, #20]
 80049ba:	6103      	str	r3, [r0, #16]
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	bf00      	nop
 80049c0:	08036938 	.word	0x08036938
 80049c4:	08036949 	.word	0x08036949

080049c8 <__multiply>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	4691      	mov	r9, r2
 80049ce:	690a      	ldr	r2, [r1, #16]
 80049d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	bfb8      	it	lt
 80049d8:	460b      	movlt	r3, r1
 80049da:	460c      	mov	r4, r1
 80049dc:	bfbc      	itt	lt
 80049de:	464c      	movlt	r4, r9
 80049e0:	4699      	movlt	r9, r3
 80049e2:	6927      	ldr	r7, [r4, #16]
 80049e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80049e8:	68a3      	ldr	r3, [r4, #8]
 80049ea:	6861      	ldr	r1, [r4, #4]
 80049ec:	eb07 060a 	add.w	r6, r7, sl
 80049f0:	42b3      	cmp	r3, r6
 80049f2:	b085      	sub	sp, #20
 80049f4:	bfb8      	it	lt
 80049f6:	3101      	addlt	r1, #1
 80049f8:	f7ff feda 	bl	80047b0 <_Balloc>
 80049fc:	b930      	cbnz	r0, 8004a0c <__multiply+0x44>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <__multiply+0x14c>)
 8004a02:	4845      	ldr	r0, [pc, #276]	; (8004b18 <__multiply+0x150>)
 8004a04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004a08:	f000 fcc4 	bl	8005394 <__assert_func>
 8004a0c:	f100 0514 	add.w	r5, r0, #20
 8004a10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a14:	462b      	mov	r3, r5
 8004a16:	2200      	movs	r2, #0
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	d321      	bcc.n	8004a60 <__multiply+0x98>
 8004a1c:	f104 0314 	add.w	r3, r4, #20
 8004a20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a24:	f109 0314 	add.w	r3, r9, #20
 8004a28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	1b3a      	subs	r2, r7, r4
 8004a30:	3a15      	subs	r2, #21
 8004a32:	f022 0203 	bic.w	r2, r2, #3
 8004a36:	3204      	adds	r2, #4
 8004a38:	f104 0115 	add.w	r1, r4, #21
 8004a3c:	428f      	cmp	r7, r1
 8004a3e:	bf38      	it	cc
 8004a40:	2204      	movcc	r2, #4
 8004a42:	9201      	str	r2, [sp, #4]
 8004a44:	9a02      	ldr	r2, [sp, #8]
 8004a46:	9303      	str	r3, [sp, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d80c      	bhi.n	8004a66 <__multiply+0x9e>
 8004a4c:	2e00      	cmp	r6, #0
 8004a4e:	dd03      	ble.n	8004a58 <__multiply+0x90>
 8004a50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05b      	beq.n	8004b10 <__multiply+0x148>
 8004a58:	6106      	str	r6, [r0, #16]
 8004a5a:	b005      	add	sp, #20
 8004a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a60:	f843 2b04 	str.w	r2, [r3], #4
 8004a64:	e7d8      	b.n	8004a18 <__multiply+0x50>
 8004a66:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a6a:	f1ba 0f00 	cmp.w	sl, #0
 8004a6e:	d024      	beq.n	8004aba <__multiply+0xf2>
 8004a70:	f104 0e14 	add.w	lr, r4, #20
 8004a74:	46a9      	mov	r9, r5
 8004a76:	f04f 0c00 	mov.w	ip, #0
 8004a7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004a7e:	f8d9 1000 	ldr.w	r1, [r9]
 8004a82:	fa1f fb82 	uxth.w	fp, r2
 8004a86:	b289      	uxth	r1, r1
 8004a88:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004a90:	f8d9 2000 	ldr.w	r2, [r9]
 8004a94:	4461      	add	r1, ip
 8004a96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8004a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004aa2:	b289      	uxth	r1, r1
 8004aa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004aa8:	4577      	cmp	r7, lr
 8004aaa:	f849 1b04 	str.w	r1, [r9], #4
 8004aae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ab2:	d8e2      	bhi.n	8004a7a <__multiply+0xb2>
 8004ab4:	9a01      	ldr	r2, [sp, #4]
 8004ab6:	f845 c002 	str.w	ip, [r5, r2]
 8004aba:	9a03      	ldr	r2, [sp, #12]
 8004abc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	f1b9 0f00 	cmp.w	r9, #0
 8004ac6:	d021      	beq.n	8004b0c <__multiply+0x144>
 8004ac8:	6829      	ldr	r1, [r5, #0]
 8004aca:	f104 0c14 	add.w	ip, r4, #20
 8004ace:	46ae      	mov	lr, r5
 8004ad0:	f04f 0a00 	mov.w	sl, #0
 8004ad4:	f8bc b000 	ldrh.w	fp, [ip]
 8004ad8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004adc:	fb09 220b 	mla	r2, r9, fp, r2
 8004ae0:	4452      	add	r2, sl
 8004ae2:	b289      	uxth	r1, r1
 8004ae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ae8:	f84e 1b04 	str.w	r1, [lr], #4
 8004aec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004af0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004af4:	f8be 1000 	ldrh.w	r1, [lr]
 8004af8:	fb09 110a 	mla	r1, r9, sl, r1
 8004afc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004b00:	4567      	cmp	r7, ip
 8004b02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b06:	d8e5      	bhi.n	8004ad4 <__multiply+0x10c>
 8004b08:	9a01      	ldr	r2, [sp, #4]
 8004b0a:	50a9      	str	r1, [r5, r2]
 8004b0c:	3504      	adds	r5, #4
 8004b0e:	e799      	b.n	8004a44 <__multiply+0x7c>
 8004b10:	3e01      	subs	r6, #1
 8004b12:	e79b      	b.n	8004a4c <__multiply+0x84>
 8004b14:	08036938 	.word	0x08036938
 8004b18:	08036949 	.word	0x08036949

08004b1c <__pow5mult>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	4615      	mov	r5, r2
 8004b22:	f012 0203 	ands.w	r2, r2, #3
 8004b26:	4606      	mov	r6, r0
 8004b28:	460f      	mov	r7, r1
 8004b2a:	d007      	beq.n	8004b3c <__pow5mult+0x20>
 8004b2c:	4c25      	ldr	r4, [pc, #148]	; (8004bc4 <__pow5mult+0xa8>)
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	2300      	movs	r3, #0
 8004b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b36:	f7ff fe9d 	bl	8004874 <__multadd>
 8004b3a:	4607      	mov	r7, r0
 8004b3c:	10ad      	asrs	r5, r5, #2
 8004b3e:	d03d      	beq.n	8004bbc <__pow5mult+0xa0>
 8004b40:	69f4      	ldr	r4, [r6, #28]
 8004b42:	b97c      	cbnz	r4, 8004b64 <__pow5mult+0x48>
 8004b44:	2010      	movs	r0, #16
 8004b46:	f7fe f85f 	bl	8002c08 <malloc>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	61f0      	str	r0, [r6, #28]
 8004b4e:	b928      	cbnz	r0, 8004b5c <__pow5mult+0x40>
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <__pow5mult+0xac>)
 8004b52:	481e      	ldr	r0, [pc, #120]	; (8004bcc <__pow5mult+0xb0>)
 8004b54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004b58:	f000 fc1c 	bl	8005394 <__assert_func>
 8004b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b60:	6004      	str	r4, [r0, #0]
 8004b62:	60c4      	str	r4, [r0, #12]
 8004b64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b6c:	b94c      	cbnz	r4, 8004b82 <__pow5mult+0x66>
 8004b6e:	f240 2171 	movw	r1, #625	; 0x271
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ff12 	bl	800499c <__i2b>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b7e:	4604      	mov	r4, r0
 8004b80:	6003      	str	r3, [r0, #0]
 8004b82:	f04f 0900 	mov.w	r9, #0
 8004b86:	07eb      	lsls	r3, r5, #31
 8004b88:	d50a      	bpl.n	8004ba0 <__pow5mult+0x84>
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff ff1a 	bl	80049c8 <__multiply>
 8004b94:	4639      	mov	r1, r7
 8004b96:	4680      	mov	r8, r0
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7ff fe49 	bl	8004830 <_Bfree>
 8004b9e:	4647      	mov	r7, r8
 8004ba0:	106d      	asrs	r5, r5, #1
 8004ba2:	d00b      	beq.n	8004bbc <__pow5mult+0xa0>
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	b938      	cbnz	r0, 8004bb8 <__pow5mult+0x9c>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4621      	mov	r1, r4
 8004bac:	4630      	mov	r0, r6
 8004bae:	f7ff ff0b 	bl	80049c8 <__multiply>
 8004bb2:	6020      	str	r0, [r4, #0]
 8004bb4:	f8c0 9000 	str.w	r9, [r0]
 8004bb8:	4604      	mov	r4, r0
 8004bba:	e7e4      	b.n	8004b86 <__pow5mult+0x6a>
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc2:	bf00      	nop
 8004bc4:	08036a98 	.word	0x08036a98
 8004bc8:	080368c9 	.word	0x080368c9
 8004bcc:	08036949 	.word	0x08036949

08004bd0 <__lshift>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	6849      	ldr	r1, [r1, #4]
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004bde:	68a3      	ldr	r3, [r4, #8]
 8004be0:	4607      	mov	r7, r0
 8004be2:	4691      	mov	r9, r2
 8004be4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004be8:	f108 0601 	add.w	r6, r8, #1
 8004bec:	42b3      	cmp	r3, r6
 8004bee:	db0b      	blt.n	8004c08 <__lshift+0x38>
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f7ff fddd 	bl	80047b0 <_Balloc>
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	b948      	cbnz	r0, 8004c0e <__lshift+0x3e>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <__lshift+0xd0>)
 8004bfe:	4829      	ldr	r0, [pc, #164]	; (8004ca4 <__lshift+0xd4>)
 8004c00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004c04:	f000 fbc6 	bl	8005394 <__assert_func>
 8004c08:	3101      	adds	r1, #1
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	e7ee      	b.n	8004bec <__lshift+0x1c>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f100 0114 	add.w	r1, r0, #20
 8004c14:	f100 0210 	add.w	r2, r0, #16
 8004c18:	4618      	mov	r0, r3
 8004c1a:	4553      	cmp	r3, sl
 8004c1c:	db33      	blt.n	8004c86 <__lshift+0xb6>
 8004c1e:	6920      	ldr	r0, [r4, #16]
 8004c20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c24:	f104 0314 	add.w	r3, r4, #20
 8004c28:	f019 091f 	ands.w	r9, r9, #31
 8004c2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c34:	d02b      	beq.n	8004c8e <__lshift+0xbe>
 8004c36:	f1c9 0e20 	rsb	lr, r9, #32
 8004c3a:	468a      	mov	sl, r1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	fa00 f009 	lsl.w	r0, r0, r9
 8004c44:	4310      	orrs	r0, r2
 8004c46:	f84a 0b04 	str.w	r0, [sl], #4
 8004c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4e:	459c      	cmp	ip, r3
 8004c50:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c54:	d8f3      	bhi.n	8004c3e <__lshift+0x6e>
 8004c56:	ebac 0304 	sub.w	r3, ip, r4
 8004c5a:	3b15      	subs	r3, #21
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	3304      	adds	r3, #4
 8004c62:	f104 0015 	add.w	r0, r4, #21
 8004c66:	4584      	cmp	ip, r0
 8004c68:	bf38      	it	cc
 8004c6a:	2304      	movcc	r3, #4
 8004c6c:	50ca      	str	r2, [r1, r3]
 8004c6e:	b10a      	cbz	r2, 8004c74 <__lshift+0xa4>
 8004c70:	f108 0602 	add.w	r6, r8, #2
 8004c74:	3e01      	subs	r6, #1
 8004c76:	4638      	mov	r0, r7
 8004c78:	612e      	str	r6, [r5, #16]
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	f7ff fdd8 	bl	8004830 <_Bfree>
 8004c80:	4628      	mov	r0, r5
 8004c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	e7c5      	b.n	8004c1a <__lshift+0x4a>
 8004c8e:	3904      	subs	r1, #4
 8004c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c94:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c98:	459c      	cmp	ip, r3
 8004c9a:	d8f9      	bhi.n	8004c90 <__lshift+0xc0>
 8004c9c:	e7ea      	b.n	8004c74 <__lshift+0xa4>
 8004c9e:	bf00      	nop
 8004ca0:	08036938 	.word	0x08036938
 8004ca4:	08036949 	.word	0x08036949

08004ca8 <__mcmp>:
 8004ca8:	b530      	push	{r4, r5, lr}
 8004caa:	6902      	ldr	r2, [r0, #16]
 8004cac:	690c      	ldr	r4, [r1, #16]
 8004cae:	1b12      	subs	r2, r2, r4
 8004cb0:	d10e      	bne.n	8004cd0 <__mcmp+0x28>
 8004cb2:	f100 0314 	add.w	r3, r0, #20
 8004cb6:	3114      	adds	r1, #20
 8004cb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004cbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004cc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004cc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004cc8:	42a5      	cmp	r5, r4
 8004cca:	d003      	beq.n	8004cd4 <__mcmp+0x2c>
 8004ccc:	d305      	bcc.n	8004cda <__mcmp+0x32>
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	bd30      	pop	{r4, r5, pc}
 8004cd4:	4283      	cmp	r3, r0
 8004cd6:	d3f3      	bcc.n	8004cc0 <__mcmp+0x18>
 8004cd8:	e7fa      	b.n	8004cd0 <__mcmp+0x28>
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cde:	e7f7      	b.n	8004cd0 <__mcmp+0x28>

08004ce0 <__mdiff>:
 8004ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4620      	mov	r0, r4
 8004cec:	4690      	mov	r8, r2
 8004cee:	f7ff ffdb 	bl	8004ca8 <__mcmp>
 8004cf2:	1e05      	subs	r5, r0, #0
 8004cf4:	d110      	bne.n	8004d18 <__mdiff+0x38>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7ff fd59 	bl	80047b0 <_Balloc>
 8004cfe:	b930      	cbnz	r0, 8004d0e <__mdiff+0x2e>
 8004d00:	4b3a      	ldr	r3, [pc, #232]	; (8004dec <__mdiff+0x10c>)
 8004d02:	4602      	mov	r2, r0
 8004d04:	f240 2137 	movw	r1, #567	; 0x237
 8004d08:	4839      	ldr	r0, [pc, #228]	; (8004df0 <__mdiff+0x110>)
 8004d0a:	f000 fb43 	bl	8005394 <__assert_func>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d18:	bfa4      	itt	ge
 8004d1a:	4643      	movge	r3, r8
 8004d1c:	46a0      	movge	r8, r4
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004d24:	bfa6      	itte	ge
 8004d26:	461c      	movge	r4, r3
 8004d28:	2500      	movge	r5, #0
 8004d2a:	2501      	movlt	r5, #1
 8004d2c:	f7ff fd40 	bl	80047b0 <_Balloc>
 8004d30:	b920      	cbnz	r0, 8004d3c <__mdiff+0x5c>
 8004d32:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <__mdiff+0x10c>)
 8004d34:	4602      	mov	r2, r0
 8004d36:	f240 2145 	movw	r1, #581	; 0x245
 8004d3a:	e7e5      	b.n	8004d08 <__mdiff+0x28>
 8004d3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004d40:	6926      	ldr	r6, [r4, #16]
 8004d42:	60c5      	str	r5, [r0, #12]
 8004d44:	f104 0914 	add.w	r9, r4, #20
 8004d48:	f108 0514 	add.w	r5, r8, #20
 8004d4c:	f100 0e14 	add.w	lr, r0, #20
 8004d50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004d54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004d58:	f108 0210 	add.w	r2, r8, #16
 8004d5c:	46f2      	mov	sl, lr
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004d68:	fa11 f88b 	uxtah	r8, r1, fp
 8004d6c:	b299      	uxth	r1, r3
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	eba8 0801 	sub.w	r8, r8, r1
 8004d74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004d7c:	fa1f f888 	uxth.w	r8, r8
 8004d80:	1419      	asrs	r1, r3, #16
 8004d82:	454e      	cmp	r6, r9
 8004d84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004d88:	f84a 3b04 	str.w	r3, [sl], #4
 8004d8c:	d8e8      	bhi.n	8004d60 <__mdiff+0x80>
 8004d8e:	1b33      	subs	r3, r6, r4
 8004d90:	3b15      	subs	r3, #21
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	3304      	adds	r3, #4
 8004d98:	3415      	adds	r4, #21
 8004d9a:	42a6      	cmp	r6, r4
 8004d9c:	bf38      	it	cc
 8004d9e:	2304      	movcc	r3, #4
 8004da0:	441d      	add	r5, r3
 8004da2:	4473      	add	r3, lr
 8004da4:	469e      	mov	lr, r3
 8004da6:	462e      	mov	r6, r5
 8004da8:	4566      	cmp	r6, ip
 8004daa:	d30e      	bcc.n	8004dca <__mdiff+0xea>
 8004dac:	f10c 0203 	add.w	r2, ip, #3
 8004db0:	1b52      	subs	r2, r2, r5
 8004db2:	f022 0203 	bic.w	r2, r2, #3
 8004db6:	3d03      	subs	r5, #3
 8004db8:	45ac      	cmp	ip, r5
 8004dba:	bf38      	it	cc
 8004dbc:	2200      	movcc	r2, #0
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004dc4:	b17a      	cbz	r2, 8004de6 <__mdiff+0x106>
 8004dc6:	6107      	str	r7, [r0, #16]
 8004dc8:	e7a4      	b.n	8004d14 <__mdiff+0x34>
 8004dca:	f856 8b04 	ldr.w	r8, [r6], #4
 8004dce:	fa11 f288 	uxtah	r2, r1, r8
 8004dd2:	1414      	asrs	r4, r2, #16
 8004dd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004dde:	f84e 2b04 	str.w	r2, [lr], #4
 8004de2:	1421      	asrs	r1, r4, #16
 8004de4:	e7e0      	b.n	8004da8 <__mdiff+0xc8>
 8004de6:	3f01      	subs	r7, #1
 8004de8:	e7ea      	b.n	8004dc0 <__mdiff+0xe0>
 8004dea:	bf00      	nop
 8004dec:	08036938 	.word	0x08036938
 8004df0:	08036949 	.word	0x08036949

08004df4 <__d2b>:
 8004df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	460f      	mov	r7, r1
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	ec59 8b10 	vmov	r8, r9, d0
 8004e00:	4616      	mov	r6, r2
 8004e02:	f7ff fcd5 	bl	80047b0 <_Balloc>
 8004e06:	4604      	mov	r4, r0
 8004e08:	b930      	cbnz	r0, 8004e18 <__d2b+0x24>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <__d2b+0xac>)
 8004e0e:	4825      	ldr	r0, [pc, #148]	; (8004ea4 <__d2b+0xb0>)
 8004e10:	f240 310f 	movw	r1, #783	; 0x30f
 8004e14:	f000 fabe 	bl	8005394 <__assert_func>
 8004e18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e20:	bb2d      	cbnz	r5, 8004e6e <__d2b+0x7a>
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	f1b8 0300 	subs.w	r3, r8, #0
 8004e28:	d026      	beq.n	8004e78 <__d2b+0x84>
 8004e2a:	4668      	mov	r0, sp
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f7ff fd87 	bl	8004940 <__lo0bits>
 8004e32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e36:	b1e8      	cbz	r0, 8004e74 <__d2b+0x80>
 8004e38:	f1c0 0320 	rsb	r3, r0, #32
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	430b      	orrs	r3, r1
 8004e42:	40c2      	lsrs	r2, r0
 8004e44:	6163      	str	r3, [r4, #20]
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9b01      	ldr	r3, [sp, #4]
 8004e4a:	61a3      	str	r3, [r4, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2202      	movne	r2, #2
 8004e52:	2201      	moveq	r2, #1
 8004e54:	6122      	str	r2, [r4, #16]
 8004e56:	b1bd      	cbz	r5, 8004e88 <__d2b+0x94>
 8004e58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004e5c:	4405      	add	r5, r0
 8004e5e:	603d      	str	r5, [r7, #0]
 8004e60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e64:	6030      	str	r0, [r6, #0]
 8004e66:	4620      	mov	r0, r4
 8004e68:	b003      	add	sp, #12
 8004e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e72:	e7d6      	b.n	8004e22 <__d2b+0x2e>
 8004e74:	6161      	str	r1, [r4, #20]
 8004e76:	e7e7      	b.n	8004e48 <__d2b+0x54>
 8004e78:	a801      	add	r0, sp, #4
 8004e7a:	f7ff fd61 	bl	8004940 <__lo0bits>
 8004e7e:	9b01      	ldr	r3, [sp, #4]
 8004e80:	6163      	str	r3, [r4, #20]
 8004e82:	3020      	adds	r0, #32
 8004e84:	2201      	movs	r2, #1
 8004e86:	e7e5      	b.n	8004e54 <__d2b+0x60>
 8004e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e90:	6038      	str	r0, [r7, #0]
 8004e92:	6918      	ldr	r0, [r3, #16]
 8004e94:	f7ff fd34 	bl	8004900 <__hi0bits>
 8004e98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e9c:	e7e2      	b.n	8004e64 <__d2b+0x70>
 8004e9e:	bf00      	nop
 8004ea0:	08036938 	.word	0x08036938
 8004ea4:	08036949 	.word	0x08036949

08004ea8 <__sfputc_r>:
 8004ea8:	6893      	ldr	r3, [r2, #8]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	b410      	push	{r4}
 8004eb0:	6093      	str	r3, [r2, #8]
 8004eb2:	da08      	bge.n	8004ec6 <__sfputc_r+0x1e>
 8004eb4:	6994      	ldr	r4, [r2, #24]
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	db01      	blt.n	8004ebe <__sfputc_r+0x16>
 8004eba:	290a      	cmp	r1, #10
 8004ebc:	d103      	bne.n	8004ec6 <__sfputc_r+0x1e>
 8004ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec2:	f7fe bd02 	b.w	80038ca <__swbuf_r>
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	1c58      	adds	r0, r3, #1
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	7019      	strb	r1, [r3, #0]
 8004ece:	4608      	mov	r0, r1
 8004ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <__sfputs_r>:
 8004ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed8:	4606      	mov	r6, r0
 8004eda:	460f      	mov	r7, r1
 8004edc:	4614      	mov	r4, r2
 8004ede:	18d5      	adds	r5, r2, r3
 8004ee0:	42ac      	cmp	r4, r5
 8004ee2:	d101      	bne.n	8004ee8 <__sfputs_r+0x12>
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e007      	b.n	8004ef8 <__sfputs_r+0x22>
 8004ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eec:	463a      	mov	r2, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f7ff ffda 	bl	8004ea8 <__sfputc_r>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d1f3      	bne.n	8004ee0 <__sfputs_r+0xa>
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004efc <_vfiprintf_r>:
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	460d      	mov	r5, r1
 8004f02:	b09d      	sub	sp, #116	; 0x74
 8004f04:	4614      	mov	r4, r2
 8004f06:	4698      	mov	r8, r3
 8004f08:	4606      	mov	r6, r0
 8004f0a:	b118      	cbz	r0, 8004f14 <_vfiprintf_r+0x18>
 8004f0c:	6a03      	ldr	r3, [r0, #32]
 8004f0e:	b90b      	cbnz	r3, 8004f14 <_vfiprintf_r+0x18>
 8004f10:	f7fe fbf4 	bl	80036fc <__sinit>
 8004f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f16:	07d9      	lsls	r1, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_vfiprintf_r+0x2a>
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	059a      	lsls	r2, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_vfiprintf_r+0x2a>
 8004f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f22:	f7fe fdf4 	bl	8003b0e <__retarget_lock_acquire_recursive>
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	071b      	lsls	r3, r3, #28
 8004f2a:	d501      	bpl.n	8004f30 <_vfiprintf_r+0x34>
 8004f2c:	692b      	ldr	r3, [r5, #16]
 8004f2e:	b99b      	cbnz	r3, 8004f58 <_vfiprintf_r+0x5c>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7fe fd06 	bl	8003944 <__swsetup_r>
 8004f38:	b170      	cbz	r0, 8004f58 <_vfiprintf_r+0x5c>
 8004f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f3c:	07dc      	lsls	r4, r3, #31
 8004f3e:	d504      	bpl.n	8004f4a <_vfiprintf_r+0x4e>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f44:	b01d      	add	sp, #116	; 0x74
 8004f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	0598      	lsls	r0, r3, #22
 8004f4e:	d4f7      	bmi.n	8004f40 <_vfiprintf_r+0x44>
 8004f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f52:	f7fe fddd 	bl	8003b10 <__retarget_lock_release_recursive>
 8004f56:	e7f3      	b.n	8004f40 <_vfiprintf_r+0x44>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f66:	2330      	movs	r3, #48	; 0x30
 8004f68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800511c <_vfiprintf_r+0x220>
 8004f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f70:	f04f 0901 	mov.w	r9, #1
 8004f74:	4623      	mov	r3, r4
 8004f76:	469a      	mov	sl, r3
 8004f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f7c:	b10a      	cbz	r2, 8004f82 <_vfiprintf_r+0x86>
 8004f7e:	2a25      	cmp	r2, #37	; 0x25
 8004f80:	d1f9      	bne.n	8004f76 <_vfiprintf_r+0x7a>
 8004f82:	ebba 0b04 	subs.w	fp, sl, r4
 8004f86:	d00b      	beq.n	8004fa0 <_vfiprintf_r+0xa4>
 8004f88:	465b      	mov	r3, fp
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff ffa1 	bl	8004ed6 <__sfputs_r>
 8004f94:	3001      	adds	r0, #1
 8004f96:	f000 80a9 	beq.w	80050ec <_vfiprintf_r+0x1f0>
 8004f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9c:	445a      	add	r2, fp
 8004f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a1 	beq.w	80050ec <_vfiprintf_r+0x1f0>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fb4:	f10a 0a01 	add.w	sl, sl, #1
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	9307      	str	r3, [sp, #28]
 8004fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fc2:	4654      	mov	r4, sl
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fca:	4854      	ldr	r0, [pc, #336]	; (800511c <_vfiprintf_r+0x220>)
 8004fcc:	f7fb f9a0 	bl	8000310 <memchr>
 8004fd0:	9a04      	ldr	r2, [sp, #16]
 8004fd2:	b9d8      	cbnz	r0, 800500c <_vfiprintf_r+0x110>
 8004fd4:	06d1      	lsls	r1, r2, #27
 8004fd6:	bf44      	itt	mi
 8004fd8:	2320      	movmi	r3, #32
 8004fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fde:	0713      	lsls	r3, r2, #28
 8004fe0:	bf44      	itt	mi
 8004fe2:	232b      	movmi	r3, #43	; 0x2b
 8004fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d015      	beq.n	800501c <_vfiprintf_r+0x120>
 8004ff0:	9a07      	ldr	r2, [sp, #28]
 8004ff2:	4654      	mov	r4, sl
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f04f 0c0a 	mov.w	ip, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005000:	3b30      	subs	r3, #48	; 0x30
 8005002:	2b09      	cmp	r3, #9
 8005004:	d94d      	bls.n	80050a2 <_vfiprintf_r+0x1a6>
 8005006:	b1b0      	cbz	r0, 8005036 <_vfiprintf_r+0x13a>
 8005008:	9207      	str	r2, [sp, #28]
 800500a:	e014      	b.n	8005036 <_vfiprintf_r+0x13a>
 800500c:	eba0 0308 	sub.w	r3, r0, r8
 8005010:	fa09 f303 	lsl.w	r3, r9, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	46a2      	mov	sl, r4
 800501a:	e7d2      	b.n	8004fc2 <_vfiprintf_r+0xc6>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	1d19      	adds	r1, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	9103      	str	r1, [sp, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	bfbb      	ittet	lt
 8005028:	425b      	neglt	r3, r3
 800502a:	f042 0202 	orrlt.w	r2, r2, #2
 800502e:	9307      	strge	r3, [sp, #28]
 8005030:	9307      	strlt	r3, [sp, #28]
 8005032:	bfb8      	it	lt
 8005034:	9204      	strlt	r2, [sp, #16]
 8005036:	7823      	ldrb	r3, [r4, #0]
 8005038:	2b2e      	cmp	r3, #46	; 0x2e
 800503a:	d10c      	bne.n	8005056 <_vfiprintf_r+0x15a>
 800503c:	7863      	ldrb	r3, [r4, #1]
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	d134      	bne.n	80050ac <_vfiprintf_r+0x1b0>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	9203      	str	r2, [sp, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005052:	3402      	adds	r4, #2
 8005054:	9305      	str	r3, [sp, #20]
 8005056:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800512c <_vfiprintf_r+0x230>
 800505a:	7821      	ldrb	r1, [r4, #0]
 800505c:	2203      	movs	r2, #3
 800505e:	4650      	mov	r0, sl
 8005060:	f7fb f956 	bl	8000310 <memchr>
 8005064:	b138      	cbz	r0, 8005076 <_vfiprintf_r+0x17a>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	eba0 000a 	sub.w	r0, r0, sl
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	4082      	lsls	r2, r0
 8005070:	4313      	orrs	r3, r2
 8005072:	3401      	adds	r4, #1
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507a:	4829      	ldr	r0, [pc, #164]	; (8005120 <_vfiprintf_r+0x224>)
 800507c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005080:	2206      	movs	r2, #6
 8005082:	f7fb f945 	bl	8000310 <memchr>
 8005086:	2800      	cmp	r0, #0
 8005088:	d03f      	beq.n	800510a <_vfiprintf_r+0x20e>
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <_vfiprintf_r+0x228>)
 800508c:	bb1b      	cbnz	r3, 80050d6 <_vfiprintf_r+0x1da>
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	3307      	adds	r3, #7
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	3308      	adds	r3, #8
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	443b      	add	r3, r7
 800509e:	9309      	str	r3, [sp, #36]	; 0x24
 80050a0:	e768      	b.n	8004f74 <_vfiprintf_r+0x78>
 80050a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a6:	460c      	mov	r4, r1
 80050a8:	2001      	movs	r0, #1
 80050aa:	e7a6      	b.n	8004ffa <_vfiprintf_r+0xfe>
 80050ac:	2300      	movs	r3, #0
 80050ae:	3401      	adds	r4, #1
 80050b0:	9305      	str	r3, [sp, #20]
 80050b2:	4619      	mov	r1, r3
 80050b4:	f04f 0c0a 	mov.w	ip, #10
 80050b8:	4620      	mov	r0, r4
 80050ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050be:	3a30      	subs	r2, #48	; 0x30
 80050c0:	2a09      	cmp	r2, #9
 80050c2:	d903      	bls.n	80050cc <_vfiprintf_r+0x1d0>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0c6      	beq.n	8005056 <_vfiprintf_r+0x15a>
 80050c8:	9105      	str	r1, [sp, #20]
 80050ca:	e7c4      	b.n	8005056 <_vfiprintf_r+0x15a>
 80050cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d0:	4604      	mov	r4, r0
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7f0      	b.n	80050b8 <_vfiprintf_r+0x1bc>
 80050d6:	ab03      	add	r3, sp, #12
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	462a      	mov	r2, r5
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <_vfiprintf_r+0x22c>)
 80050de:	a904      	add	r1, sp, #16
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7fd fed5 	bl	8002e90 <_printf_float>
 80050e6:	4607      	mov	r7, r0
 80050e8:	1c78      	adds	r0, r7, #1
 80050ea:	d1d6      	bne.n	800509a <_vfiprintf_r+0x19e>
 80050ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ee:	07d9      	lsls	r1, r3, #31
 80050f0:	d405      	bmi.n	80050fe <_vfiprintf_r+0x202>
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	059a      	lsls	r2, r3, #22
 80050f6:	d402      	bmi.n	80050fe <_vfiprintf_r+0x202>
 80050f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050fa:	f7fe fd09 	bl	8003b10 <__retarget_lock_release_recursive>
 80050fe:	89ab      	ldrh	r3, [r5, #12]
 8005100:	065b      	lsls	r3, r3, #25
 8005102:	f53f af1d 	bmi.w	8004f40 <_vfiprintf_r+0x44>
 8005106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005108:	e71c      	b.n	8004f44 <_vfiprintf_r+0x48>
 800510a:	ab03      	add	r3, sp, #12
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	462a      	mov	r2, r5
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <_vfiprintf_r+0x22c>)
 8005112:	a904      	add	r1, sp, #16
 8005114:	4630      	mov	r0, r6
 8005116:	f7fe f943 	bl	80033a0 <_printf_i>
 800511a:	e7e4      	b.n	80050e6 <_vfiprintf_r+0x1ea>
 800511c:	08036aa4 	.word	0x08036aa4
 8005120:	08036aae 	.word	0x08036aae
 8005124:	08002e91 	.word	0x08002e91
 8005128:	08004ed7 	.word	0x08004ed7
 800512c:	08036aaa 	.word	0x08036aaa

08005130 <__sflush_r>:
 8005130:	898a      	ldrh	r2, [r1, #12]
 8005132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005136:	4605      	mov	r5, r0
 8005138:	0710      	lsls	r0, r2, #28
 800513a:	460c      	mov	r4, r1
 800513c:	d458      	bmi.n	80051f0 <__sflush_r+0xc0>
 800513e:	684b      	ldr	r3, [r1, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dc05      	bgt.n	8005150 <__sflush_r+0x20>
 8005144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	dc02      	bgt.n	8005150 <__sflush_r+0x20>
 800514a:	2000      	movs	r0, #0
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005152:	2e00      	cmp	r6, #0
 8005154:	d0f9      	beq.n	800514a <__sflush_r+0x1a>
 8005156:	2300      	movs	r3, #0
 8005158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800515c:	682f      	ldr	r7, [r5, #0]
 800515e:	6a21      	ldr	r1, [r4, #32]
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	d032      	beq.n	80051ca <__sflush_r+0x9a>
 8005164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	075a      	lsls	r2, r3, #29
 800516a:	d505      	bpl.n	8005178 <__sflush_r+0x48>
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	1ac0      	subs	r0, r0, r3
 8005170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005172:	b10b      	cbz	r3, 8005178 <__sflush_r+0x48>
 8005174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005176:	1ac0      	subs	r0, r0, r3
 8005178:	2300      	movs	r3, #0
 800517a:	4602      	mov	r2, r0
 800517c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800517e:	6a21      	ldr	r1, [r4, #32]
 8005180:	4628      	mov	r0, r5
 8005182:	47b0      	blx	r6
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	d106      	bne.n	8005198 <__sflush_r+0x68>
 800518a:	6829      	ldr	r1, [r5, #0]
 800518c:	291d      	cmp	r1, #29
 800518e:	d82b      	bhi.n	80051e8 <__sflush_r+0xb8>
 8005190:	4a29      	ldr	r2, [pc, #164]	; (8005238 <__sflush_r+0x108>)
 8005192:	410a      	asrs	r2, r1
 8005194:	07d6      	lsls	r6, r2, #31
 8005196:	d427      	bmi.n	80051e8 <__sflush_r+0xb8>
 8005198:	2200      	movs	r2, #0
 800519a:	6062      	str	r2, [r4, #4]
 800519c:	04d9      	lsls	r1, r3, #19
 800519e:	6922      	ldr	r2, [r4, #16]
 80051a0:	6022      	str	r2, [r4, #0]
 80051a2:	d504      	bpl.n	80051ae <__sflush_r+0x7e>
 80051a4:	1c42      	adds	r2, r0, #1
 80051a6:	d101      	bne.n	80051ac <__sflush_r+0x7c>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b903      	cbnz	r3, 80051ae <__sflush_r+0x7e>
 80051ac:	6560      	str	r0, [r4, #84]	; 0x54
 80051ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051b0:	602f      	str	r7, [r5, #0]
 80051b2:	2900      	cmp	r1, #0
 80051b4:	d0c9      	beq.n	800514a <__sflush_r+0x1a>
 80051b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ba:	4299      	cmp	r1, r3
 80051bc:	d002      	beq.n	80051c4 <__sflush_r+0x94>
 80051be:	4628      	mov	r0, r5
 80051c0:	f7ff faaa 	bl	8004718 <_free_r>
 80051c4:	2000      	movs	r0, #0
 80051c6:	6360      	str	r0, [r4, #52]	; 0x34
 80051c8:	e7c0      	b.n	800514c <__sflush_r+0x1c>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b0      	blx	r6
 80051d0:	1c41      	adds	r1, r0, #1
 80051d2:	d1c8      	bne.n	8005166 <__sflush_r+0x36>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0c5      	beq.n	8005166 <__sflush_r+0x36>
 80051da:	2b1d      	cmp	r3, #29
 80051dc:	d001      	beq.n	80051e2 <__sflush_r+0xb2>
 80051de:	2b16      	cmp	r3, #22
 80051e0:	d101      	bne.n	80051e6 <__sflush_r+0xb6>
 80051e2:	602f      	str	r7, [r5, #0]
 80051e4:	e7b1      	b.n	800514a <__sflush_r+0x1a>
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	e7ad      	b.n	800514c <__sflush_r+0x1c>
 80051f0:	690f      	ldr	r7, [r1, #16]
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	d0a9      	beq.n	800514a <__sflush_r+0x1a>
 80051f6:	0793      	lsls	r3, r2, #30
 80051f8:	680e      	ldr	r6, [r1, #0]
 80051fa:	bf08      	it	eq
 80051fc:	694b      	ldreq	r3, [r1, #20]
 80051fe:	600f      	str	r7, [r1, #0]
 8005200:	bf18      	it	ne
 8005202:	2300      	movne	r3, #0
 8005204:	eba6 0807 	sub.w	r8, r6, r7
 8005208:	608b      	str	r3, [r1, #8]
 800520a:	f1b8 0f00 	cmp.w	r8, #0
 800520e:	dd9c      	ble.n	800514a <__sflush_r+0x1a>
 8005210:	6a21      	ldr	r1, [r4, #32]
 8005212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005214:	4643      	mov	r3, r8
 8005216:	463a      	mov	r2, r7
 8005218:	4628      	mov	r0, r5
 800521a:	47b0      	blx	r6
 800521c:	2800      	cmp	r0, #0
 800521e:	dc06      	bgt.n	800522e <__sflush_r+0xfe>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800522c:	e78e      	b.n	800514c <__sflush_r+0x1c>
 800522e:	4407      	add	r7, r0
 8005230:	eba8 0800 	sub.w	r8, r8, r0
 8005234:	e7e9      	b.n	800520a <__sflush_r+0xda>
 8005236:	bf00      	nop
 8005238:	dfbffffe 	.word	0xdfbffffe

0800523c <_fflush_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	690b      	ldr	r3, [r1, #16]
 8005240:	4605      	mov	r5, r0
 8005242:	460c      	mov	r4, r1
 8005244:	b913      	cbnz	r3, 800524c <_fflush_r+0x10>
 8005246:	2500      	movs	r5, #0
 8005248:	4628      	mov	r0, r5
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	b118      	cbz	r0, 8005256 <_fflush_r+0x1a>
 800524e:	6a03      	ldr	r3, [r0, #32]
 8005250:	b90b      	cbnz	r3, 8005256 <_fflush_r+0x1a>
 8005252:	f7fe fa53 	bl	80036fc <__sinit>
 8005256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f3      	beq.n	8005246 <_fflush_r+0xa>
 800525e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005260:	07d0      	lsls	r0, r2, #31
 8005262:	d404      	bmi.n	800526e <_fflush_r+0x32>
 8005264:	0599      	lsls	r1, r3, #22
 8005266:	d402      	bmi.n	800526e <_fflush_r+0x32>
 8005268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800526a:	f7fe fc50 	bl	8003b0e <__retarget_lock_acquire_recursive>
 800526e:	4628      	mov	r0, r5
 8005270:	4621      	mov	r1, r4
 8005272:	f7ff ff5d 	bl	8005130 <__sflush_r>
 8005276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005278:	07da      	lsls	r2, r3, #31
 800527a:	4605      	mov	r5, r0
 800527c:	d4e4      	bmi.n	8005248 <_fflush_r+0xc>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	059b      	lsls	r3, r3, #22
 8005282:	d4e1      	bmi.n	8005248 <_fflush_r+0xc>
 8005284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005286:	f7fe fc43 	bl	8003b10 <__retarget_lock_release_recursive>
 800528a:	e7dd      	b.n	8005248 <_fflush_r+0xc>

0800528c <__swhatbuf_r>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	460c      	mov	r4, r1
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	2900      	cmp	r1, #0
 8005296:	b096      	sub	sp, #88	; 0x58
 8005298:	4615      	mov	r5, r2
 800529a:	461e      	mov	r6, r3
 800529c:	da0d      	bge.n	80052ba <__swhatbuf_r+0x2e>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	bf0c      	ite	eq
 80052aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80052ae:	2340      	movne	r3, #64	; 0x40
 80052b0:	2000      	movs	r0, #0
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	b016      	add	sp, #88	; 0x58
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	466a      	mov	r2, sp
 80052bc:	f000 f848 	bl	8005350 <_fstat_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	dbec      	blt.n	800529e <__swhatbuf_r+0x12>
 80052c4:	9901      	ldr	r1, [sp, #4]
 80052c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80052ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80052ce:	4259      	negs	r1, r3
 80052d0:	4159      	adcs	r1, r3
 80052d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d6:	e7eb      	b.n	80052b0 <__swhatbuf_r+0x24>

080052d8 <__smakebuf_r>:
 80052d8:	898b      	ldrh	r3, [r1, #12]
 80052da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052dc:	079d      	lsls	r5, r3, #30
 80052de:	4606      	mov	r6, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	d507      	bpl.n	80052f4 <__smakebuf_r+0x1c>
 80052e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	2301      	movs	r3, #1
 80052ee:	6163      	str	r3, [r4, #20]
 80052f0:	b002      	add	sp, #8
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	ab01      	add	r3, sp, #4
 80052f6:	466a      	mov	r2, sp
 80052f8:	f7ff ffc8 	bl	800528c <__swhatbuf_r>
 80052fc:	9900      	ldr	r1, [sp, #0]
 80052fe:	4605      	mov	r5, r0
 8005300:	4630      	mov	r0, r6
 8005302:	f7fd fca9 	bl	8002c58 <_malloc_r>
 8005306:	b948      	cbnz	r0, 800531c <__smakebuf_r+0x44>
 8005308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530c:	059a      	lsls	r2, r3, #22
 800530e:	d4ef      	bmi.n	80052f0 <__smakebuf_r+0x18>
 8005310:	f023 0303 	bic.w	r3, r3, #3
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	e7e3      	b.n	80052e4 <__smakebuf_r+0xc>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	6163      	str	r3, [r4, #20]
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	6120      	str	r0, [r4, #16]
 800532e:	b15b      	cbz	r3, 8005348 <__smakebuf_r+0x70>
 8005330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005334:	4630      	mov	r0, r6
 8005336:	f000 f81d 	bl	8005374 <_isatty_r>
 800533a:	b128      	cbz	r0, 8005348 <__smakebuf_r+0x70>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	431d      	orrs	r5, r3
 800534c:	81a5      	strh	r5, [r4, #12]
 800534e:	e7cf      	b.n	80052f0 <__smakebuf_r+0x18>

08005350 <_fstat_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d07      	ldr	r5, [pc, #28]	; (8005370 <_fstat_r+0x20>)
 8005354:	2300      	movs	r3, #0
 8005356:	4604      	mov	r4, r0
 8005358:	4608      	mov	r0, r1
 800535a:	4611      	mov	r1, r2
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	f000 f8d3 	bl	8005508 <_fstat>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d102      	bne.n	800536c <_fstat_r+0x1c>
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	b103      	cbz	r3, 800536c <_fstat_r+0x1c>
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	bd38      	pop	{r3, r4, r5, pc}
 800536e:	bf00      	nop
 8005370:	24001364 	.word	0x24001364

08005374 <_isatty_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d06      	ldr	r5, [pc, #24]	; (8005390 <_isatty_r+0x1c>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f000 f8d2 	bl	8005528 <_isatty>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_isatty_r+0x1a>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_isatty_r+0x1a>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	24001364 	.word	0x24001364

08005394 <__assert_func>:
 8005394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005396:	4614      	mov	r4, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <__assert_func+0x2c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4605      	mov	r5, r0
 80053a0:	68d8      	ldr	r0, [r3, #12]
 80053a2:	b14c      	cbz	r4, 80053b8 <__assert_func+0x24>
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <__assert_func+0x30>)
 80053a6:	9100      	str	r1, [sp, #0]
 80053a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053ac:	4906      	ldr	r1, [pc, #24]	; (80053c8 <__assert_func+0x34>)
 80053ae:	462b      	mov	r3, r5
 80053b0:	f000 f844 	bl	800543c <fiprintf>
 80053b4:	f000 f854 	bl	8005460 <abort>
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <__assert_func+0x38>)
 80053ba:	461c      	mov	r4, r3
 80053bc:	e7f3      	b.n	80053a6 <__assert_func+0x12>
 80053be:	bf00      	nop
 80053c0:	24000af8 	.word	0x24000af8
 80053c4:	08036abf 	.word	0x08036abf
 80053c8:	08036acc 	.word	0x08036acc
 80053cc:	08036afa 	.word	0x08036afa

080053d0 <_calloc_r>:
 80053d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d2:	fba1 2402 	umull	r2, r4, r1, r2
 80053d6:	b94c      	cbnz	r4, 80053ec <_calloc_r+0x1c>
 80053d8:	4611      	mov	r1, r2
 80053da:	9201      	str	r2, [sp, #4]
 80053dc:	f7fd fc3c 	bl	8002c58 <_malloc_r>
 80053e0:	9a01      	ldr	r2, [sp, #4]
 80053e2:	4605      	mov	r5, r0
 80053e4:	b930      	cbnz	r0, 80053f4 <_calloc_r+0x24>
 80053e6:	4628      	mov	r0, r5
 80053e8:	b003      	add	sp, #12
 80053ea:	bd30      	pop	{r4, r5, pc}
 80053ec:	220c      	movs	r2, #12
 80053ee:	6002      	str	r2, [r0, #0]
 80053f0:	2500      	movs	r5, #0
 80053f2:	e7f8      	b.n	80053e6 <_calloc_r+0x16>
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7fe fafd 	bl	80039f4 <memset>
 80053fa:	e7f4      	b.n	80053e6 <_calloc_r+0x16>

080053fc <__ascii_mbtowc>:
 80053fc:	b082      	sub	sp, #8
 80053fe:	b901      	cbnz	r1, 8005402 <__ascii_mbtowc+0x6>
 8005400:	a901      	add	r1, sp, #4
 8005402:	b142      	cbz	r2, 8005416 <__ascii_mbtowc+0x1a>
 8005404:	b14b      	cbz	r3, 800541a <__ascii_mbtowc+0x1e>
 8005406:	7813      	ldrb	r3, [r2, #0]
 8005408:	600b      	str	r3, [r1, #0]
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	1e10      	subs	r0, r2, #0
 800540e:	bf18      	it	ne
 8005410:	2001      	movne	r0, #1
 8005412:	b002      	add	sp, #8
 8005414:	4770      	bx	lr
 8005416:	4610      	mov	r0, r2
 8005418:	e7fb      	b.n	8005412 <__ascii_mbtowc+0x16>
 800541a:	f06f 0001 	mvn.w	r0, #1
 800541e:	e7f8      	b.n	8005412 <__ascii_mbtowc+0x16>

08005420 <__ascii_wctomb>:
 8005420:	b149      	cbz	r1, 8005436 <__ascii_wctomb+0x16>
 8005422:	2aff      	cmp	r2, #255	; 0xff
 8005424:	bf85      	ittet	hi
 8005426:	238a      	movhi	r3, #138	; 0x8a
 8005428:	6003      	strhi	r3, [r0, #0]
 800542a:	700a      	strbls	r2, [r1, #0]
 800542c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005430:	bf98      	it	ls
 8005432:	2001      	movls	r0, #1
 8005434:	4770      	bx	lr
 8005436:	4608      	mov	r0, r1
 8005438:	4770      	bx	lr
	...

0800543c <fiprintf>:
 800543c:	b40e      	push	{r1, r2, r3}
 800543e:	b503      	push	{r0, r1, lr}
 8005440:	4601      	mov	r1, r0
 8005442:	ab03      	add	r3, sp, #12
 8005444:	4805      	ldr	r0, [pc, #20]	; (800545c <fiprintf+0x20>)
 8005446:	f853 2b04 	ldr.w	r2, [r3], #4
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	f7ff fd55 	bl	8004efc <_vfiprintf_r>
 8005452:	b002      	add	sp, #8
 8005454:	f85d eb04 	ldr.w	lr, [sp], #4
 8005458:	b003      	add	sp, #12
 800545a:	4770      	bx	lr
 800545c:	24000af8 	.word	0x24000af8

08005460 <abort>:
 8005460:	b508      	push	{r3, lr}
 8005462:	2006      	movs	r0, #6
 8005464:	f000 f82c 	bl	80054c0 <raise>
 8005468:	2001      	movs	r0, #1
 800546a:	f000 f885 	bl	8005578 <_exit>

0800546e <_raise_r>:
 800546e:	291f      	cmp	r1, #31
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	460d      	mov	r5, r1
 8005476:	d904      	bls.n	8005482 <_raise_r+0x14>
 8005478:	2316      	movs	r3, #22
 800547a:	6003      	str	r3, [r0, #0]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005484:	b112      	cbz	r2, 800548c <_raise_r+0x1e>
 8005486:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800548a:	b94b      	cbnz	r3, 80054a0 <_raise_r+0x32>
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f831 	bl	80054f4 <_getpid_r>
 8005492:	462a      	mov	r2, r5
 8005494:	4601      	mov	r1, r0
 8005496:	4620      	mov	r0, r4
 8005498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800549c:	f000 b818 	b.w	80054d0 <_kill_r>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d00a      	beq.n	80054ba <_raise_r+0x4c>
 80054a4:	1c59      	adds	r1, r3, #1
 80054a6:	d103      	bne.n	80054b0 <_raise_r+0x42>
 80054a8:	2316      	movs	r3, #22
 80054aa:	6003      	str	r3, [r0, #0]
 80054ac:	2001      	movs	r0, #1
 80054ae:	e7e7      	b.n	8005480 <_raise_r+0x12>
 80054b0:	2400      	movs	r4, #0
 80054b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80054b6:	4628      	mov	r0, r5
 80054b8:	4798      	blx	r3
 80054ba:	2000      	movs	r0, #0
 80054bc:	e7e0      	b.n	8005480 <_raise_r+0x12>
	...

080054c0 <raise>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <raise+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f7ff bfd2 	b.w	800546e <_raise_r>
 80054ca:	bf00      	nop
 80054cc:	24000af8 	.word	0x24000af8

080054d0 <_kill_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	; (80054f0 <_kill_r+0x20>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	f000 f82b 	bl	8005538 <_kill>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	d102      	bne.n	80054ec <_kill_r+0x1c>
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	b103      	cbz	r3, 80054ec <_kill_r+0x1c>
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	bd38      	pop	{r3, r4, r5, pc}
 80054ee:	bf00      	nop
 80054f0:	24001364 	.word	0x24001364

080054f4 <_getpid_r>:
 80054f4:	f000 b810 	b.w	8005518 <_getpid>

080054f8 <_close>:
 80054f8:	4b02      	ldr	r3, [pc, #8]	; (8005504 <_close+0xc>)
 80054fa:	2258      	movs	r2, #88	; 0x58
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005502:	4770      	bx	lr
 8005504:	24001364 	.word	0x24001364

08005508 <_fstat>:
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <_fstat+0xc>)
 800550a:	2258      	movs	r2, #88	; 0x58
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005512:	4770      	bx	lr
 8005514:	24001364 	.word	0x24001364

08005518 <_getpid>:
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <_getpid+0xc>)
 800551a:	2258      	movs	r2, #88	; 0x58
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005522:	4770      	bx	lr
 8005524:	24001364 	.word	0x24001364

08005528 <_isatty>:
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <_isatty+0xc>)
 800552a:	2258      	movs	r2, #88	; 0x58
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	2000      	movs	r0, #0
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	24001364 	.word	0x24001364

08005538 <_kill>:
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <_kill+0xc>)
 800553a:	2258      	movs	r2, #88	; 0x58
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005542:	4770      	bx	lr
 8005544:	24001364 	.word	0x24001364

08005548 <_lseek>:
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <_lseek+0xc>)
 800554a:	2258      	movs	r2, #88	; 0x58
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005552:	4770      	bx	lr
 8005554:	24001364 	.word	0x24001364

08005558 <_read>:
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <_read+0xc>)
 800555a:	2258      	movs	r2, #88	; 0x58
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005562:	4770      	bx	lr
 8005564:	24001364 	.word	0x24001364

08005568 <_write>:
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <_write+0xc>)
 800556a:	2258      	movs	r2, #88	; 0x58
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005572:	4770      	bx	lr
 8005574:	24001364 	.word	0x24001364

08005578 <_exit>:
 8005578:	e7fe      	b.n	8005578 <_exit>
	...

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
